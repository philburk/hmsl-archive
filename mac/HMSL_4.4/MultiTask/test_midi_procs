\ Define procedures that output MIDIANEW TASK-TEST_MIDI_PROCS: BOUNCING ( -- , bouncing ball effect )	::CO		0 SLEEP.FOR		BEGIN			12 0			DO				5 0 do					j 50 + i +					80 i 8 * - 6					rnow MIDI.NOTEON.FOR					10 SLEEP.FOR				loop			LOOP		AGAIN	;;CO;: PLAYSOME ( -- , play some random notes )	::CO		0 SLEEP.FOR		BEGIN			12 0			DO				50 i choose + 80 6				rnow MIDI.NOTEON.FOR				10 SLEEP.FOR			LOOP			4 choose 0=		UNTIL	;;CO;: HICCUP ( -- , sleep for different lengths of time in loop )	::CO		0 SLEEP.FOR		BEGIN			20 choose 50 + 80 6 rnow midi.noteon.for			8 sleep.for			20 choose 60 + 80 6 rnow midi.noteon.for			24 sleep.for		AGAIN	;;CO;: TEST.I/O ( -- )	::CO	BEGIN		." Hello" cr		60 sleep.for	AGAIN	;;CO;: WALK.TASK  ( -- , spawn by entering: FORK WALK.TASK )\ You will get back a contectBlock process pointer which\ you can stop by passing it to KILL.PROCESS.	60	BEGIN		2 choose+/- +		DUP 80 6 midi.noteon.for		10 sleep.for	AGAIN	drop;: BANGIT ( note dur -- )	::CO [ 2 params ]	BEGIN		vtime@ >r		over 80 6		who @ ..@ cb_time_pos time-advance @ + vtime!		midi.noteon.for		r> vtime!		dup sleep.for	AGAIN drop	;;CO;if.forgotten kill.all.processes
\ VERY simple paint program.\\ This is just to demonstrate interfacing with the Mac Toolbox\\ Before attempting to understand this demo,\ please read Inside Mac chapters on QuickDraw and the Event Manager.\ Also read the HForth chapter on Macintosh Interface.\\ Author: Phil Burk\ Copyright 1991 Phil BurkANEW TASK-DEMO_PAINT140 constant DPT_MENU_IDvariable DPT-MENU-PTRWindowTracker DPT-Tracker \ associates events with windowsvariable DPT-WINDOWwindowTemplate DPT-NewWindowvariable DPT-MOUSE-XYvariable DPT-DOWN	\ is the mouse down ?variable DPT-QUIT: DPT.SETPORT  ( -- , set current graphport to current window )	dpt-window @ ?dup	IF		SetPort()	THEN;: DPT.CLEAR ( -- , clear paint window )	dpt-window @ 16 +  ( offset to portRect )	EraseRect();: DPT.RANDOM.COLOR ( -- , use a random color)	dpt.setport	7 choose 1+ \ pick random color index 1-7	cells mac-colors + \ map index to color number	@ ForeColor() \ set color;: DPT.MENUPICK  ( -- , called by HForth event handler )	which-part @ 15 and \ get item number    CASE		1 OF dpt.clear  ENDOF		2 OF dpt.random.color ENDOF    ENDCASE;: DPT.DRAW.MENU ( -- , setup menu for paint )	dpt_menu_id " Paint" NewMenu() dup dpt-menu-ptr !	" Clear;Random Color" AppendMenu()	dpt-menu-ptr @ 0 InsertMenu() \ at end	DrawMenuBar()\\ associate DPT.MENUPICK function with that menu	'c dpt.menupick dpt_menu_id ev.menu.func!;: DPT.UNDRAW.MENU  ( -- )	dpt_menu_id DeleteMenu()	DrawMenuBar()	dpt-menu-ptr @ ?dup	IF 	DisposeMenu() dpt-menu-ptr off	THEN;: DPT.GETXY ( -- x y , current mouse position )	dpt.setport	dpt-mouse-xy GetMouse()	dpt-mouse-xy 2+ w@ w->s	dpt-mouse-xy w@ w->s;	: DPT.WINDOW.GROW  ( -- , grow a window )    which-window @	last-event ..@ er_where	GrowRect GrowWindow() ?dup	IF which-window @ swap		dup $ FFFF and swap -16 shift  ( unpack low and high x,y )		-1 SizeWindow()	THEN;:  DPT.WINDOW.CONTENT ( -- )	FrontWindow() which-window @ -	IF which-window @ SelectWindow()	ELSE \ move to that position		dpt-down on		dpt.setport		dpt.getxy MoveTo() \ ." Move" cr	THEN;: DPT.DRAW ( -- , draw line if no other event )\	." DRAW" cr	dpt-down @	IF		dpt.setport		dpt.getxy LineTo()	THEN;: DPT.WINDOW.DRAG  ( -- , drag window )	which-window @	last-event ..@ er_where	DragRect DragWindow();: DPT.HANDLE.EVENT ( -- , handle various event types)	last-event ..@ er_what \ what kind	CASE		0 OF dpt.draw ENDOF		mButUpEvt  OF dpt-down off  ENDOF		keyDwnEvt	OF ." Key!" cr ENDOF		keyUpEvt	OF noop ENDOF						autoKeyEvt	OF noop ENDOF		updatEvt OF noop ENDOF		activateEvt OF noop ENDOF	ENDCASE;: DPT.CLOSE.WINDOW ( -- )	dpt-window @ ?dup	IF		DisposeWindow()		dpt.undraw.menu		dpt-window off	THEN;: DPT.WINDOW.GOAWAY  ( -- )    which-window @	last-event ..@ er_where	TrackGoAway()	IF		dpt-quit on	THEN;: DPT.HANDLE.DOWN ( -- , mouse down event after FindWIndow)	which-part @	CASE		INContent	OF DPT.window.Content ENDOF		InDrag	OF	DPT.window.Drag ENDOF		InGrow	OF	DPT.window.Grow ENDOF		InGoaway	OF DPT.window.Goaway ENDOF	ENDCASE;\ Open window and link it into DPT system.\ Make it current.: DPT.OPEN.WINDOW ( -- , Open window for drawing )\    DPT-NewWindow window.defaults	" Untitled" DPT-NewWindow ..! wt_title	40 DPT-NewWindow .. wt_rect ..! rect_top	10 DPT-NewWindow .. wt_rect ..! rect_left	40 gr_ymax + DPT-NewWindow .. wt_rect ..! rect_bottom	10 gr_xmax + DPT-NewWindow .. wt_rect ..! rect_right\	DPT-NewWindow openwindow() ?dup 	IF	dup dpt-window !		DPT-tracker dup>r link.window<->tracker		'c DPT.handle.event r@ ..! wt_EVHandler		'c DPT.handle.down r> ..! wt_MDHandler		dpt-window @ SelectWindow()		dpt.draw.menu	ELSE ." Could not open Paint window!" cr abort	THEN;if.forgotten DPT.CLOSE.WINDOW: DEMO.PAINT	dpt.open.window	dpt-quit off	BEGIN		dpt.draw		dpt-quit @		?terminal OR \ needed to scan events!!!!	UNTIL	dpt.close.window;cr ." Enter:  DEMO.PAINT   to run paint program." cr
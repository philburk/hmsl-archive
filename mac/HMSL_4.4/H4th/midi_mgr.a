* Access Apple MIDI Manager* This file just contains the few things that are required at the Assembly level.** 1) is the call to SndDispVersion which requires a Link with a library.* 2) is the ReadHook for the input ports.** Copyright 1989 Phil Burk;;; ________________________________________________________________________________;;; Excerpts from MIDI.a from MIDI Manager diskmidiToolNum			EQU		4		; tool number of MIDI Mgr for SndDispVersion call.;;;;;; valid results to be returned from readHooks;;;midiKeepPacket		EQU		0midiMorePacket		EQU		1midiNoMorePacket	EQU		2* MIDIPacket	RECORD	0* flags			DS.B	1* len			DS.B	1* tStamp		DS.L	1* data			EQU		** 				ENDR				MACRO&label			_SndDispVersion				IMPORT	SndDispVersion&label			JSR		SndDispVersion			; call the sound dispatcher glue in MIDIGlue.o				ENDM;;; ________________________________________________________________________________F_SNDDISPVERSION  ; ( toolNum -- version )			move.l		#0,-(a7)		; space for return value			move.l		(a6)+,d0			move.w		d0,-(a7)		; toolnum			_SndDispVersion			move.l		(A7)+,-(a6)			rts* ReadHook is called from Pascal with the following parameters:*		MIDI_Packet_ptr , refcon** We will simply copy the packet to the address given as the refcon!DebugMIDIReadHook	; for debugging			_DebuggerMIDIReadHook	; called from Pascal* Get parameters from Pascal			move.l		$4(a7),a1		; A1 = refcon, destination			move.l		$8(a7),a0		; A0 = pointer to packet** Copy Packet to (refcon)			clr.l		D0			move.b		$1(a0),d0		; D0 = length of packet			asr.l		#2,d0			; calc number of cells + 1 - 1@1			move.l		(a0)+,(a1)+			dbra		d0,@1** Clean Up stack and return value.			move.l		(a7)+,a0		; save return address			adda.l		#$8,a7			; increment past parameters			move.w		#midiNoMorePacket,(a7)	; return value			jmp			(a0)			* Refcon = refnum to echo toMIDIEchoHook	; called from Pascal			move.l		$4(a7),d0		; d0 = refcon = refnum of output			move.l		$8(a7),a0		; A0 = pointer to packet; echo it			move.w		#0,-(a7)			move.w		d0,-(a7)		; refnum of output			move.l		a0,-(a7)		; incoming packet			move.l		#$6C0004,d0		; writePacket			dc.w		$a800			move.w		(a7)+,d0		; error; cleanup and get out			move.l		(a7)+,a0		; save return address			adda.l		#$8,a7			; increment past parameters			move.w		#midiNoMorePacket,(a7)	; return value			jmp			(a0)				
* Arithmetic Support*********************************************************************** HMSL Forth System                                                 ** Author: Phil Burk                                                 ** Copyright 1989 Phil Burk , All Rights Reserved                    *********************************************************************** DEfine /MOD   DU2/ +- U* U/ D2* DU2* M*MATH_CODE	PROC	EXPORT		EXPORT	(P_SLASHMOD_00 , P_USLASH_00) : CODE		EXPORT	(P_TIMES_00, P_UTIMES_00 , P_MTIMES_00 ) : CODE		EXPORT	(P_SLASHMOD_20 , P_USLASH_20, P_MSLASH_20) : CODE		EXPORT	(P_TIMES_20, P_UTIMES_20 , P_MTIMES_20) : CODE		EXPORT	(DTWOTIMES , DUTWOTIMES , DUTWOSLASH, PLUSMINUS) : CODE	MACHINE MC68020P_SLASHMOD_20	; ( num den -- u-rem u-quotient )		move.l	(a6)+,d0		clr.l	d1		move.l	(a6)+,d2		divs.l	d0,d1:d2		move.l	d1,-(a6)		move.l	d2,-(a6)		rts		P_MSLASH_20	; ( du u -- u-rem u-quotient )		move.l	(a6)+,d2		move.l	(a6)+,d0		move.l	(a6)+,d1		divs.l	d2,d0:d1		move.l	d0,-(a6)		move.l	d1,-(a6)		rts		P_USLASH_20	; ( du u -- u-rem u-quotient )		move.l	(a6)+,d2		move.l	(a6)+,d0		move.l	(a6)+,d1		divu.l	d2,d0:d1		move.l	d0,-(a6)		move.l	d1,-(a6)		rts		P_UTIMES_20	; ( n1 n2 -- d , unsigned for 68020 ) 		move.l	(a6)+,d1		mulu.l  (a6)+,d0:d1		move.l	d1,-(a6)		move.l	d0,-(a6)		rts				P_MTIMES_20	; ( n1 n2 -- d , for 68020 ) 		move.l	(a6)+,d1		muls.l  (a6)+,d0:d1		move.l	d1,-(a6)		move.l	d0,-(a6)		rts		P_TIMES_20	; ( n1 n2 -- n1*n2 , single for 68020 ) 		move.l	(a6)+,d0		muls.l  (a6)+,d0		move.l	d0,-(a6)		rts				MACHINE	MC68000		P_SLASHMOD_00  ; /MOD ( num den -- rem quotient )		MOVEM.L		D3-D4,-(A7)		move.l  (a6)+,d4		move.l  (a6)+,d3		moveq.l #$0,d7		tst.l   d4		bne.s   @1		clr.l   -(a6)		clr.l   -(a6)		MOVEM.L		(A7)+,D3-D4		rts@1		cmp.l   #$7FFF,d4		bhi.s   @2		divs    d4,d3		bvs.s   @2		move.l  d3,d4		swap    d4		ext.l   d4		ext.l   d3		move.l  d4,-(a6)		move.l  d3,-(a6)		MOVEM.L		(A7)+,D3-D4		rts@2		tst.l   d4		bpl.s   @3		st     d7		neg.l   d4@3		swap    d7		tst.l   d3		bpl.s   @4		st     d7		neg.l   d3@4		cmp.l   #$FFFF,d4		bhi.s   @5		move.w  d3,-(a6)		clr.w   d3		swap    d3		divu    d4,d3		move.w  d3,d0 		move.w  (a6)+,d3  		divu    d4,d3         		swap    d3             		moveq.l #$0,d4    		move.w  d3,d4      		move.w  d0,d3      		swap    d3             		bra.s   @7              @5		cmp.l   d3,d4  		bne.s   @6            		moveq.l #$1,d3     		moveq.l #$0,d4     		bra.s   @7              @6		bls.s   @8        		move.l  d3,d4        		moveq.l #$0,d3     		bra.s   @7              @8		move.l  d4,d0  		clr.w   d0              		swap    d0             		addq.l  #$1,d0       		move.l  d3,d1        		move.l  d4,d2        		move.l  d0,d4        		move.w  d0,-(a6)  		move.w  d3,-(a6)  		clr.w   d3              		swap    d3             		divu    d4,d3         		move.w  d3,d0      		move.w  (a6)+,d3  		divu    d4,d3         		swap    d3              		moveq.l #$0,d4    		move.w  d3,d4      		move.w  d0,d3      		swap    d3             		move.w  (a6)+,d0  		move.l  d2,d4        		divu    d0,d4         		divu    d4,d3         		and.l   #$FFFF,d3  @10		move.l  d2,d4  		move.l  d2,d0   		swap    d0        		mulu    d3,d4   		mulu    d3,d0   		swap    d0       		add.l   d0,d4     		sub.l   d1,d4      		bls.s   @9          		subq.l  #$1,d3 		bra.s   @10      @9		neg.l   d4    		cmp.l   d4,d2    		bhi.s   @7         		addq.l  #$1,d3  		bra.s   @10      @7		tst.l   d7      		beq.s   @11       		btst    #$0,d7    		bne.s   @12       		neg.l   d3         		bra.s   @11       @12		btst    #$10,d7   		bne.s   @13               		neg.l   d3                 @13		neg.l   d4          @11		move.l  d4,-(a6)		move.l  d3,-(a6)		MOVEM.L		(A7)+,D3-D4		rtsDUTWOSLASH   ; ( d -- d/2 )		move.l	(a6)+,d0		move.l	(a6)+,d1		lsr.l	#1,d0		roxr.l	#1,d1		move.l	d1,-(a6)		move.l	d0,-(a6)		rtsPLUSMINUS   ; ( a b -- +-a  , set a to sign of b )		move.l	(a6)+,d0		tst.l	d0		bpl		@1		neg.l	(a6)@1		rts		P_USLASH_00	; ( du u -- u-rem u-quotient )		MOVEM.L		D2-D3/D7,-(A7)		move.l	(a6)+,d7       ; u , 32 bit		move.l  (a6)+,d0       ; du , high 32 bits		move.l  (a6)+,d1       ; du , low 32 bits		tst.l   d0		bne.s   @1		move.l  d7,d3		and.l   #$FFFF8000,d3		bne.s   @1		move.l  d1,d3		and.l   #$FFFF8000,d3		bne.s   @1		divu    d7,d1		move.l  d1,d7		swap    d7		ext.l   d7		ext.l   d1		move.l  d7,-(a6)       ; u-rem		move.l  d1,-(a6)       ; u-quotient		MOVEM.L		(A7)+,D2-D3/D7		rts@1		exg     d7,d1		moveq.l #$1F,d2@4		lsl.l   #$1,d7		roxl.l  #$1,d0		bcs.s   @2		cmp.l   d1,d0		bcs.s   @3@2		addq.l  #$1,d7		sub.l   d1,d0@3		dbf.w   d2,@4		move.l  d0,-(a6)		move.l	d7,-(a6)		MOVEM.L		(A7)+,D2-D3/D7		rtsP_UTIMES_00	; ( n1 n2 -- n1*n2 , unsigned )		MOVEM.L		D3/D7,-(A7)		move.l	(a6)+,d7		move.l  (a6)+,d1		move.l  d7,d3		or.l    d1,d3		and.l   #$FFFF0000,d3		bne.s   @1		mulu.w    d7,d1		move.l  d1,-(a6)		clr.l   -(a6)		MOVEM.L		(A7)+,D3/D7		rts@1		MOVEM.L		D4-D6,-(A7)		move.l  d7,d3		move.l  d7,d4		move.l  d1,d5		swap    d4		swap    d5		mulu.w  d1,d7		mulu.w  d4,d1		mulu.w  d5,d3		mulu.w  d5,d4		swap    d7		add.w   d1,d7		clr.l   d5		addx.l  d5,d4		add.w   d3,d7		addx.l  d5,d4		swap    d7		clr.w   d1		clr.w   d3		swap    d1		swap    d3		add.l   d3,d1		add.l   d4,d1		move.l  d7,-(a6)		move.l  d1,-(a6)		MOVEM.L		(A7)+,D4-D6		MOVEM.L		(A7)+,D3/D7		rts		P_TIMES_00    ; ( n1 n2 -- n1*n2 , single for 68000 )		MOVE.L     (A6)+,D0	;xhl		MOVE.L     (A6)+,D1	;yhl		MOVE.L     D1,D2		MOVE.L     D0,D3		SWAP.W     D3		MULU       D0,D2		; D2 = xl*yl		MULU       D1,D3		; D3 = yl*xh		SWAP.W     D1					MULU       D1,D0		; d0 = yh*xl		ADD.L      D3,D0		SWAP.W     D0		CLR.W      D0		ADD.L      D2,D0		MOVE.L     D0,-(A6)		RTSP_MTIMES_00    ; ( n1 n2 -- d , for 68000 ) 		MOVEM.L		D3/D7,-(A7)		move.l	(a6)+,d7		; d7 = n2		move.l  (a6)+,d1		; d1 = n1		move.l  d7,d0		eor.l   d1,d0		move.l  d7,d3		or.l    d1,d3		and.l   #$FFFF0000,d3		bne.s   @1		mulu.w    d7,d1		move.l  d1,-(a6)		clr.l   -(a6)		MOVEM.L		(A7)+,D3/D7		rts@1		tst.l   d7		bpl.s   @2		neg.l   d7@2		tst.l   d1		bpl.s   @3		neg.l   d1@3		MOVEM.L		D4-D6,-(A7)		move.l  d7,d3		move.l  d7,d4		move.l  d1,d5		swap    d4		swap    d5		mulu.w    d1,d7		mulu.w    d4,d1		mulu.w    d5,d3		mulu.w    d5,d4		swap    d7		add.w   d1,d7		clr.l   d5		addx.l  d5,d4		add.w   d3,d7		addx.l  d5,d4		swap    d7		clr.w   d1		clr.w   d3		swap    d1		swap    d3		add.l   d3,d1		add.l   d4,d1		move.l  d7,-(a6)		move.l  d1,d7		tst.l   d0		bpl.s   @4		neg.l   (a6)		negx.l  d7@4		MOVEM.L		(A7)+,D4-D6		move.l	d7,-(a6)		MOVEM.L		(A7)+,D3/D7		rts		DTWOTIMES   ;  ( d -- d*2 )		move.l	(a6)+,d1		move.l  (a6),d0		asl.l   #$1,d0		roxl.l  #$1,d1		bcc.s   @1		bset    #$F,d1@1		move.l  d0,(a6)		move.l	d1,-(a6)		rts				DUTWOTIMES  ; ( du -- du*2 )		move.l	(a6)+,d1		move.l  (a6),d0		asl.l   #$1,d0		roxl.l  #$1,d1		move.l  d0,(a6)		move.l	d1,-(a6)		rts		ENDP
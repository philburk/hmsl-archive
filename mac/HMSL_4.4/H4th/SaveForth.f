\ Save the Forth Dictionary and Name fields in a file for later execution.\ A custom loader will read them from the data fork, load them and\ jump into them.\\ File Structure of Saved Forth, similar to IFF file\	Cell	Contents\	0		'FORM'		identifies IFF FORM\	1		size		size in bytes of image FORM\	2		'FRTH'		identifies Forth image\	followed by various chunks like:\\ Statistics:\	0		'STAT'\	1		size		size in file of dictionary chunk\	2		CODESIZE	size of memory to allocate for dictionary\	3		RDP			address of dictionary pointer, relative to base of dict\	4		HDRSSIZE	size of memory to allocate for headers\	5		RLATEST		address of latest, relative to base of headers\ Dictionary:\ structure\	0		'DICT'		identifies DICT chunk\	1		size		size in file of dictionary chunk\	4		code		dictionary code\ action\	Allocate memsize memory, set CodeBase, and CodeSize.\	Read dict into memory.\	Set DP\\ Headers:\ structure\	0		'HDRS'		identifies HDRS or Headers chunk\	1		size\	4		headers		header image\ action\	Allocate Memory, set NameBase, and HeaderSize.\	Read Headers into memory.\	Set LATEST\\ After All is loaded, JMP to CodeBase\ Procedure for writing.\	Get ApRefNum or open new file.\	Write 'FORM',0,'FRTH'\\   Write 'DICT',0anew TASK-SAVEFORTHvariable SF-FILEIDvariable SF-PADvariable DISABLE-SAVEvariable SAVE-HEADERSsave-headers ONhex900 constant CurApRefNum910 constant CurApNamedecimal\ Overwritten later in system.f20000 code-size !16000 headers-size !: SF.WRITE  ( addr #bytes -- #bytes)	even-up sf-fileid @ -rot fwrite;: SF.WRITE?  ( addr #bytes -- )	dup >r sf.write r> -	IF  ." Save-Forth write failed!" abort	THEN;: SF.WRITE.NUM ( N -- , write number )	sf-pad !	sf-pad 4 sf.write?;	: SF.SEEK  ( pos -- )	sf-fileid @ swap offset_beginning fseek 0<	IF ." Error in SF.SEEK" abort	THEN;: SF.WHERE ( -- pos )	sf-fileid @ 0 offset_current fseek;: SF.WRITE.FORM ( -- )	" FORM" count sf.write?	0 sf.write.num  ( patch this later )	" FRTH" count sf.write?;: START.CHUNK  ( $chkid -- pos-chunk-size )	count sf.write?	sf.where	0 sf.write.num			( write chunk size, update later );: END.CHUNK  ( pos-chunk-size -- , must be at end of file, leave at end )	sf.where ( -- pos-start pos-end )	2dup swap - cell- ( pos-start pos-end size )	rot sf.seek sf.write.num	sf.seek;\	0		'STAT'\	1		size		size in file of dictionary chunk\	2		CODESIZE	size of memory to allocate for dictionary\	3		RDP			address of dictionary pointer, relative to base of dict\	4		HDRSSIZE	size of memory to allocate for headers ( 0 if turnkeyed )\	5		RLATEST		address of latest, relative to base of headers: SF.WRITE.DICT.STATS  ( -- , write dictionary stats )	here codebase -  ( calc RDP )	Code-Size @ over 512 + max sf.write.num  ( clip and write CODESIZE )	sf.write.num		( write RDP );: SF.WRITE.HDR.STATS  ( -- , write dictionary stats )	latest NameBase -  ( RLATEST )	Headers-Size @ over 64 + max sf.write.num  ( clip and write HEADER-SIZE )	sf.write.num		( write RLATEST );: SF.WRITE.STATS ( -- , write statistics to save file )	align	" STAT" start.chunk ( -- pos-chunk-start )	sf.write.dict.stats\ Write 0 for header size if turnkeyed.	save-headers @	IF	sf.write.hdr.stats	ELSE 0 sf.write.num		0 sf.write.num	THEN	end.chunk;: SF.WRITE.DICT ( -- , write dictionary to save file )	align	" DICT" start.chunk	CodeBase	here codebase - 512 +	sf.write?   ( write dictionary + 512 bytes)	end.chunk;: SF.WRITE.HEADERS ( -- , write headers to save file )	" HDRS" start.chunk	NameBase	latest NameBase -	64 +	sf.write?   ( write headers + 64 bytes)	end.chunk;: SF.OPEN  ( -- , write to self if no name )	CurApName $fopen dup	IF sf-fileid !	ELSE ." Could not open file!" abort	THEN;: SF.CLOSE ( -- , close file if I opened it )	sf-fileid @	IF	sf-fileid @ ftruncate . ." bytes" cr		sf-fileid @ fclose  sf-fileid off	THEN;: SAVE-FORTH ( -- , write to file started from )	disable-save @ abort" SAVE-FORTH disabled!"	sf.open	freeze	sf.write.form	sf.write.stats	sf.write.dict	save-headers @	IF  sf.write.headers	THEN	sf.close	save-headers on;variable IF-TURNKEY  \ set to true if you want to compile a slim version
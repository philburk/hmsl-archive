* File I/O Support for H4th* Macintosh Dependent Code** This code has been placed in its own segment because the loader needs* it to load the H4th dictionary.*********************************************************************** HMSL Forth System                                                 ** Author: Phil Burk                                                 ** Copyright 1989 Phil Burk , All Rights Reserved                    ************************************************************************ 00001 PLB 7/6/92 Use _HSetVol instead for CDeofErr			EQU			(-39)* fsFromStart		EQU			(1)* fsFromLEOF		EQU			(2)* fsFromMark		EQU			(3)				SEG			'fileio'FileIO			PROC				WITH		GlobalData,H4thData								EXPORT		SEG_STR_FOPEN, SEG_STR_FCREATE, SEG_STR_FOPEN_VR, SEG_STR_FCREATE_VR				EXPORT		SEG_STR_FSETVOL_VR, SEG_STR_FDELETE_VR				EXPORT		SEG_CLOSEFILE, SEG_FCLOSE, SEG_FFLUSH, SEG_FLUSHVOL				EXPORT		SEG_FWRITE, SEG_FREAD, SEG_FSEEK, SEG_FREWIND, SEG_FEXPECT				EXPORT		SEG_SFGETFILEP, SEG_FTRUNCATE* Open Standard Get File dialog* Force to 'TEXT' type filesTEXTTYPE		DC.L		$54455854			'TEXT'SEG_SFGETFILEP	; ( $prompt -- $filename vrefnum true | false )				MOVE.W		#$40,-(A7)			where				MOVE.W		#$30,-(A7)				MOVE.L		(A6)+,-(A7)			$prompt				CLR.L		-(A7)				filefilter				MOVE.W		#1,-(A7)			numtypes				PEA			FV_FILETYPE			typelist				CLR.L		-(A7)			dlgHook				PEA			mySFReply				_SFGetFile				MOVE.L		#$54455854,FV_FILETYPE	reset to 'TEXT'				MOVE.W		mySFReply.sfGood,D0				BEQ			@cancel				LEA			mySFReply.sfName,A0				PUSH		A0				MOVE.W		mySFReply.sfvRefNum,D0				EXT.L		D0		; refnums are negative				PUSH		D0				MOVE.L		#-1,-(A6)				RTS@cancel			CLR.L		-(A6)				RTS				SEG_STR_FOPEN_VR	; ( $filename vrefnum -- fileid | 0)				POP			D0				MOVE.W		D0,myFile.ioVRefNum				MOVE.W		D0,-(A7)			; save for later				POP			myFile.ioNamePtr				MOVE.L		#0,myFile.ioCompletion				MOVE.B		#0,myFile.ioVersNum				MOVE.B		fsRdWrPerm,myFile.ioPermssn				MOVE.L		#0,myFile.ioMisc				LEA			myFile,A0				_Open				MOVE.W		myFile.ioResult,D0				MOVE.W		(A7)+,D1			; get volref				EXT.L		D0				MOVE.L		D0,FV_FERROR				BNE.S		@badio*				SWAP		D1			; put vrefnum in high word				MOVE.W		myFile.ioRefNum,D1	; pack with frefnum				EXT.L		D1		; DON'T PACK WITH VREFNUM				PUSH		D1				BRA			@done@badio			MOVE.L		#0,-(A6)@done			RTS* STR_FOPEN ( $filename -- fileptr | 0)SEG_STR_FOPEN				PUSH		#0				BSR			SEG_STR_FOPEN_VR				RTS* STR_FCREATE ( $filename vrefnum -- result )SEG_STR_FCREATE_VR				POP			D0				MOVE.W		D0,myFile.ioVRefNum				POP			myFile.ioNamePtr				MOVE.L		#0,myFile.ioCompletion				MOVE.B		#0,myFile.ioVersNum				LEA			myFile,A0				_Create				MOVE.W		myFile.ioResult,D0				EXT.L		D0				BNE			@done				MOVE.W		#0,myFile.ioFDirIndex		get existing INFO				LEA			myFile,A0				_GetFileInfo				MOVE.W		myFile.ioResult,D0				EXT.L		D0				BNE			@done				MOVE.L		FV_FILETYPE,myFile.ioFlFndrInfo.fdType				MOVE.L		FV_FILECREATOR,myFile.ioFlFndrInfo.fdCreator				LEA			myFile,A0				_SetFileInfo				MOVE.W		myFile.ioResult,D0				EXT.L		D0@done			MOVE.L		D0,FV_FERROR				PUSH		D0* Reset File TYPE and CREATOR				MOVE.L			#$54455854,FV_FILETYPE	'TEXT'				MOVE.L			#$484D534C,FV_FILECREATOR	'HMSL'				RTS				* STR_FCREATE ( $filename -- result)SEG_STR_FCREATE				PUSH		#0				BSR			SEG_STR_FCREATE_VR				RTSSEG_CLOSEFILE		; ( fRefNum -- )				MOVE.L		#0,myFile.ioCompletion				POP			D0				MOVE.W		D0,myFile.ioRefNum				LEA			myFile,A0				_Close				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				RTS				SEG_FFLUSH		; ( fRefNum -- )				MOVE.L		#0,myFile.ioCompletion				POP			D0				MOVE.W		D0,myFile.ioRefNum				LEA			myFile,A0				_FlushFile				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				RTSSEG_FLUSHVOL		; ( vRefNum -- )				MOVE.L		#0,myFile.ioCompletion				MOVE.L		#0,myFile.ioNamePtr				POP			D0				MOVE.W		D0,myFile.ioVRefNum				LEA			myFile,A0				_FlushVol				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				RTS				SEG_FCLOSE_EXPT		; ( fileid -- , close and flush file and volume ) ; EXPERIMENTAL* The volrefnum is packed into the high order word of the fileid* The hard disk crashed when this was used so maybe it doesn't work!!				MOVE.L		(A6),-(A6)			dup				BSR			SEG_FFLUSH				MOVE.L		FV_FERROR,D0				BNE			@errdone				MOVE.L		(A6),-(A6)			dup				BSR			SEG_CLOSEFILE				MOVE.L		FV_FERROR,D0				BNE			@errdone				POP			D0				SWAP		D0				PUSH		D0				BSR			SEG_FLUSHVOL				RTS@errdone		POP			D0				RTSSEG_FCLOSE		; ( fileid -- , flush file and close )				MOVE.L		(A6),-(A6)			dup				BSR			SEG_FFLUSH				MOVE.L		FV_FERROR,D0				BNE			@errdone				BSR			SEG_CLOSEFILE				RTS@errdone		POP			D0   ; ELSE drop				RTS				SEG_FREAD   ; ( RefNum addr count -- numread )				POP			myFile.ioReqCount				POP			myFile.ioBuffer				POP			D0				MOVE.W		D0,myFile.ioRefNum				MOVE.L		#0,myFile.ioCompletion				MOVE.W		#fsAtMark,myFile.ioPosMode				MOVE.L		#0,myFile.ioPosOffset				LEA			myFile,A0				_Read				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				BNE.S		@badio@justeof		MOVE.L		myFile.ioActCount,-(A6)				BRA			@done@badio			CMP.W		#eofErr,D0		don't panic if just EOF				BEQ.S		@justeof				MOVE.L		#-1,-(A6)@done			RTS				SEG_FWRITE   ; ( RefNum addr count -- numread )				POP			myFile.ioReqCount				POP			myFile.ioBuffer				POP			D0				MOVE.W		D0,myFile.ioRefNum				MOVE.L		#0,myFile.ioCompletion				MOVE.W		#fsAtMark,myFile.ioPosMode				MOVE.L		#0,myFile.ioPosOffset				LEA			myFile,A0				_Write				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				BNE.S		@badio@justeof		MOVE.L		myFile.ioActCount,-(A6)				BRA			@done@badio			MOVE.L		#-1,-(A6)@done			RTS				SEG_FSEEK   ; ( RefNum offset mode -- oldpos | -1 )				MOVE.L		#0,myFile.ioCompletion				MOVE.L		$8(A6),D0				MOVE.W		D0,myFile.ioRefNum				LEA			myFile,A0				_GetFPos				MOVE.L		myFile.ioPosOffset,-(A7)   save old position				POP			D0				MOVE.W		D0,myFile.ioPosMode				POP			myFile.ioPosOffset				POP			D0				MOVE.W		D0,myFile.ioRefNum				MOVE.L		#0,myFile.ioCompletion				LEA			myFile,A0				_SetFPos				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				BNE.S		@badio@justeof		MOVE.L		(A7)+,-(A6)			push old pos				BRA			@done@badio			ADD.L		#4,A7				drop old position				MOVE.L		#-1,-(A6)@done			RTS				SEG_FTRUNCATE   ; ( RefNum  -- size | -1 , set EOF at current position )				MOVE.L		#0,myFile.ioCompletion				MOVE.L		(A6),D0				MOVE.W		D0,myFile.ioRefNum				LEA			myFile,A0				_GetFPos				MOVE.L		myFile.ioPosOffset,D1   save old position				MOVE.L		D1,myFile.ioMisc			set EOF to current pos				MOVE.L		D1,-(A7)				POP			D0				MOVE.W		D0,myFile.ioRefNum				MOVE.L		#0,myFile.ioCompletion				LEA			myFile,A0				_SetEOF				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				BNE.S		@badio@justeof		MOVE.L		(A7)+,-(A6)			push old pos				BRA			@done@badio			ADD.L		#4,A7				drop old position				MOVE.L		#-1,-(A6)@done			RTSSEG_FREWIND   ; (RefNum -- oldpos | -1 )				PUSH		#0				PUSH		#fsFromStart				BSR			SEG_FSEEK				RTS								SEG_FEXPECT	; ( addr max -- )				MOVE.L			FV_FSOURCE,-(A6)				MOVE.L			$8(A6),-(A6)				MOVE.L			$8(A6),-(A6)	; ( -- addr max source addr max )*				BSR				SEG_FREAD				CLR.L			FV_AT_EOF	set end of file flag				POP				D1				num read				POP				D0				max				POP				A0				addr				MOVE.L			D1,D0			update max				MOVE.L			D0,FV_FSPAN				CMP.L			#0,D1				BEQ				@at_end				SUBQ.L			#1,D0			set for DBRA@loop			; MOVE.B			(A0),D1			get char				CMP.B			#EOL_CHAR,(A0)+				DBEQ			D0,@loop				BNE				@done				ADDQ.L			#1,D0				SUB.L			D0,FV_FSPAN			num characters not needed				PUSH			FV_FSOURCE				NEG.L			D0				ADDQ.L			#1,D0				PUSH			D0				PUSH			#fsFromMark			relative to current				BSR				SEG_FSEEK				ADDA.L			#4,A6@done			RTS@at_end			MOVE.L			#(-1),FV_AT_EOF	set end of file flag				RTS* STR_FSETVOL_VR ( $volname vrefnum -- result )SEG_STR_FSETVOL_VR				POP			D0				MOVE.W		D0,myFile.ioVRefNum				POP			myFile.ioNamePtr				MOVE.L		#0,myFile.ioCompletion				MOVE.L		#0,myFile.ioWDDirID	; 00001				LEA			myFile,A0				_HSetVol						; 00001				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				PUSH		D0				RTS* STR_FDELETE_VR ( $filename vrefnum -- result )SEG_STR_FDELETE_VR				POP			D0				MOVE.W		D0,myFile.ioVRefNum				POP			myFile.ioNamePtr				MOVE.B		#0,myFile.ioFVersNum				MOVE.L		#0,myFile.ioCompletion				LEA			myFile,A0				_Delete				MOVE.W		myFile.ioResult,D0				EXT.L		D0				MOVE.L		D0,FV_FERROR				PUSH		D0				RTS								ENDP				SEG
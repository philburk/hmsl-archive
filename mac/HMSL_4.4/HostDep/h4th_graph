\ Graphics Host Dependant Module\ This module provides simple graphics functions.\\ Author: Phil Burk\ Copyright 1986 Phil Burk, Larry Polansky, David Rosenboom\ All Rights Reserved\\ MOD: PLB 12/3/86 ADD GR_SMALL_TEXT\ MOD: PLB 12/14/86 Graphics and events in separate HMSL window.\ MOD: PLB 4/15/87 Force font to system font.\ MOD: PLB 6/25/87 GR.INIT to use single task.\ MOD: PLB 7/8/87 Add SYS.INIT\ MOD: PLB 8/3/89 Convert to H4th\ 920708 PLB Allow variable size HMSL window default.\ 930107 PLB Added ?CLOSEBOXANEW TASK-H4th_GRAPHdecimal: GR.OPENWINDOW ( new_window -- window , open a new window )    openwindow() dup	IF	dup hmsl-tracker link.window<->tracker	THEN;: GR.CLOSEWINDOW ( window -- , close the window )    disposewindow();U: GR-CURWINDOW  ( holds pointer to current window or 0 ): GR.SETPORT ( -- , Set window port. )    gr-curwindow @ SetPort();    \ GRAPHICS OUTPUT PRIMITIVES -------------------------: GR.DRAW ( X Y -- DRAW IN CURRENT COLOR )     gr.setport     LineTo();: GR.MOVE ( X Y -- , Move to new position. )     gr.setport     MoveTo();: GR.TEXT ( string -- , Draw string at current position. )     gr.setport     0 Textmode() ( prevent overlapping text )     Drawstring();: GR.TYPE ( addr count -- , Draw string at current position. )     gr.setport     0 Textmode() ( prevent overlapping text )     0 swap DrawText();: GR.TEXTLEN  ( addr count -- xpixels , x size of string )     gr.setport     0 Textmode() ( prevent overlapping text )     0 swap TextWidth();: GR.XYTEXT  ( X Y S1 -- , Draw string at x,y )   -rot GR.MOVE   ( Move to start, use graphics characters )   GR.TEXT;: GR.NUMBER  ( value -- , Display number as text at CP )     n>text text>string gr.text;\ Allocate space for RECT records.VARIABLE GR-RECT 4 vallot: GR.RECT ( X1 Y1 X2 Y2 -- , Fill region with current FACI )\ Add 1 to x2 y2 to get corner !?!    1+ gr-rect 4+ w!    1+ gr-rect 6 + w!    gr-rect w!    gr-rect 2 + w!    gr.setport    gr-rect PaintRect();\ GRAPHICS ATTRIBUTES -----------------------------------V: GR-COLOR ( Foreground Color for primitives. )create MAC-COLORS 30 , 33 , 205 , 341 , 409 , 273 , 137 , 69 ,: GR.COLOR!   ( Color=0|1 -- , set color )    dup gr-color !     7 min 4* mac-colors + @  ( look up in color table )    gr.setport    Forecolor();: GR.COLOR@ ( -- COLOR , Query COLOR )    gr-color @;V: GR-BCOLOR ( Background Color for primitives. ): GR.BCOLOR!   ( BColor=0|1 -- )    dup gr-bcolor !    7 min 4* mac-colors + @  ( look up in color table )    gr.setport    Backcolor();: GR.BCOLOR@ ( -- BCOLOR , Query BCOLOR )    gr-bcolor @;variable GR-MODE: GR.MODE!  ( mode -- , Set polyline mode )    dup gr-mode !    gr.setport PenMode();: GR.MODE@ ( -- MODE , Query MODE )    gr-mode @;variable GR-FONT: GR.FONT!  ( font -- )	dup gr-font !    gr.setport textfont();: GR.FONT@  ( -- font )    gr-font @;8 CONSTANT GR_INSERT_MODE10 CONSTANT GR_XOR_MODEV: GR-HEIGHT9  constant GR_SMALL_TEXT12 constant GR_BIG_TEXT: GR.HEIGHT! ( height -- , Set character height in pixels. )    dup gr-height !    gr.setport TextSize();: GR.HEIGHT@ ( -- height , Query height )    gr-height @;: GR.SET.CURWINDOW ( window -- , Set current window, rastport, and attributes. )    gr-curwindow !  gr.setport    1 gr-color ! ( Default color. )    gr_small_text gr-height !  ( Set default text character height )    gr_insert_mode gr-mode !;: GR.CLOSECURW ( -- , Close current window )    gr-curwindow @ ?dup    IF gr.closewindow    THEN    0 gr-curwindow !;: GR.HIGHLIGHT ( X1 Y1 X2 Y2 -- , HIGHLIGHT region )    1+ gr-rect 4+ w!    1+ gr-rect 6 + w!    gr-rect w!    gr-rect 2 + w!    gr.setport    gr-rect Invertrect();: GR.DEHIGHLIGHT ( X1 Y1 X2 Y2 -- , HIGHLIGHT region )    gr.highlight;\ GRAPHICS CONTROL -------------------------------------: GR.CLEAR ( -- , Clear screen )      gr.color@ 0 gr.color!      0 0 gr_xmax gr_ymax gr.rect      gr.color!;\ Create in dictionary for 0 at startup.CREATE GR%-IF-INIT 0 ,   : GR.INIT  ( -- , Initialize graphics system. )    gr%-if-init @ NOT     IF         0 gr-curwindow !        true gr%-if-init !    THEN;: GR.TERM ( -- , Terminate Graphics )    gr%-if-init @    IF gr.closecurw\       FALSE gr%-if-init !  ( never init twice )    THEN;: GR.CHECK ( -- , aborts if graphics system not initialized )   gr-curwindow @ 0= abort" GR.CHECK - No open window!!";    \ GRAPHICS INPUT -------------------------------------------EXISTS? ev.get.event .IFV: GR%-PENSTATEV: GR%-MOUSE_XPOSV: GR%-MOUSE_YPOS: GR.GETXY ( -- x y )      ev.getxy;: ?CLOSEBOX ( -- flag , was the closebox hit )	ev.get.event EV_CLOSE_WINDOW =;\ These next two routines are obsolete, but may be used for testing.: GR.XYLOC? ( -- x y flag , return mouse button state )      ?terminal IF ABORT THEN  ( %? )      ev.get.event      CASE        EV_NULL OF ENDOF        EV_MOUSE_DOWN OF true gr%-penstate !                  gr.getxy gr%-mouse_ypos ! gr%-mouse_xpos !            ENDOF        EV_MOUSE_UP OF false  gr%-penstate !                  gr.getxy gr%-mouse_ypos ! gr%-mouse_xpos !            ENDOF\        MOUSEMOVE OF gr.getxy gr%-mouse_ypos ! gr%-mouse_xpos ! \            ENDOF      endcase      gr%-mouse_xpos @      gr%-mouse_ypos @      gr%-penstate  @;: GWAIT.SWUP  ( -- , Wait until SW1 is up. )     BEGIN        gr.xyloc? nip nip not     UNTIL;.THEN\ HMSL specific support ------------------------------windowTemplate HMSL-NewWindow\ Set this to a string.defer  HMSL.TITLE  ( -- $string )'c null is hmsl.title\ Just open message window.: GR.OPENHMSL ( -- , Open HMSL window for tests. )    HMSL-NewWindow window.defaults	hmsl.title ?dup	IF HMSL-NewWindow ..! wt_title	THEN\\ use adjustable values 00001	gr_window_top hmsl-newwindow .. wt_rect ..! rect_top	gr_window_left hmsl-newwindow .. wt_rect ..! rect_left	gr_window_top gr_window_height + hmsl-newwindow .. wt_rect ..! rect_bottom	gr_window_left gr_window_width + hmsl-newwindow .. wt_rect ..! rect_right\	HMSL-NewWindow gr.openwindow dup hmsl-window ! ?dup	IF	gr.set.curwindow    	0 TextFont()  ( %H set to mac system font )	ELSE ." Could not open HMSL window!" cr abort	THEN;: GR.CLOSEHMSL  ( -- , close HMSL window )    gr.closecurw    hmsl-window off;: HMSL.SET.WINDOW  ( -- )    hmsl-window @ ?dup	IF gr.set.curwindow	ELSE ." HMSL.SET.WINDOW - not open!" abort	THEN;\ -----------------------------------------------------: SYS.INIT sys.init " gr.init" debug.type gr.init ;: SYS.TERM gr.term sys.term ;
\ Test MIDI event buffer.\\ Author: Phil Burk\ Copyright 1999 Phil Burkanew task-t_evbuf.fth: TEB.BURST { startTime numNotes dur pitch  | curTime -- nextTime }	startTime -> curTime	numNotes 0	DO		pitch 64 curTime midi.noteon.at		dur +-> curTime	LOOP	curTime;: KILL.CPU  ( N -- )	0 swap	0 DO i + LOOP	drop;: KILL.TIME ( wakeupTime -- quit? )	false	BEGIN		5000000 kill.cpu		." ."		?terminal IF drop true THEN		over doitnow?		over OR	UNTIL	nip;: TEB.BLAST { startTime period dur pitch  -- nextTime }		startTime period dur /  dur pitch teb.burst;: TEB.STEADY { period | curTime -- }		time@ -> curTime	BEGIN		curTime period 12 40 teb.blast		curTime period 16 45 teb.blast max		curTime period 20 47 teb.blast max -> curTime		curTime . cr		curTime kill.time	UNTIL;variable max-late: TEB.CHECK.TIME\	rtc.time@ eb-last-time-processed @ -  \ how late are we?	rtc.time@ vtime@ -  \ how late are we?	dup max-late @ >	IF max-late !	ELSE drop	THEN;defer old.eb.midi.write: HACKED.EB.MIDI.WRITE ( addr count -- )	teb.check.time	old.eb.midi.write;variable hack-eb-write: HACK.EB.ON  ( -- , turn on timing monitor )    hack-eb-write @ 0=	IF		what's eb.midi.write is old.eb.midi.write		'c hacked.eb.midi.write is eb.midi.write		hack-eb-write on	THEN;: HACK.EB.OFF ( -- )	hack-eb-write @	IF    	what's old.eb.midi.write is eb.midi.write		hack-eb-write off	THEN;if.forgotten hack.eb.off: T	200 rtc.rate!	rtc.rate@ 3 * time-advance !	10 midi.channel!	3 4 * 5 *  4 *   5 *   teb.steady;
\ Notes: to implement
\ - productions also have behavior to select functions
\ - players have behavior to select shapes
\
\ Collections are the primary morph for building hierarchies.
\ Collections can contain other morphs, like players,
\ structures, productions, or other collections.
\ There are two basic kinds of collections, sequential and
\ parallel. Sequential collections execute their component
\ morphs one after the other.  Parallel collections start
\ all their morphs at the same time.  Collections are done
\ when the last sub morph finishes.
\
\ Author: Phil Burk
\ Copyright 1986 -  Phil Burk, Larry Polansky, David Rosenboom.
\ All Rights Reserved
\

\ MOD: PLB 10/13/86 Changed to IV.LONG system
\ MOD: PLB 1/??/87 Changed EXECUTE: strategy.
\ MOD: PLB 1/27/87 Added repeat count. Removed auto add:
\      to coll-holder. 
\ MOD: PLB 2/27/87 Changed OB.COLL.LOOP to use late bound EXEC.ONCE:
\ MOD: PLB 3/2/87 Add REPEAT to PRINT:
\ MOD: PLB 5/23/87 Check REPEAT.COUNT at beginning for zero.
\      Add STOP:
\ MOD: PLB 5/28/87 Set REPCOUNT in PUT.REPEAT:
\      Add 0STUFF:
\ MOD: PLB 6/10/87 Add DEFAULT:
\ MOD: PLB 11/3/87 Add DELETE:
\ MOD: PLB 4/26/88 Add check for overflow in DONE:
\ MOD: PLB 4/26/88 Make DELETE: use late bound REMOVE:
\      so that actions work.
\ MODS to OLD STRUCTURE which was a collection with a behavior.
\ MOD: PLB 7/9/86 Created new class called OB.FRAME 
\      This is essentially a structure without the grid of
\      tendencies. These objects can have variable number
\      of collections without having to resize the grid.
\ MOD: PLB 7/29/86 Added ability to terminate a structure if
\      a bahavior returns an index < 0.
\ MOD: PLB 10/11/86 Use default behavior, set LASTCOLL to -1 for
\      proper sequencing that starts at 0
\ MOD: PLB 10/13/86 Change to IV.LONG system.
\ MOD: PLB 1/14/87 Converted to new DONE: method.
\      Base on EXECUTE and DONE: instead of TASK:
\ MOD: PLB 1/27/87 Changed FRAME to STRUCTURE, STRUCTURE to
\      TSTRUCTURE, Changed GET.LAST.COLLID: to GET.LAST.ID:
\ MOD: PLB 3/1/87 Made behaviors terminate, BEHAVE: updates iv-last-morph.
\ MOD: PLB 3/2/87 Support repeat count in struct.
\ MOD: PLB 3/7/87 Add error for EXTEND:
\ MOD: PLB 5/23/87 Added STOP check, check REPEAT count at beginning.
\ MOD: PLB 6/15/87 Add DEFAULT:
\ MOD: PLB 10/7/87 Use instance object for Tendency Grid.
\ ------------------------------------------------------
\
\ MOD: PLB 10/21/88 Radical Redesign of COLLECTION, move behavior
\ into it from OB.STRUCTURE.  Allowed switching between parallel and
\ sequential mode.
\ MOD: PLB 8/11/89 Fixed order for Parallel execution.
\      Set mode at INIT: instead of default.
\ MOD: PLB 8/31/89 Fixed STOP: self bug.
\ MOD: PLB 2/6/90 Add FINISH: method.
\ MOD: PLB 3/12/90 c/REPITITION/REPETITION/
\ MOD: Reorganize STOP code, use TERMINATE:
\ MOD: PLB 4/13/90 Added GET.NEXT.TIME: for ACTOBJ
\ MOD: PLB 6/11/90 Fixed STOP.DELAY
\ MOD: PLB 4/28/91 Add 0 IV=> IV-REPCOUNT to COL.STOP
\ 00001 PLB 12/4/91 Reorder START FUNCTION, before start delay
\         Add stack checks to start, stop, repeat function calls.
\ 00002 PLB 2/6/92 Remove stack checks and cuz of EXEC.STACK?
\          Add stack check to COL.EXEC.BEHAV

ANEW TASK-COLLECTION

METHOD GET.WEIGHT:       METHOD PUT.WEIGHT:
METHOD GET.REPEAT:       METHOD PUT.REPEAT:
METHOD GET.REPETITION:   METHOD CUSTOM.EXEC:

\ Allow delays for each part of play.
METHOD GET.START.DELAY:  METHOD PUT.START.DELAY:
METHOD GET.REPEAT.DELAY: METHOD PUT.REPEAT.DELAY:
METHOD GET.STOP.DELAY:    METHOD PUT.STOP.DELAY:

\ These functions will be passed the address of the object.
METHOD GET.START.FUNCTION:  METHOD PUT.START.FUNCTION:
METHOD GET.REPEAT.FUNCTION: METHOD PUT.REPEAT.FUNCTION:
METHOD GET.STOP.FUNCTION:   METHOD PUT.STOP.FUNCTION:

\ Control whether a collection is simply sequential, simply parallel
\ or uses a complex behavior.
METHOD ACT.SEQUENTIAL:         METHOD ACT.PARALLEL:
METHOD PUT.BEHAVIOR:     METHOD GET.BEHAVIOR:
METHOD SET.DONE:         METHOD FINISH:
METHOD GET.NEXT.TIME:

\ -----------------------------------------------------------
:CLASS OB.COLLECTION <SUPER OB.MORPH
    IV.LONG IV-WEIGHT     \ Statistical Weight.
    IV.LONG IV-REPEAT     \ How many times to play.
    IV.LONG IV-REPCOUNT   \ Countdown times played.
    IV.LONG IV-START-DELAY  ( initial delay for phasing )
    IV.LONG IV-REPEAT-DELAY ( delay between reps )
    IV.LONG IV-STOP-DELAY   ( delay after stop )
    IV.LONG IV-COL-START-CFA
    IV.LONG IV-COL-REPEAT-CFA
    IV.LONG IV-COL-STOP-CFA
    IV.LONG IV-COL-MODE
    IV.LONG IV-PENDING  ( used for counting unfinished )
    IV.LONG IV-TIME-NEXT    ( execution time for next group )
    IV.LONG IV-BEHAVE-CFA   ( CFA of behavior word )
    IV.SHORT IV-COL-DONE?   ( true if this rep is done )

0 constant PARALLEL_MODE
1 constant SEQUENTIAL_MODE
2 constant BEHAVIOR_MODE

:M INIT: ( -- )
    init: super
    parallel_mode iv=> iv-col-mode
;M

:M DEFAULT:    (  -- , Called by INIT:  )
    default: super
    1 iv=> iv-weight
    1 iv=> iv-repeat
    0 iv=> iv-col-start-cfa
    0 iv=> iv-col-repeat-cfa
    0 iv=> iv-col-stop-cfa
    0 iv=> iv-start-delay
    0 iv=> iv-repeat-delay
    0 iv=> iv-stop-delay
;M

:M  NEW:  ( maxelems -- , allocate room )
    1 new: super
;M

:M GET.NEXT.TIME:  ( -- time-next-execution )
    iv-time-next
;M

:M PUT.WEIGHT: ( weight -- , store probability weight )
    iv=> iv-weight
;M

:M GET.WEIGHT:  ( weight, fetch probability weight )
    iv-weight 
;M

:M SET.DONE: ( -- , set done flag to terminate job. )
    true iv=> iv-col-done?
;M

:M PUT.START.FUNCTION: ( cfa -- , function to exec at start )
    iv=> iv-col-start-cfa
;M
:M GET.START.FUNCTION: ( -- cfa , function to exec at start )
    iv-col-start-cfa
;M
:M PUT.REPEAT.FUNCTION: ( cfa -- , function to exec at repeat )
    iv=> iv-col-repeat-cfa
;M
:M GET.REPEAT.FUNCTION: ( -- cfa , function to exec at repeat )
    iv-col-repeat-cfa
;M
:M PUT.STOP.FUNCTION: ( cfa -- , function to exec at stop )
    iv=> iv-col-stop-cfa
;M
:M GET.STOP.FUNCTION: ( -- cfa , function to exec at stop )
    iv-col-stop-cfa
;M

:M PUT.START.DELAY: ( delay -- , store delay )
    iv=> iv-start-delay
;M

:M GET.START.DELAY:  ( -- delay , fetch delay )
    iv-start-delay 
;M

:M PUT.REPEAT.DELAY: ( delay -- , store delay )
    iv=> iv-repeat-delay
;M

:M GET.REPEAT.DELAY:  ( -- delay , fetch delay )
    iv-repeat-delay 
;M

:M PUT.STOP.DELAY: ( delay -- , store delay )
    iv=> iv-stop-delay
;M

:M GET.STOP.DELAY:  ( -- delay , fetch delay )
    iv-stop-delay 
;M

:M PUT.REPEAT:  ( count -- , set repeat count)
    dup iv=> iv-repeat
    iv-repcount min iv=> iv-repcount
;M

:M GET.REPEAT:  ( -- count , fetch repeat count)
    iv-repeat
;M

:M GET.REPETITION:  ( -- count , fetch which repetition )
    iv-repeat iv-repcount -
;M

:M FINISH: ( -- , finish this repetition then stop )
    iv-repcount 1 min iv=> iv-repcount
;M

:M ACT.SEQUENTIAL: ( -- , behave sequentially )
    sequential_mode iv=> iv-col-mode
;M

:M ACT.PARALLEL: ( -- , behave in parallel )
    parallel_mode iv=> iv-col-mode
;M

:M PUT.BEHAVIOR:  ( cfa-behavior  -- , set behavior to be used)
    dup iv=> iv-behave-cfa
    IF behavior_mode
    ELSE parallel_mode
    THEN iv=> iv-col-mode
;M

:M GET.BEHAVIOR:  ( -- cfa-behavior  , fetch behavior's cfa )
     iv-behave-cfa
;M

:M PRINT.ELEMENT:  ( e# -- , print the element )
    get: self  ( get morph)
    dup get.weight: [] 4 .r 4 spaces   ( show weights )
    name: []
;M

:M PRINT: ( -- , print it )
     print: super
     ." Weight  = " iv-weight . cr
     ." Repeat  = " iv-repeat . cr ?pause
\
     ." Delays:" cr
     ."  Start  = " iv-start-delay . cr
     ."  Repeat = " iv-repeat-delay . cr
     ."  Stop   = " iv-stop-delay . cr ?pause
\
     ." Functions:" cr
     ."  Start  = " iv-col-start-cfa cfa. cr
     ."  Repeat = " iv-col-repeat-cfa cfa. cr
     ."  Stop   = " iv-col-stop-cfa cfa. cr ?pause
\
     iv-col-mode
     CASE
        sequential_mode OF ." Sequential Mode" cr ENDOF
        parallel_mode OF ." Parallel Mode" cr ENDOF
        behavior_mode OF ." Behavior = "
            iv-behave-cfa >name id. cr ENDOF
     ENDCASE
;M

: COL.EXEC.START ( -- , execute start function )
	self iv-col-start-cfa if.exec|drop   \ 00001
;

: COL.EXEC.REPEAT ( -- , execute repeat function )
   	self iv-col-repeat-cfa if.exec|drop   \ 00001
;

: COL.EXEC.STOP  ( -- , perform stop function )
    self iv-col-stop-cfa if.exec|drop   \ 00001
;

: COL.DO.REPEAT  ( -- , perform repeat function and decr counter )
    iv-repcount 1- dup iv=> iv-repcount 0>
    IF
    	col.exec.repeat
        iv-repeat-delay iv+> iv-time-next
        false iv=> iv-col-done?
    THEN
;

( sequential collections execute the next element after )
( receiving a done message from the previous. )
: COL.BHV.SEQ ( -- index 1 | 0 )
    iv-current dup many: self <
    IF dup 1+ iv=> iv-current 1
    ELSE drop 0
    THEN
;

( Parallel collections wait for all DONE: messages )
( to arrive before signalling completion. )
: COL.BHV.PAR ( -- 0 1 2 ... N , exec all morphs NOW)
    iv-col-done?
    IF 0
    ELSE  many: self dup 1- swap
        0 DO dup i - swap LOOP 1+  set.done: self
    THEN
;

: COL.EXEC.BEHAV ( -- v0 v1 .. vn N | 0 ) \ 00002
	depth >r
    self iv-behave-cfa execute
    depth 1- over + r> -
    IF
    	.s " COL.EXEC.BEHAV" " Stack error in behavior!"
    	er_fatal ob.report.error
    THEN
;

: COL.BEHAVE ( -- v0 v1 .. vn N | 0 , execute morphs just once )
    iv-col-mode
    CASE
        parallel_mode OF col.bhv.par ENDOF
        sequential_mode OF col.bhv.seq ENDOF
        behavior_mode OF col.exec.behav ENDOF
        " COL.EXEC.ONCE" " Illegal mode!"
        er_fatal ob.report.error
    ENDCASE
;

: COL.UPDATE.TIME ( time -- , update maximum time )
    dup iv-time-next time>
    IF iv=> iv-time-next
    ELSE drop
    THEN
;

: COL.EXEC.LOOP  ( time -- )
	iv=> iv-time-next
\ Execute morphs until one tasks itself or done.
    BEGIN
        0 iv=> iv-pending
        col.behave dup 0>
        IF  0
            DO >r iv-time-next self r> at: self    ?execute: []
               IF col.update.time
               ELSE 1 iv+> iv-pending
               THEN
            LOOP
        ELSE drop col.do.repeat reset: self
        THEN
        iv-repcount 0= iv-pending 0> or
    UNTIL
;

: COL.STOP.CHILDREN  ( time -- )
    self ?hierarchical: []
    IF  reset: self
        BEGIN manyleft: self
        WHILE dup next: self
            0 over put.invoker: [] ( orphan them first )
            terminate: []
        REPEAT
    THEN
    drop
;

: COL.STOP  ( time -- )
	0 iv=> iv-repcount
    col.exec.stop
    iv-stop-delay +
    dup vtime! ( adjust time )
    morph.stop
;

:M TERMINATE:  ( time -- , stop all children )
    iv-if-active
    IF  
    	dup col.stop.children
    	col.stop
    ELSE drop
    THEN

;M

:M DONE: ( time sender -- , process completion message from child )
    mo.track.done drop col.update.time
\ Is this the last one to report back?
    iv-pending  1-  dup iv=> iv-pending 0=
    IF  iv-repcount
        IF  iv-time-next col.exec.loop  ( give it a chance to finish )
            iv-repcount 0=  ( is it finally done )
            IF  iv-time-next col.stop
            THEN
        ELSE 
            iv-time-next col.stop
        THEN
    THEN
;M

:M CUSTOM.EXEC: ( -- time true | false )
    iv-time-next col.exec.loop
    iv-pending
    IF false
    ELSE iv-time-next true
    THEN
;M

:M ?EXECUTE: ( time invoker -- time true | false )
    mo.track.exec
    over morph.check.stop
    put.invoker: self ( -- time )
    false iv=> iv-col-done?
    iv-repeat 0>
    IF
    	dup vtime!
		col.exec.start
    	iv-start-delay + dup iv=> iv-time-next vtime! ( apply delay )
        many: self 0>
        IF  iv-repeat iv=> iv-repcount  ( set down-counter )
            self custom.exec: []   ( late bind to specific method )
            dup
            IF
            	col.exec.stop
				over iv-stop-delay + vtime! ( adjust time )
                0 iv=> iv-invoker  false iv=> iv-if-active
            THEN
        ELSE vtime@ true
        THEN
    ELSE true  ( all done )
    THEN
;M

:M PRINT.HIERARCHY: ( -- , print name and indent for children )
    print.hierarchy: super
    3 morph-indent +!
    many: self 0
    DO i get: self print.hierarchy: []
    LOOP
    -3 morph-indent +!
;M

:M 0STUFF: ( 0 m0 m1 ... mN -- , easy build of collection)
    <0stuff:>
;M

:M }STUFF:  ( stuff...  --- , load it into object )
    stuff.depth >r
        <}stuff:>
    r> set.many: self
;M

:M DELETE: ( value -- , delete that value from collection )
    indexof: self
    IF  self remove: []
    THEN
;M

;CLASS

\ Included for compatibility.
: OB.COLL.PAR ( -- fake old style collection )
    ." OB.COLL.PAR is obsolete, use OB.COLLECTION !" cr
    ob.collection
;
: OB.COLL.SEQ ( -- fake old style collection )
    ." OB.COLL.SEQ is obsolete, use OB.COLLECTION !" cr
    ob.collection
    latest name> >body use->rel act.sequential: []
;

: BH.RANDOM ( struct --  next-id 1 | 0, choose randomly)
    many: [] 1+ choose  dup
    IF 1- 1
    THEN
;

\ STRUCTURES differs from a COLLECTION in that they have a
\ square grid of tendencies.
METHOD GET.TENDENCY:    METHOD PUT.TENDENCY:
METHOD FILL.TENDENCIES: METHOD GET.TGRID:
METHOD SUM.ROW:
METHOD SCAN.ROW:
METHOD CHAIN:  
METHOD CHOOSE:  
METHOD GET.LAST:
METHOD PUT.LAST:

: STR.BHV.MARKOV ( structure -- index 1 | 0 )
    choose: [] dup 0<
    IF drop 0  ( row was all zeroes! )
    ELSE 1
    THEN
;

:CLASS OB.STRUCTURE <SUPER OB.COLLECTION
    ob.shape IV-ST-TENDENCIES  ( Tendency array )
    iv.long  IV-ST-LAST

:M GET.LAST: ( -- lastchoice , return last one chosen )
    iv-st-last
;M
:M PUT.LAST: ( lastchoice -- , set starting point for chain )
    0 max iv=> iv-st-last
;M

:M GET.TENDENCY: ( s t -- T[s->t] )
    ed.at: iv-st-tendencies
;M

:M PUT.TENDENCY: ( T[s->t] s t --  )
    ed.to: iv-st-tendencies
;M

:M FILL.TENDENCIES: ( value -- , set all tendencies to value )
     fill: iv-st-tendencies
;M

:M GET.TGRID: ( -- tendencies-elmnts-array )
    iv-st-tendencies
;M

:M SUM.ROW:  ( elmnt# -- sum , sum of tendencies times weights )
    0 dimension: iv-st-tendencies 0
    DO over i ed.at: iv-st-tendencies
        i at: self get.weight: [] * +  ( -- elmnt# sum )
    LOOP nip
;M

:M SCAN.ROW:  { val elmnt# | choice -- t  , look for bucket }
    -1 -> choice
    0 dimension: iv-st-tendencies 0
    DO  elmnt# i ed.at: iv-st-tendencies
        i at: self get.weight: [] * +  ( -- elmnt# sum )
        dup val  >
        IF i -> choice leave
        THEN
    LOOP drop
    choice
;M

:M CHAIN:  ( elmnt# -- choice , calculate weighted probablility )
    dup sum.row: self
    choose
    swap scan.row: self
    dup put.last: self
;M

:M CHOOSE: ( -- choice , next based on last one )
    iv-st-last chain: self
;M

:M NEW: ( #morphs -- , allocate room )
    dup new: super
    dup dup dup new: iv-st-tendencies ( square space )
\ These limits will only affect editing operations.
    0 DO 0 100 i put.dim.limits: iv-st-tendencies
    LOOP
\
    set.many: iv-st-tendencies
    10 fill.tendencies: self
    0 iv=> iv-st-last
    iv-behave-cfa 0=
    IF  ." Behavior set to Markov, start at 0." cr
        'c str.bhv.markov put.behavior: self
    THEN
;M

:M FREE: ( -- )
    free: super
    free: iv-st-tendencies
;M
    
:M PRINT: ( -- )
    print: super
    ?pause
    ." Tendencies array ----------" cr
    print: iv-st-tendencies
;M

:M EXTEND:  ( #morphs -- , extend number of morphs allowed)
    extend: super
    max.elements: self dup new: iv-st-tendencies
    . " EXTEND: STRUCTURE" " Clears tendency grid!"
    er_warning ob.report.error
;M
    
;CLASS

: OB.TSTRUCTURE ( -- , fake old class )
    ." OB.TSTRUCTURE is now OB.STRUCTURE !" cr
    ." BEHAVIORS are different too!" cr
    ob.structure
;

if-testing @ .IF
ob.collection col1
ob.collection col2
ob.collection col3
ob.collection col4
ob.structure st1
: COL.TEST1
    0 col1 col2 col3 0stuff: col4
    print: col4
;

: COL.TERM
    free: col4
    free: st1
;
: ST.INIT
    0 col1 col2 col3 col4 0stuff: st1
;

: ST.TEST
    BEGIN choose: st1 . cr
        ?terminal
    UNTIL
;

if.forgotten col.term
.THEN


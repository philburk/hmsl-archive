\ Post various events to Event Buffer
\ including MIDI and Amiga Local Sound
\
\ Time is derived from software timer that stays slightly
\ ahead of the real clock.
\ Output events are time stamped wih the soft time
\ to occur at the hard time.x
\
\ Author: Phil Burk
\ Copyright 1989 Phil Burk
\
\ MOD: PLB 1/13/89 Use ODD@ for more then 3 byte message.
\ MOD: PLB 1/23/90 Add Amiga Local Sound
\ MOD: PLB 3/16/90 Fix (EBM.WRITE) when count > 6
\ MOD: PLB 7/91 Add Mac support
\ MOD: PLB 9/5/91 Restore DA.EB.ON

ANEW TASK-EB_POSTING

\ MIDI Support -------------------------------------------
if-load-midi @ .IF

defer EB.MIDI.WRITE

variable EB-POSTING-ON
variable EBM-OUT-PAD  ( only used by this next word in background )

: EBM.PACKED.OUT  ( packed-data -- , called from Event Buffer )
    ebm-out-pad 2dup !
    swap 3 and  eb.midi.write
;

: EBM.POST (  count<4 left-packed-data -- , post 1-3 bytes )
    $ FFFFFF00 and OR  ( pack data for output )
    'c ebm.packed.out vtime@ eb.add.node
;

: (EBM.WRITE) ( addr count -- , called from MIDI )
    dup 4 <  ( most will be 2 or 3 )
    IF swap @ ebm.post
    ELSE  ( -- addr count )
        BEGIN 2dup 3 min swap odd@ ebm.post
            3 - dup 0>
        WHILE >r 3 + r>  ( incr address )
        REPEAT 2drop
    THEN
;

\ Don't do buffered MIDI from inside interrupt via CAUSE
\ Just do it direct.

: EBM.WRITE ( addr count -- )
    eb-in-evbuf @
    IF eb.midi.write
    ELSE (ebm.write)
    THEN
;

: MIDI.EB.ON  ( -- , turn on MIDI event buffering )
    midi.flush
	eb-posting-on @ 0=
	IF
		what's midi.write is eb.midi.write
		'c ebm.write is midi.write
		eb-posting-on on
	THEN
;
: MIDI.EB.OFF ( -- )
	eb-posting-on @
	IF
    	what's eb.midi.write is midi.write
		eb-posting-on off
	THEN
;

\ ------------ Amiga Local Sound Support -----------
if-load-amiga-da @ .IF 
\ 16 bit value nibbles are packed OOOOVVVV
: DA.PACKEDW!  ( packed-data -- , called from Event Buffer )
    dup -16 shift (da.chipw!)
;
\ 24 bit value nibbles are packed OOVVVVVV
: DA.PACKED!  ( packed-data -- , called from Event Buffer )
    dup $ 00FFFFFF and swap -24 shift (da.chip!)
;

\ Don't do buffered MIDI from inside interrupt via CAUSE
\ Just do it direct.
: DA.POST.16 (  value16 offset16 -- , post DA data )
    eb-in-evbuf @
    IF  (da.chipw!)
    ELSE  16 shift swap $ FFFF and OR
        'c DA.PACKEDW! vtime@ eb.add.node
    THEN
;

: DA.POST.24 (  value24 offset8 -- , post DA data )
    eb-in-evbuf @
    IF  (da.chipw!)
    ELSE 24 shift swap $ 00FFFFFF and OR
        'c DA.PACKED! vtime@ eb.add.node
    THEN
;

: DA.EB.ON ( -- Event Buffer Digital Audio )
    'c da.post.16 is da.chipw!
    'c da.post.24 is da.chip!
;

: DA.EB.OFF ( -- Event Buffer Digital Audio )
    'c (da.chipw!) is da.chipw!
    'c (da.chip!) is da.chip!
;
.ELSE
: DA.EB.ON ;
: DA.EB.OFF ;
.THEN
\ --------------------------------------------------

: EB.ON  ( -- , use event buffering )
    rtc.rate@ time-advance !  ( set advance to 1 second )
[ host=mac .IF ]
	eb.reset
	' eb.task is service.timer
[ .ELSE ]
	da.eb.on
[ .THEN ]
;

: EB.OFF ( -- , go back to normal time )
[ host=mac .IF ]
	' noop is service.timer
[ .THEN ]
    'c noop is self.clock
    0 time-advance !
[ host=amiga .IF ]
	da.eb.off
[ .THEN ]
;

: SYS.INIT  sys.init  eb.on ;
: SYS.TERM eb.off sys.term ;

if.forgotten eb.off

if-testing @ .IF
: TSEQ
     0 40 100 midi.noteon.later
    20 40 0 midi.noteon.later
    30 60 100 midi.noteon.later
    30 56 100 midi.noteon.later
    40 60 0 midi.noteon.later
    60 56 0 midi.noteon.later
;

.THEN

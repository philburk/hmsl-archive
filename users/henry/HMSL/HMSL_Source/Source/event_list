\ Schedule Events at a Specified Time
\ An event consists of a data1, data2, cfa pair.
\ The data will be put on the stack and the CFA executed.
\
\ Events are added to the list using this word.
\ The events are kept in sorted order for speed.
\    POST.EVENT  ( time data1 data2 cfa -- , add to event list )
\
\ Copyright 1989 - Phil Burk, Larry Polansky, David Rosenboom
\ All Rights Reserved
\
\ MOD: PLB 8/17/90 Put proper time in NEXT-EVENT-TIME, S. Brandorff
\ 00001 PLB 11/20/91 Use EXIT instead of RETURN
\ 00002 PLB 2/18/92 Add SYS.TASK and SYS.CLEANUP

ANEW TASK-EVENT_LIST

OB.SHAPE EVENT-SHAPE

variable NEXT-EVENT-TIME

: DO.NEXT.EVENT  ( -- , execute next event )
    many: event-shape 0>
    IF  BEGIN next-event-time @ doitnow?
        WHILE  first: event-shape EXECUTE
        	drop \ time
            0 remove: event-shape
            many: event-shape 0>
            IF  0 0 ed.at: event-shape next-event-time !
            ELSE  exit \ 00001
            THEN
        REPEAT
    THEN
;

\ This is similar to the search.back method but uses TIME>
: EVL.SEARCH.BACK  { val | index -- index , next highest if false }
    many: event-shape  dup -> index   0
    DO  index 1- -> index
        val   index 0 ed.at: event-shape time>
        IF index 1+ -> index leave
        THEN
    LOOP
    index
;

: POST.EVENT  ( time data1 data2 cfa -- , add to event list )
    3 pick  ( get time )
    many: event-shape 0=
    IF  next-event-time !  ( only event so it must be earliest )
        add: event-shape
    ELSE
        evl.search.back dup 0=  ( earliest event )
        IF 4 pick next-event-time !
        THEN
        insert: event-shape
    THEN
;

: EVL.INIT  ( -- , setup job )
    64 4 new: event-shape
;

: EVL.TERM ( -- )
    free: event-shape
;

: SYS.INIT ( -- ) sys.init evl.init ;
: SYS.TERM ( -- ) evl.term sys.term ;
: SYS.RESET ( -- ) sys.reset clear: event-shape ;
: SYS.CLEANUP ( -- ) sys.cleanup clear: event-shape ;
: SYS.TASK ( -- )  do.next.event sys.task ;

if.forgotten evl.term


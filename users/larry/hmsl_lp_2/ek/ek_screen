\ ek screen fileanew task-ek_screen180 k: small_y_size \ height of small grids: CG-START.FUNCTION { val part -- }	val 0=	IF		stop: ek-collection		midi.killall		." Collection stopped " cr		600 5200 scg.move " Piece stopped... " gr.text	ELSE		start: ek-collection		." Collection running " cr		600 5200 scg.move " Piece running... " gr.text	THEN;: BUILD.CG-START	1 1 new: cg-start	350 300 put.wh: cg-start	10 put.text.size: cg-start	0 0 put.value: cg-start	" go " put.title: cg-start	stuff{ " START " }stuff.text: cg-start	'c cg-start.function put.down.function: cg-start;: CG-OPTIMIZE-CHOOSE.FUNCTION { val part -- }	val optimize-choose? !;: BUILD.CG-OPTIMIZE-CHOOSE	1 1 new: CG-OPTIMIZE-CHOOSE	200 200 put.wh: CG-OPTIMIZE-CHOOSE	9 put.text.size: CG-OPTIMIZE-CHOOSE	1 0 put.value: CG-OPTIMIZE-CHOOSE	" fast choose? " put.title: CG-OPTIMIZE-CHOOSE	stuff{ " ? " }stuff.text: CG-OPTIMIZE-CHOOSE	'c CG-OPTIMIZE-CHOOSE.FUNCTION put.down.function: CG-OPTIMIZE-CHOOSE;: CG-PRESET-LIMIT.FUNCTION { val part -- }	val preset-limit !;: BUILD.CG-PRESET-LIMIT	1 1 new: CG-PRESET-LIMIT	200 200 put.wh: CG-PRESET-LIMIT	9 put.text.size: CG-PRESET-LIMIT	" preset limit " put.title: CG-PRESET-LIMIT	0 0 put.min: CG-PRESET-LIMIT	200 0 put.max: CG-PRESET-LIMIT	preset-limit @ 0 put.value: CG-PRESET-LIMIT	'c CG-PRESET-LIMIT.FUNCTION put.down.function: CG-PRESET-LIMIT	'c CG-PRESET-LIMIT.FUNCTION put.up.function: CG-PRESET-LIMIT		'c CG-PRESET-LIMIT.FUNCTION put.move.function: CG-PRESET-LIMIT;: CG-SKIP/STEP-PROB.FUNCTION { val part -- }	val skip/step-prob !;: BUILD.CG-SKIP/STEP-PROB	1 1 new: CG-SKIP/STEP-PROB	200 200 put.wh: CG-SKIP/STEP-PROB	9 put.text.size: CG-SKIP/STEP-PROB	" skip/step% " put.title: CG-SKIP/STEP-PROB	0 0 put.min: CG-SKIP/STEP-PROB	100 0 put.max: CG-SKIP/STEP-PROB	50 0 put.value: CG-SKIP/STEP-PROB	'c CG-SKIP/STEP-PROB.FUNCTION put.down.function: CG-SKIP/STEP-PROB	'c CG-SKIP/STEP-PROB.FUNCTION put.up.function: CG-SKIP/STEP-PROB		'c CG-SKIP/STEP-PROB.FUNCTION put.move.function: CG-SKIP/STEP-PROB;: CG-TIME-ADVANCE.FUNCTION { val part -- }	val time-advance !;: BUILD.CG-TIME-ADVANCE	1 1 new: CG-TIME-ADVANCE	200 200 put.wh: CG-TIME-ADVANCE	9 put.text.size: CG-TIME-ADVANCE	" e-buffer " put.title: CG-TIME-ADVANCE	0 0 put.min: CG-TIME-ADVANCE	1000 0 put.max: CG-TIME-ADVANCE	95 0 put.value: CG-TIME-ADVANCE	'c CG-TIME-ADVANCE.FUNCTION put.down.function: CG-TIME-ADVANCE	'c CG-TIME-ADVANCE.FUNCTION put.up.function: CG-TIME-ADVANCE		'c CG-TIME-ADVANCE.FUNCTION put.move.function: CG-TIME-ADVANCE;: CG-#-REPEATS.FUNCTION { val part -- }	val ek-#-repeats !;: BUILD.CG-#-REPEATS	1 1 new: CG-#-REPEATS	200 200 put.wh: CG-#-REPEATS	9 put.text.size: CG-#-REPEATS	" #-repeats " put.title: CG-#-REPEATS	1 0 put.min: CG-#-REPEATS	50 0 put.max: CG-#-REPEATS	2 0 put.value: CG-#-REPEATS	'c CG-#-REPEATS.FUNCTION  put.down.function: CG-#-REPEATS	'c CG-#-REPEATS.FUNCTION  put.up.function: CG-#-REPEATS		'c CG-#-REPEATS.FUNCTION  put.move.function: CG-#-REPEATS;: CG-MAX-JITTER.FUNCTION { val part -- }	val max-jitter !;: BUILD.CG-MAX-JITTER	1 1 new: CG-MAX-JITTER	200 200 put.wh: CG-MAX-JITTER	9 put.text.size: CG-MAX-JITTER	" max-jitter " put.title: CG-MAX-JITTER	0 0 put.min: CG-MAX-JITTER	100 0 put.max: CG-MAX-JITTER	4 0 put.value: CG-MAX-JITTER	'c CG-MAX-JITTER.FUNCTION  put.down.function: CG-MAX-JITTER	'c CG-MAX-JITTER.FUNCTION  put.up.function: CG-MAX-JITTER	'c CG-MAX-JITTER.FUNCTION  put.move.function: CG-MAX-JITTER;: CG-TEMPO.FUNCTION { val part -- }	val rtc.rate!;: BUILD.CG-TEMPO	1 1 new: cg-tempo	250 200 put.wh: cg-tempo	9 put.text.size: cg-tempo	" tempo " put.title: cg-tempo	60 0 put.min: cg-tempo	1017 0 put.max: cg-tempo	180 0 put.value: cg-tempo	'c cg-tempo.function put.down.function: cg-tempo	'c cg-tempo.function put.up.function: cg-tempo		'c cg-tempo.function put.move.function: cg-tempo;: CG-CONTROLLER-#.FUNCTION { val part -- }	val ek-controller-# !;: BUILD.CG-CONTROLLER-#	1 1 new: CG-CONTROLLER-#	200 200 put.wh: CG-CONTROLLER-#	9 put.text.size: CG-CONTROLLER-#	" ctrl-# " put.title: CG-CONTROLLER-#	0 0 put.min: CG-CONTROLLER-#	127 0 put.max: CG-CONTROLLER-#	10 0 put.value: CG-CONTROLLER-#	'c CG-CONTROLLER-#.FUNCTION put.down.function: CG-CONTROLLER-#	'c CG-CONTROLLER-#.FUNCTION put.up.function: CG-CONTROLLER-#		'c CG-CONTROLLER-#.FUNCTION put.move.function: CG-CONTROLLER-#;: CG-DENSITY.FUNCTION { val part -- }	val ek-density !	\ global one overrides individual	#_ek_channels 0 DO		val i player-densities ed.to: ek-player-data		val i put.value: cg-densities	LOOP;: BUILD.CG-DENSITY	1 1 new: CG-DENSITY	200 200 put.wh: CG-DENSITY	9 put.text.size: CG-DENSITY	" dens " put.title: CG-DENSITY	0 0  put.min: CG-DENSITY	100 0 put.max: CG-DENSITY	ek-density @ 0 put.value: CG-DENSITY	'c CG-DENSITY.FUNCTION put.down.function: CG-DENSITY	'c CG-DENSITY.FUNCTION put.up.function: CG-DENSITY		'c CG-DENSITY.FUNCTION put.move.function: CG-DENSITY;: CG-STEP.FUNCTION { val part -- }	val ek-step !	\ global one overrides individual	#_ek_channels 0 DO		val i player-steps ed.to: ek-player-data		dup		val i put.value: cg-steps		skip.from.step i player-skips ed.to: ek-player-data	LOOP;: BUILD.CG-STEP	1 1 new: CG-STEP	200 200 put.wh: CG-STEP	9 put.text.size: CG-STEP	" step " put.title: CG-STEP	0 0  put.min: CG-STEP	12 0 put.max: CG-STEP	ek-step @ 0 put.value: CG-STEP	'c CG-STEP.FUNCTION put.down.function: CG-STEP	'c CG-STEP.FUNCTION put.up.function: CG-STEP		'c CG-STEP.FUNCTION put.move.function: CG-STEP;: CG-LOUD.FUNCTION { val part | new-val -- }	val ek-loud !	\ global one overrides individual	#_ek_channels 0 DO		val ek-loud-jitter @ + 1+ val ek-loud-jitter @ - 		wchoose		-> new-val		new-val i player-loudnesses ed.to: ek-player-data		new-val 1 127 clipto i  put.value: cg-loudnesses	LOOP;: BUILD.CG-LOUD	1 1 new: CG-LOUD	200 200 put.wh: CG-LOUD	9 put.text.size: CG-LOUD	" loud " put.title: CG-LOUD	0 0  put.min: CG-LOUD	20 0 put.max: CG-LOUD	ek-loud @ 0 put.value: CG-LOUD	'c CG-LOUD.FUNCTION put.down.function: CG-LOUD	'c CG-LOUD.FUNCTION put.up.function: CG-LOUD		'c CG-LOUD.FUNCTION put.move.function: CG-LOUD;: CG-LOUD-JITTER.FUNCTION { val part -- }	val ek-loud-jitter !;: BUILD.CG-LOUD-JITTER	1 1 new: CG-LOUD-JITTER	200 200 put.wh: CG-LOUD-JITTER	9 put.text.size: CG-LOUD-JITTER	" lj " put.title: CG-LOUD-JITTER	0 0 put.min: CG-LOUD-JITTER	10 0 put.max: CG-LOUD-JITTER	ek-loud-jitter @ 0 put.value: cg-loud-jitter	'c  CG-LOUD-JITTER.FUNCTION  put.down.function: CG-LOUD-JITTER		'c  CG-LOUD-JITTER.FUNCTION  put.move.function: CG-LOUD-JITTER		'c  CG-LOUD-JITTER.FUNCTION  put.up.function: CG-LOUD-JITTER;: CG-FUND.FUNCTION { val part | new-val -- }	\ global one overrides individual	#_ek_channels 0 DO		val ek-fund-jitter @ + 1+ val ek-fund-jitter @ - 		wchoose		-> new-val		new-val i player-funds ed.to: ek-player-data		new-val 1 127 clipto i  put.value: cg-funds		new-val 1 127 clipto i at: ek-instruments put.offset: []	LOOP;: BUILD.CG-FUND	1 1 new: CG-FUND	200 200 put.wh: CG-FUND	9 put.text.size: CG-FUND	" fund " put.title: CG-FUND	1 0  put.min: CG-FUND	 127 0 put.max: CG-FUND	60  0 put.value: CG-FUND	'c CG-FUND.FUNCTION put.down.function: CG-FUND	'c CG-FUND.FUNCTION put.up.function: CG-FUND		'c CG-FUND.FUNCTION put.move.function: CG-FUND;: CG-PRESET.FUNCTION { val part -- }	\ global one overrides individual	#_ek_channels 0 DO		val i player-presets ed.to: ek-player-data		val 0 127 clipto i  put.value: cg-presets		val 0 127 clipto i at: ek-instruments put.preset: []	LOOP;: BUILD.CG-PRESET	1 1 new: CG-PRESET	200 200 put.wh: CG-PRESET	9 put.text.size: CG-PRESET	" pres " put.title: CG-PRESET	1 0  put.min: CG-PRESET	 127 0 put.max: CG-PRESET	1  0 put.value: CG-PRESET	'c CG-PRESET.FUNCTION put.down.function: CG-PRESET	'c CG-PRESET.FUNCTION put.up.function: CG-PRESET		'c CG-PRESET.FUNCTION put.move.function: CG-PRESET;: CG-BEND.FUNCTION { val part -- }	val ek-bend !	\ global one overrides individual	#_ek_channels 0 DO		val i player-bends ed.to: ek-player-data		val i put.value: cg-bends	LOOP;: BUILD.CG-BEND	1 1 new: CG-BEND	200 200 put.wh: CG-BEND	9 put.text.size: CG-BEND	" bend " put.title: CG-BEND	0 0  put.min: CG-BEND	100 0 put.max: CG-BEND	ek-bend @ 0 put.value: CG-BEND	'c CG-BEND.FUNCTION put.down.function: CG-BEND	'c CG-BEND.FUNCTION put.up.function: CG-BEND		'c CG-BEND.FUNCTION put.move.function: CG-BEND;: CG-CONTROL.FUNCTION { val part -- }	val ek-control !	\ global one overrides individual	#_ek_channels 0 DO		val i player-controls ed.to: ek-player-data		val i put.value: cg-controls	LOOP;: BUILD.CG-CONTROL	1 1 new: CG-CONTROL	200 200 put.wh: CG-CONTROL	9 put.text.size: CG-CONTROL	" ctrl " put.title: CG-CONTROL	0 0  put.min: CG-CONTROL	127 0 put.max: CG-CONTROL	ek-controller-# @ 0 put.value: CG-CONTROL	'c CG-CONTROL.FUNCTION put.down.function: CG-CONTROL	'c CG-CONTROL.FUNCTION put.up.function: CG-CONTROL		'c CG-CONTROL.FUNCTION put.move.function: CG-CONTROL;: CG-STACC.FUNCTION { val part -- }	val ek-stacc !	\ global one overrides individual	#_ek_channels 0 DO		val i player-staccs ed.to: ek-player-data		val i put.value: cg-staccs		val 100 part at: ek-collection put.duty.cycle: []	LOOP;: BUILD.CG-STACC	1 1 new: CG-STACC	200 200 put.wh: CG-STACC	9 put.text.size: CG-STACC	" stacc " put.title: CG-STACC	0 0  put.min: CG-STACC	100 0 put.max: CG-STACC	ek-stacc @ 0 put.value: CG-STACC	'c CG-STACC.FUNCTION put.down.function: CG-STACC	'c CG-STACC.FUNCTION put.up.function: CG-STACC		'c CG-STACC.FUNCTION put.move.function: CG-STACC;: CG-JITTER.FUNCTION { val part -- }	val ek-jitter !	\ global one overrides individual	#_ek_channels 0 DO		val i player-jitters ed.to: ek-player-data		val i put.value: cg-jitters	LOOP;: BUILD.CG-JITTER	1 1 new: CG-JITTER	200 200 put.wh: CG-JITTER	9 put.text.size: CG-JITTER	" jitter " put.title: CG-JITTER	0 0  put.min: CG-JITTER	100 0 put.max: CG-JITTER	ek-jitter @ 0 put.value: CG-JITTER	'c  CG-JITTER.FUNCTION put.down.function: CG-JITTER	'c  CG-JITTER.FUNCTION put.up.function: CG-JITTER		'c  CG-JITTER.FUNCTION put.move.function: CG-JITTER;: CG-FUNDRANGE.FUNCTION { val part -- }	val 	part 0= 	IF 		ek-fund-hi @ min		-> val		val ek-fund-lo ! 		#_ek_channels 0 DO		val i player-fundlos ed.to: ek-player-data		val i put.value: cg-fundlos	LOOP			ELSE 		ek-fund-lo @ max		-> val		val ek-fund-hi ! 		#_ek_channels 0 DO		val i player-fundhis ed.to: ek-player-data		val i put.value: cg-fundhis	LOOP	THEN;: BUILD.CG-FUNDRANGE	2 1 new: CG-FUNDRANGE	200 200 put.wh: CG-FUNDRANGE	9 put.text.size: CG-FUNDRANGE	" range " put.title: CG-FUNDRANGE	1 0  put.min: CG-FUNDRANGE	10 1  put.min: CG-FUNDRANGE	110 0 put.max: CG-FUNDRANGE	127 1 put.max: CG-FUNDRANGE	ek-fund-lo @ 0 put.value: CG-FUNDRANGE	ek-fund-hi @ 1 put.value: CG-FUNDRANGE	'c CG-FUNDRANGE.FUNCTION put.down.function: CG-FUNDRANGE	'c CG-FUNDRANGE.FUNCTION put.up.function: CG-FUNDRANGE		'c CG-FUNDRANGE.FUNCTION put.move.function: CG-FUNDRANGE;\ presets : CG-PRESETS.FUNCTION { val part -- }	val part player-presets ed.to: ek-player-data	val  part at: ek-instruments put.preset: [] ;: BUILD.CG-PRESETS	1 #_ek_channels new: cg-presets	200 200 put.wh: cg-presets	9 put.text.size: cg-presets	" pres " put.title: cg-presets	1 -1 put.min: cg-presets	255 -1 put.max: cg-presets	#_ek_channels 0 DO		i player-presets ed.at: ek-player-data		i put.value: cg-presets	LOOP	'c cg-presets.function put.down.function: cg-presets		'c cg-presets.function put.move.function: cg-presets		'c cg-presets.function put.up.function: cg-presets;\ funds : CG-FUNDS.FUNCTION { val part -- }	val part player-funds ed.to: ek-player-data	val part at: ek-instruments put.offset: [] ;: BUILD.CG-FUNDS	1 #_ek_channels new: CG-FUNDS	200 200 put.wh: CG-FUNDS	9 put.text.size: CG-FUNDS	" fund " put.title: CG-FUNDS	1 -1 put.min: CG-FUNDS	127 -1 put.max: CG-FUNDS	#_ek_channels 0 DO		i player-funds ed.at: ek-player-data		i put.value: cg-funds	LOOP	'c CG-FUNDS.FUNCTION put.down.function: CG-FUNDS		'c CG-FUNDS.FUNCTION put.move.function: CG-FUNDS		'c CG-FUNDS.FUNCTION put.up.function: CG-FUNDS;: CG-FUND-JITTER.FUNCTION { val part -- }	val ek-fund-jitter !;: BUILD.CG-FUND-JITTER	1 1 new: CG-FUND-JITTER	200 200 put.wh: CG-FUND-JITTER	9 put.text.size: CG-FUND-JITTER	" fj " put.title: CG-FUND-JITTER	0 0 put.min: CG-FUND-JITTER	60 0 put.max: CG-FUND-JITTER	ek-fund-jitter @ 0 put.value: cg-fund-jitter	'c  CG-FUND-JITTER.FUNCTION put.down.function: CG-FUND-JITTER		'c  CG-FUND-JITTER.FUNCTION put.move.function: CG-FUND-JITTER		'c  CG-FUND-JITTER.FUNCTION put.up.function: CG-FUND-JITTER;\ stacc : CG-STACCS.FUNCTION { val part -- }	val part player-staccs ed.to: ek-player-data	val 100 part at: ek-collection put.duty.cycle: [] ;: BUILD.CG-STACCS	1 #_ek_channels new: CG-STACCS	200 200 put.wh: CG-STACCS	9 put.text.size: CG-STACCS	" stacc " put.title: CG-STACCS	0 -1 put.min: CG-STACCS	100 -1 put.max: CG-STACCS	#_ek_channels 0 DO		i player-staccs ed.at: ek-player-data		i put.value: cg-staccs	LOOP	'c CG-STACCS.FUNCTION put.down.function: CG-STACCS		'c CG-STACCS.FUNCTION put.move.function: CG-STACCS		'c CG-STACCS.FUNCTION put.up.function: CG-STACCS;\ jitter : CG-JITTERS.FUNCTION { val part -- }	val part player-jitters ed.to: ek-player-data ;: BUILD.CG-JITTERS	1 #_ek_channels new: CG-JITTERS	200 200 put.wh: CG-JITTERS	9 put.text.size: CG-JITTERS	" jitter " put.title: CG-JITTERS	0 -1 put.min: CG-JITTERS	100 -1 put.max: CG-JITTERS	#_ek_channels 0 DO		i player-jitters ed.at: ek-player-data		i put.value: cg-jitters	LOOP	'c CG-JITTERS.FUNCTION  put.down.function: CG-JITTERS		'c CG-JITTERS.FUNCTION  put.move.function: CG-JITTERS		'c CG-JITTERS.FUNCTION  put.up.function: CG-JITTERS;\ loudness : CG-LOUDNESSES.FUNCTION { val part -- }	val part player-loudnesses ed.to: ek-player-data ;: BUILD.CG-LOUDNESSES	1 #_ek_channels new: CG-LOUDNESSES	200 200 put.wh: CG-LOUDNESSES	9 put.text.size: CG-LOUDNESSES	" loud " put.title: CG-LOUDNESSES	0 -1 put.min: CG-LOUDNESSES	20 -1 put.max: CG-LOUDNESSES	#_ek_channels 0 DO		i player-loudnesses ed.at: ek-player-data		i put.value: cg-loudnesses	LOOP	'c CG-LOUDNESSES.FUNCTION put.down.function: CG-LOUDNESSES		'c CG-LOUDNESSES.FUNCTION put.move.function: CG-LOUDNESSES		'c CG-LOUDNESSES.FUNCTION put.up.function: CG-LOUDNESSES;: CG-BEHAVIORS.FUNCTION { val part --  }\	val part player-behaviors ed.to: ek-player-data\	val part cg-behaviors-text.function \ this is defined in ek_choose....;: BUILD.CG-BEHAVIORS	1 #_ek_channels new: CG-BEHAVIORS	200 200 put.wh: CG-BEHAVIORS	9 put.text.size: CG-BEHAVIORS	" behav " put.title: CG-BEHAVIORS	0 -1 put.min: CG-BEHAVIORS	#_Behaviors 1- -1 put.max: CG-BEHAVIORS	#_ek_channels 0 DO		i player-behaviors ed.at: ek-player-data		i put.value: cg-behaviors	LOOP	'c CG-BEHAVIORS.FUNCTION put.down.function: CG-BEHAVIORS		'c CG-BEHAVIORS.FUNCTION put.move.function: CG-BEHAVIORS		'c CG-BEHAVIORS.FUNCTION put.up.function: CG-BEHAVIORS;: CG-DENSITIES.FUNCTION { val part --  }	val part player-densities ed.to: ek-player-data;: BUILD.CG-DENSITIES	1 #_ek_channels new: CG-DENSITies	200 200 put.wh: CG-DENSITies	9 put.text.size: CG-DENSITies	" dens " put.title: CG-DENSITies	0 -1 put.min: CG-DENSITies	100 -1 put.max: CG-DENSITies	#_ek_channels 0 DO		i player-densities ed.at: ek-player-data		i put.value: cg-densities	LOOP	'c CG-DENSITIES.FUNCTION  put.down.function: CG-DENSITies		'c CG-DENSITIES.FUNCTION  put.move.function: CG-DENSITies		'c CG-DENSITIES.FUNCTION  put.up.function: CG-DENSITies;: CG-STEPS.FUNCTION { val part --  }	val part player-steps ed.to: ek-player-data	val skip.from.step part player-skips ed.to: ek-player-data;: BUILD.CG-STEPS	1 #_ek_channels new: CG-STEPS	200 200 put.wh: CG-STEPS	9 put.text.size: CG-STEPS	" step " put.title: CG-STEPS	0 -1 put.min: CG-STEPS	100 -1 put.max: CG-STEPS	#_ek_channels 0 DO		i player-steps ed.at: ek-player-data		i put.value: cg-steps	LOOP	'c CG-STEPS.FUNCTION   put.down.function: CG-STEPS		'c CG-STEPS.FUNCTION   put.move.function: CG-STEPS		'c CG-STEPS.FUNCTION   put.up.function: CG-STEPS;: CG-FUNDHIS.FUNCTION { val part --  }	part player-fundlos ed.at: ek-player-data	val max	part player-fundhis ed.to: ek-player-data;: BUILD.CG-FUNDHIS	1 #_ek_channels new: CG-FUNDHIS	200 200 put.wh: CG-FUNDHIS	9 put.text.size: CG-FUNDHIS	" f-hi " put.title: CG-FUNDHIS	10 -1 put.min: CG-FUNDHIS	127 -1 put.max: CG-FUNDHIS	#_ek_channels 0 DO		i player-fundhis ed.at: ek-player-data		i put.value: cg-fundhis	LOOP	'c CG-FUNDHIS.FUNCTION  put.down.function: CG-FUNDHIS		'c CG-FUNDHIS.FUNCTION  put.move.function: CG-FUNDHIS		'c CG-FUNDHIS.FUNCTION  put.up.function: CG-FUNDHIS;: CG-FUNDLOS.FUNCTION { val part --  }	part player-fundhis ed.at: ek-player-data	val min	part player-fundlos ed.to: ek-player-data;: BUILD.CG-FUNDLOS	1 #_ek_channels new: CG-FUNDLOS	200 200 put.wh: CG-FUNDLOS	9 put.text.size: CG-FUNDLOS	" f-lo " put.title: CG-FUNDLOS	1 -1 put.min: CG-FUNDLOS	110 -1 put.max: CG-FUNDLOS	#_ek_channels 0 DO		i player-fundlos ed.at: ek-player-data		i put.value: cg-fundlos	LOOP	'c CG-FUNDLOS.FUNCTION  put.down.function: CG-FUNDLOS		'c CG-FUNDLOS.FUNCTION  put.move.function: CG-FUNDLOS		'c CG-FUNDLOS.FUNCTION  put.up.function: CG-FUNDLOS;\ these are stored 0-100, which later gets to full pitch bend range in interpreter: CG-BENDS.FUNCTION { val part --  }	val 	part player-bends ed.to: ek-player-data;: BUILD.CG-BENDS	1 #_ek_channels new: CG-BENDS	200 200 put.wh: CG-BENDS	9 put.text.size: CG-BENDS	" bend " put.title: CG-BENDS	0 -1 put.min: CG-BENDS	100 -1 put.max: CG-BENDS	#_ek_channels 0 DO		i player-bends ed.at: ek-player-data		i put.value: cg-bends	LOOP	'c CG-BENDS.FUNCTION  put.down.function: CG-BENDS		'c CG-BENDS.FUNCTION  put.move.function: CG-BENDS		'c CG-BENDS.FUNCTION  put.up.function: CG-BENDS;\ these are stored 0-100, which later gets to full controller  range in interpreter\ and assigned to controller number: CG-CONTROLS.FUNCTION { val part --  }	val 	part player-controls ed.to: ek-player-data;: BUILD.CG-CONTROLS	1 #_ek_channels new: CG-CONTROLS	200 200 put.wh: CG-CONTROLS	9 put.text.size: CG-CONTROLS	" ctrl " put.title: CG-CONTROLS	0 -1 put.min: CG-CONTROLS	127 -1 put.max: CG-CONTROLS	#_ek_channels 0 DO		i player-controls ed.at: ek-player-data		i put.value: cg-controls	LOOP	'c CG-CONTROLS.FUNCTION   put.down.function: CG-CONTROLS		'c CG-CONTROLS.FUNCTION   put.move.function: CG-CONTROLS		'c CG-CONTROLS.FUNCTION   put.up.function: CG-CONTROLS;\ players on : CG-PLAYERS-ON.FUNCTION { val part -- }	val true = IF 1 ELSE 0 THEN	part players-on? ed.to: ek-player-data ;: BUILD.CG-PLAYERS-ON	1 #_ek_channels new: cg-players-on	200 200 put.wh: cg-players-on	9 put.text.size: cg-players-on	" on/off " put.title: cg-players-on	stuff{ " 1" " 2" " 3" " 4" " 5" " 6" " 7" " 8"		   " 9" " 10" " 11" " 12" " 13" " 14" " 15" " 16" 	}stuff.text: cg-players-on	'c cg-players-on.function put.down.function: cg-players-on;\ build choose enables: CG-PLAYERS-ON-CHOOSE.FUNCTION { val part -- } val  choose-on? ! ;: CG-PRESETS-CHOOSE.FUNCTION { val part -- } val  choose-presets? ! ;: CG-BEHAVIORS-CHOOSE.FUNCTION { val part -- } val  choose-behaviors? ! ;: CG-FUNDS-CHOOSE.FUNCTION { val part -- } val  choose-funds? ! ;: CG-LOUDNESSES-CHOOSE.FUNCTION { val part -- } val  choose-loudnesses? ! ;: CG-BENDS-CHOOSE.FUNCTION { val part -- } val  choose-bends? ! ;: CG-JITTERS-CHOOSE.FUNCTION { val part -- } val  choose-jitters? ! ;: CG-STACCS-CHOOSE.FUNCTION { val part -- } val  choose-staccs? ! ;: CG-CONTROLS-CHOOSE.FUNCTION { val part -- } val  choose-controls? ! ;: CG-SKIPS-CHOOSE.FUNCTION { val part -- } val  choose-skips? ! ;: CG-STEPS-CHOOSE.FUNCTION { val part -- } val  choose-steps? ! ;\: BUILD.CG-PLAYERS-ON-CHOOSE 	1 1 new: CG-PLAYERS-ON-CHOOSE 	200 small_y_size put.wh: CG-PLAYERS-ON-CHOOSE 	9 put.text.size: CG-PLAYERS-ON-CHOOSE 	1 0 put.value: CG-PLAYERS-ON-CHOOSE 	"  " put.title: CG-PLAYERS-ON-CHOOSE 	stuff{ " ? " }stuff.text: CG-PLAYERS-ON-CHOOSE 	'c CG-PLAYERS-ON-CHOOSE.FUNCTION put.down.function: CG-PLAYERS-ON-CHOOSE ;: BUILD.CG-PRESETS-CHOOSE	1 1 new: CG-PRESETS-CHOOSE 	200 200 put.wh: CG-PRESETS-CHOOSE 	9 put.text.size: CG-PRESETS-CHOOSE 	1 0 put.value: CG-PRESETS-CHOOSE 	"  " put.title: CG-PRESETS-CHOOSE 	stuff{ " ? " }stuff.text: CG-PRESETS-CHOOSE 	'c CG-PRESETS-CHOOSE.FUNCTION put.down.function: CG-PRESETS-CHOOSE ;: BUILD.CG-JITTERS-CHOOSE	1 1 new: CG-JITTERS-CHOOSE 	200 200 put.wh: CG-JITTERS-CHOOSE 	9 put.text.size: CG-JITTERS-CHOOSE 	0 0 put.value: CG-JITTERS-CHOOSE 	"  " put.title: CG-JITTERS-CHOOSE 	stuff{ " ? " }stuff.text: CG-JITTERS-CHOOSE 	'c CG-JITTERS-CHOOSE.FUNCTION put.down.function: CG-JITTERS-CHOOSE ;: BUILD.CG-STACCS-CHOOSE	1 1 new: CG-STACCS-CHOOSE 	200 200 put.wh: CG-STACCS-CHOOSE 	9 put.text.size: CG-STACCS-CHOOSE 	1 0 put.value: CG-STACCS-CHOOSE 	"  " put.title: CG-STACCS-CHOOSE 	stuff{ " ? " }stuff.text: CG-STACCS-CHOOSE 	'c CG-STACCS-CHOOSE.FUNCTION put.down.function: CG-STACCS-CHOOSE ;: BUILD.CG-BEHAVIORS-CHOOSE		1 1 new: CG-BEHAVIORS-CHOOSE 	200 200 put.wh: CG-BEHAVIORS-CHOOSE 	9 put.text.size: CG-BEHAVIORS-CHOOSE 	1 0 put.value: CG-BEHAVIORS-CHOOSE 	"  " put.title: CG-BEHAVIORS-CHOOSE 	stuff{ " ? " }stuff.text: CG-BEHAVIORS-CHOOSE 	'c CG-BEHAVIORS-CHOOSE.FUNCTION put.down.function: CG-BEHAVIORS-CHOOSE ;: BUILD.CG-FUNDS-CHOOSE 	1 1 new: CG-FUNDS-CHOOSE  	200 200 put.wh: CG-FUNDS-CHOOSE  	9 put.text.size: CG-FUNDS-CHOOSE  	1 0 put.value: CG-FUNDS-CHOOSE  	"  " put.title: CG-FUNDS-CHOOSE  	stuff{ " ? " }stuff.text: CG-FUNDS-CHOOSE  	'c CG-FUNDS-CHOOSE.FUNCTION put.down.function: CG-FUNDS-CHOOSE  ;: BUILD.CG-LOUDNESSES-CHOOSE	1 1 new: CG-LOUDNESSES-CHOOSE  	200 200 put.wh: CG-LOUDNESSES-CHOOSE  	9 put.text.size: CG-LOUDNESSES-CHOOSE  	1 0 put.value: CG-LOUDNESSES-CHOOSE  	"  " put.title: CG-LOUDNESSES-CHOOSE  	stuff{ " ? " }stuff.text: CG-LOUDNESSES-CHOOSE  	'c CG-LOUDNESSES-CHOOSE.FUNCTION put.down.function: CG-LOUDNESSES-CHOOSE  ; : BUILD.CG-BENDS-CHOOSE	1 1 new: CG-BENDS-CHOOSE  	200 200 put.wh: CG-BENDS-CHOOSE  	9 put.text.size: CG-BENDS-CHOOSE  	1 0 put.value: CG-BENDS-CHOOSE  	"  " put.title: CG-BENDS-CHOOSE  	stuff{ " ? " }stuff.text: CG-BENDS-CHOOSE  	'c CG-BENDS-CHOOSE.FUNCTION put.down.function: CG-BENDS-CHOOSE  ; : BUILD.CG-CONTROLS-CHOOSE	1 1 new: CG-CONTROLS-CHOOSE  	200 200 put.wh: CG-CONTROLS-CHOOSE  	9 put.text.size: CG-CONTROLS-CHOOSE  	1 0 put.value: CG-CONTROLS-CHOOSE  	"  " put.title: CG-CONTROLS-CHOOSE  	stuff{ " ? " }stuff.text: CG-CONTROLS-CHOOSE  	'c CG-CONTROLS-CHOOSE.FUNCTION put.down.function: CG-CONTROLS-CHOOSE  ;: BUILD.CG-SKIPS-CHOOSE 	1 1 new: CG-SKIPS-CHOOSE  	200 200 put.wh: CG-SKIPS-CHOOSE  	9 put.text.size: CG-SKIPS-CHOOSE  	1 0 put.value: CG-SKIPS-CHOOSE  	"  " put.title: CG-SKIPS-CHOOSE  	stuff{ " ? " }stuff.text: CG-SKIPS-CHOOSE  	'c CG-SKIPS-CHOOSE.FUNCTION put.down.function: CG-SKIPS-CHOOSE  ;: BUILD.CG-STEPS-CHOOSE	1 1 new: CG-STEPS-CHOOSE  	200 200 put.wh: CG-STEPS-CHOOSE  	9 put.text.size: CG-STEPS-CHOOSE  	1 0 put.value: CG-STEPS-CHOOSE  	"  " put.title: CG-STEPS-CHOOSE  	stuff{ " ? " }stuff.text: CG-STEPS-CHOOSE  	'c CG-STEPS-CHOOSE.FUNCTION put.down.function: CG-STEPS-CHOOSE  ;\ click controls: CG-CLICK-CONTROLS.FUNCTION { val part -- }	\ 0 = pitch, 1 = preset	part CASE		0 of val midi-click-note ! 			val ins-midi-1 put.offset: []  			val 15 put.value: cg-funds endof		1 of val midi-click-preset ! 			val ins-midi-1 put.preset: [] 			val 15 put.value: cg-presets endof	ENDCASE;: BUILD.CG-CLICK-CONTROLS	1 2 new: CG-CLICK-CONTROLS	200 200 put.wh: CG-CLICK-CONTROLS	9 put.text.size: CG-CLICK-CONTROLS	" clk-controls " put.title: CG-CLICK-CONTROLS	0 -1 put.min: CG-CLICK-CONTROLS	127 -1 put.max: CG-CLICK-CONTROLS	midi-click-note @ 0 put.value: cg-click-controls	midi-click-preset @ 1 put.value: cg-click-controls	'c CG-CLICK-CONTROLS.FUNCTION  put.down.function: CG-CLICK-CONTROLS		'c CG-CLICK-CONTROLS.FUNCTION  put.move.function: CG-CLICK-CONTROLS		'c CG-CLICK-CONTROLS.FUNCTION  put.up.function: CG-CLICK-CONTROLS;\ grid for turning on midi click: CG-CLICK.FUNCTION { val part -- }	\ enables it for next thru, or disables (mutes) it immediately	val midi-click-on? !	val	not put.mute: ins-midi-1;: BUILD.CG-CLICK	1 1 new: cg-click	200 200 put.wh: cg-click	9 put.text.size: cg-click	0 0 put.value: cg-click	" click " put.title: cg-click	stuff{ " on " }stuff.text: cg-click	'c cg-click.function put.down.function: cg-click;: EK-SCREEN.DRAW.FUNCTION	gr_small_text set.text.size	150 5700 scg.move " (revision 2/6/96) " gr.text	2800 5000 scg.move " Voice Behavior Probabilities " gr.text	750 6150 scg.move " pitch " gr.text	750 6400 scg.move " preset " gr.text;\ now build the screen5200 k: fader_y2800 k: fader_x175 k: fader_x_off3900 k: abs_y_pos4550 k: choose_y_pos450 k: y_start5200 k: bottom_grids_y_start: BUILD.EK-SCREEN.CONTROLS	'c ek-screen.draw.function put.draw.function: ek-screen	build.cg-players-on	build.cg-presets	build.cg-behaviors	build.cg-funds	build.cg-loudnesses	build.cg-densities	build.cg-fundhis	build.cg-fundlos	build.cg-bends	build.cg-controls	build.cg-steps	build.cg-staccs	build.cg-jitters\	build.cg-players-on-choose	build.cg-presets-choose	build.cg-behaviors-choose	build.cg-funds-choose	build.cg-loudnesses-choose	build.cg-bends-choose	build.cg-controls-choose	build.cg-steps-choose	build.cg-staccs-choose	build.cg-jitters-choose\	build.cg-start	build.cg-optimize-choose	build.cg-tempo	build.cg-preset-limit	build.cg-skip/step-prob	build.cg-time-advance	build.cg-#-repeats	build.cg-max-jitter	build.cg-controller-#	build.cg-density	build.cg-loud	build.cg-fund	build.cg-preset	build.cg-fundrange	build.cg-bend 	build.cg-control	build.cg-step	build.cg-jitter	build.cg-stacc\ parameter jitters	build.cg-fund-jitter	build.cg-loud-jitter\	build.cg-control-jitter\	build.cg-faders\	build.cg-click	build.cg-click-controls\ setup screen	60 3 new: ek-screen	0 scg.selnt	ek-screen default-screen !	101 put.key: ek-screen \ e chooses this screen	" Eine Kleine Computer [Gamelan] Music (Goode&Polansky) " Put.title: ek-screen	cg-start 200 bottom_grids_y_start 100 - add: ek-screen	cg-click 200 6000 add: ek-screen	cg-click-controls 500 6000 add: ek-screen\	cg-players-on 175 y_start add: ek-screen	cg-presets 550 y_start add: ek-screen	cg-behaviors 850 y_start add: ek-screen	cg-funds 1450 y_start add: ek-screen	cg-loudnesses 1750 y_start add: ek-screen	cg-densities 2050 y_start add: ek-screen	cg-fundlos 2350 y_start add: ek-screen	cg-fundhis 2650 y_start add: ek-screen	cg-bends 2950 y_start add: ek-screen	cg-controls 3250 y_start add: ek-screen	cg-steps 3550 y_start add: ek-screen	cg-staccs 3950 y_start add: ek-screen	cg-jitters 4250 y_start add: ek-screen\	cg-players-on-choose 175 choose_y_pos add: ek-screen	cg-presets-choose 550 choose_y_pos add: ek-screen	cg-behaviors-choose 850 choose_y_pos add: ek-screen	cg-funds-choose 1450 choose_y_pos add: ek-screen	cg-loudnesses-choose 1750 choose_y_pos add: ek-screen	cg-bends-choose 2950 choose_y_pos add: ek-screen	cg-controls-choose 3250 choose_y_pos add: ek-screen	cg-steps-choose 3550 choose_y_pos add: ek-screen	cg-staccs-choose 3950 choose_y_pos add: ek-screen	cg-jitters-choose 4250 choose_y_pos add: ek-screen	\ probability faders	cg-mel-prob fader_x fader_y add: ek-screen	cg-invert-prob fader_x fader_x_off + fader_y add: ek-screen	cg-sustain-prob fader_x fader_x_off 2* + fader_y add: ek-screen	cg-rhythm-prob fader_x fader_x_off  3 * + fader_y add: ek-screen	cg-highnote-prob fader_x fader_x_off  4 * + fader_y add: ek-screen	cg-lownote-prob fader_x fader_x_off 5 * + fader_y add: ek-screen	cg-lowhigh-prob fader_x fader_x_off 6 * + fader_y add: ek-screen	cg-accenthigh-prob fader_x fader_x_off 7 * + fader_y add: ek-screen	cg-accentlow-prob fader_x fader_x_off 8 * + fader_y add: ek-screen	cg-accentlowhigh-prob  fader_x fader_x_off 9 * + fader_y add: ek-screen	\ tempo	cg-tempo          	1350 bottom_grids_y_start add: ek-screen	cg-preset-limit   	1350 bottom_grids_y_start 400 + add: ek-screen	cg-skip/step-prob 	1350 bottom_grids_y_start 800 + add: ek-screen	cg-#-repeats	  	1350 bottom_grids_y_start 1200 + add: ek-screen	cg-controller-#   	1950 bottom_grids_y_start add: ek-screen	cg-max-jitter     	1950 bottom_grids_y_start 400 + add: ek-screen	cg-time-advance   	1950 bottom_grids_y_start 800 + add: ek-screen	cg-optimize-choose	1950 bottom_grids_y_start 1200 + add: ek-screen	\ absolute grids	cg-loud 1750 abs_y_pos add: ek-screen	cg-density 2050 abs_y_pos add: ek-screen	cg-fundrange 2350 abs_y_pos add: ek-screen	cg-bend 2950 abs_y_pos add: ek-screen	cg-control 3250 abs_y_pos add: ek-screen	cg-fund 1450 abs_y_pos add: ek-screen	cg-preset 550 abs_y_pos add: ek-screen	cg-step 3550 abs_y_pos add: ek-screen	cg-stacc 3950 abs_y_pos add: ek-screen	cg-jitter 4250 abs_y_pos add: ek-screen\ jitter grids		cg-fund-jitter 1450 abs_y_pos 400 + add: ek-screen	cg-loud-jitter 1750 abs_y_pos 400 + add: ek-screen\	cg-control-jitter 3250 abs_y_pos 400 + add: ek-screen;: INIT.EK-SCREEN	build.ek-screen.controls;: TERM.EK-SCREEN	freeall: ek-screen	free: ek-screen;if.forgotten term.ek-screen
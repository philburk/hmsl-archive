\ Objects for ekanew task-ek_objects: DISPLAY.REPEATS	12 gr.height!	3700 7500 scg.move	" Repeat: " gr.text 	coll-repeat-counter @ gr.number 	9 gr.height!;: CHOOSE.NEW.DATA	ek-choose.on \ make this first so that we can check to see if its on				 \ to optimize choosing...	ek-choose.midi-click	ek-choose.bend	ek-choose.behavior	ek-choose.loud	ek-choose.controls	ek-choose.funds	ek-choose.preset	ek-choose.shape	ek-choose.step	ek-choose.stacc	ek-choose.jitter;: EK-COLLECTION.START.FUNCTION { coll -- }	0 coll-repeat-counter !	time@ t-start-time !\	display.time	choose.new.data;	: EK-COLLECTION.REPEAT.FUNCTION { coll -- }	1 coll-repeat-counter +!	coll-repeat-counter @ ek-#-repeats @ mod	0= IF		choose.new.data	THEN\	display.time\	display.repeats;: EK-COLLECTION.STOP.FUNCTION { coll -- }	cr cr cr ." piece over " cr cr cr 	midi.alloff	midi.kill	midi.killall;: INIT.EK-COLLECTION	#_ek_channels new: ek-collection	1000 put.repeat: ek-collection	'c ek-collection.start.function put.start.function: ek-collection 	'c ek-collection.repeat.function put.repeat.function: ek-collection	'c EK-COLLECTION.STOP.FUNCTION put.stop.function: ek-collection	20 put.start.delay: ek-collection	;: EK-DUR.FUNCTION { element# shape | ind t-dur jitter-factor -- duration }	current.object get.data: [] 	player-jitters ed.at: ek-player-data	element# 0 shape ed.at: [] -> t-dur	t-dur 100 */ -> jitter-factor	t-dur jitter-factor	2 choose IF  - ELSE + THEN;: INIT.EK-PLAYERS { | curr-player -- }	#_ek_channels new: ek-player-list	#_ek_channels 0 	DO		instantiate ob.player		-> curr-player		curr-player add: ek-player-list \ this is only used for 16th one..., for click		1 curr-player new: []		curr-player play.on&off: []		\ this next line a hack at PASS 12/16/95 to fix duration problem		i player-staccs ed.at: ek-player-data 100 curr-player put.duty.cycle: []		'c ek-dur.function curr-player put.dur.function: []		curr-player add: ek-collection		i curr-player put.data: [] \ now they know who they are...	LOOP;\ the dimensionality of this player is important: change it when adding new variables: INIT.EK-PLAYER-DATA	#_ek_channels 17 new: ek-player-data	#_ek_channels 0 	DO		0 \ all off		#_ek_channels choose \ random preset		mel \ set them all to mel for now		90 30 wchoose \ fundamental		20 choose \ loudnesses go from one to 20		ek-density @ \ get globals for these...		ek-fund-lo @ 		ek-fund-hi @		100 choose \ bend value to start, 0->100		127 choose \ control value to start 0->127		12 choose choose 1 max 		\ player step value		dup 2* over 4 * swap wchoose		2 max \ skip value		100 choose \ stacc percentage		0 \ jitter percentage		0 0 0 \ fund, skip and step bends		add: ek-player-data	LOOP;: FILL.HISTOGRAM	0 0 ed.at: ek-behavior-histogram	0 1 ed.to: ek-behavior-histogram	many: ek-behavior-histogram 1	DO		i 1- 1 ed.at: ek-behavior-histogram		i 0 ed.at: ek-behavior-histogram		+		i 1 ed.to: ek-behavior-histogram	LOOP\	print: ek-behavior-histogram		;: GET.HISTOGRAM.SUM	0 calc.dim.stats: ek-behavior-histogram	0 get.dim.sum: ek-behavior-histogram	put.data: ek-behavior-histogram;: INIT.EK-BEHAVIOR-HISTOGRAM	10 2 new: ek-behavior-histogram	0 put.data: ek-behavior-histogram	stuff{ 60 2 30 2 10 2 20 0 5 0 5 0 5 0 5 0 5 0 5 0 }stuff: ek-behavior-histogram	fill.histogram	get.histogram.sum;	: INIT.EK-OBJECTS	init.ek-collection	init.ek-player-data	init.ek-players	init.ek-behavior-histogram;: TERM.EK-OBJECTS	freeall: ek-collection	free: ek-collection	free: ek-player-list	free: ek-player-data	free: ek-behavior-histogram;if.forgotten term.ek-objects
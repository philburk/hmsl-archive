\ ek_instruments fileanew task-ek_instruments\ pass this the loudness, the behavior, and the skip/step/fund value: CHOOSE.LOUDNESS { loud behav note-ind -- loud }	behav CASE		mel 			OF 	note-ind ek_fund = IF loud 7 + -> loud THEN						ENDOF		invert				OF 	note-ind ek_fund = IF loud 7 + -> loud THEN						ENDOF		sustain 		OF 	ENDOF		rhythm 			OF 	ENDOF		highnote 		OF	note-ind ek_skip = not							IF								0 -> loud							THEN						ENDOF		lownote			OF	note-ind ek_fund = not							IF								0 -> loud							THEN						ENDOF		lowhigh			OF	note-ind ek_fund = note-ind ek_skip = or not							IF								0 -> loud							THEN						ENDOF		accenthigh		OF	 note-ind ek_skip = 							IF								loud 25 + 127 min -> loud							ELSE	loud 20 - 0 max -> loud							THEN						ENDOF		accentlow		OF	 note-ind ek_fund = 							IF								loud 25 + 127 min -> loud							ELSE	loud 20 - 0 max -> loud							THEN						ENDOF		accentlowhigh	OF	 note-ind ek_fund = note-ind ek_skip = or							IF								loud 25 + 127 min -> loud							ELSE	loud 20 - 0 max -> loud							THEN						ENDOF		." Ilegal value for case loudness " dup . cr		ENDCASE		loud;: CHOOSE.PITCH { note-ind prev-note-ind behav ins-# | new-pitch stepsize skipsize total-int -- new-pitch }	note-ind 0=		IF			0 -> new-pitch		THEN	note-ind ek_fund =		IF 			ins-# at: ek-instruments get.offset: []  -> new-pitch 		THEN \ it's the fundamental	note-ind ek_skip =		IF 			ins-# player-skips ed.at: ek-player-data 			-> skipsize \ get skip size			prev-note-ind ek_fund = not			IF				ins-# player-steps ed.at: ek-player-data				skipsize + -> total-int			ELSE				skipsize -> total-int			THEN			behav invert =				IF 		ins-# at: ek-instruments get.offset: [] total-int - 				ELSE 	ins-# at: ek-instruments get.offset: [] total-int + 				THEN \ only subtract if invert behavior			-> new-pitch		THEN	note-ind ek_step =		IF 			ins-# player-steps ed.at: ek-player-data \ get step size			-> stepsize \ get step size			prev-note-ind ek_fund = not			IF				ins-# player-skips ed.at: ek-player-data				stepsize + -> total-int			ELSE				stepsize -> total-int			THEN			behav invert =				IF 		ins-# at: ek-instruments get.offset: [] total-int - 				ELSE 	ins-# at: ek-instruments get.offset: [] total-int + 				THEN \ only subtract if invert behavior			-> new-pitch		THEN	new-pitch;			\ three prestored bend values depending on fund, skip, or step\ these get computed at beginning of cycle for each voice..: CHOOSE.BEND { note-ind ins-#  -- bend }	note-ind ek_fund =		IF 			ins-# player-fund-bends ed.at: ek-player-data		THEN \ it's the fundamental	note-ind ek_skip =		IF 			ins-# player-skip-bends ed.at: ek-player-data		THEN \ it's the fundamental	note-ind ek_step =		IF 			ins-# player-step-bends ed.at: ek-player-data		THEN \ it's the fundamental;			: CHOOSE.CONTROL { ins-#  -- control }	ins-# player-controls ed.at: ek-player-data	choose;				: EK-INSTRUMENT.ON.FUNCTION { el shape ins | ins-# behav note-ind prev-note-ind t-loud -- }	ins get.channel: [] 1-	-> ins-#	ins-# player-behaviors ed.at: ek-player-data 	-> behav	ins-#  players-on? ed.at: ek-player-data	IF		\ turn off note		ins-# 1+ midi.channel!		midi.lastoff		\ calculate pitch from shape		el 1 shape ed.at: []		-> note-ind \ this is either a fund, step or skip		el 0= 		\ if it's the first note in the shape, set the previous to fun		IF			ek_fund -> prev-note-ind		ELSE		\ if not, we need to store the previous type of note for calculation					\ in choose pitch			el 1- 1 shape ed.at: []			-> prev-note-ind		THEN		note-ind prev-note-ind behav ins-# 		choose.pitch ( -- new-pitch )		\ calculate loudness		ins-#  player-loudnesses ed.at: ek-player-data		-> t-loud 		el 2 shape ed.at: []		0= not		IF			6 t-loud *			dup 20 -			wchoose			0 127 clipto			-> t-loud			\ now pass this loudness and other needed parameters to the loudness.chooser			t-loud behav note-ind choose.loudness \ ( -- loudness )			-> t-loud		ELSE			0 -> t-loud \ if the note is 0 don't play any loudness...		THEN		\ play the note		t-loud \		2dup . .  ( diagnostic to see if funds getting sent out... )		midi.noteon		\ now choose a bend value from the ranges..		note-ind ins-# choose.bend 		midi.bend		ins-# player-behaviors ed.at: ek-player-data		rhythm =		IF			ek-controller-# 0		ELSE			ek-controller-# @ ins-# choose.control		THEN		 midi.control	THEN;: EK-INSTRUMENT.OFF.FUNCTION { el shape ins -- }	ins get.channel: []	midi.channel!	midi.lastoff;: INIT.EK-INSTRUMENT-LIST { | curr-ins -- }	#_ek_channels new: ek-instruments	#_ek_channels 0 	DO		instantiate ob.midi.instrument		-> curr-ins		curr-ins i at: ek-collection		put.instrument: []		curr-ins add: ek-instruments\ index the appropriate instrument by channel (-1)		'c ek-instrument.on.function curr-ins put.on.function: []		'c ek-instrument.off.function curr-ins put.off.function: []		i 1+ curr-ins put.channel: []\ fundamental is stored in offset		i player-funds ed.at: ek-player-data 		curr-ins put.offset: []\ preset is stored in instrument preset	i player-presets ed.at: ek-player-data		curr-ins put.preset: []					LOOP;: INIT.EK-INSTRUMENTS	init.ek-instrument-list;: TERM.EK-INSTRUMENTS	freeall: ek-instruments	free: ek-instruments;if.forgotten term.ek-instruments
\ Interval Weight Functions\ for metric calculations\ lp 8/93anew task-interval_weight_functions\ These functions must all take an argument (either i, or j) and a length\ used for scaling. The length is passed automatically by the internal function.\ and return a floating point scalar which is used to\ scale the interval. That is duplicated by the instance function\ of the metric itself, where the summing of the weights is done.\ Generally, these functions should not be passed a zero index, that massaging should be \ done in the metric or mutation code themselves... That's because you don't want to divide\ or multiply by zero in the functions themselfs...\ For protocol, these functions should be called \ MW.Something\ for Metric Weight. This is just to distinguish them from other\ HMSL stuff. 	: MW.UNITY { ind length -- f.scale }	1.0 ;: MW.1/i { ind length -- 1/i }	1.0 ind	 float f/ 	;: MW.1/i^^2 { ind length -- 1/i }	1.0 ind float fdup f* f/ ;: MW.1-1/i { ind length -- y }	1.0 ind length mw.1/i f-;: MW.1-1/i^^2 { ind length -- y }	1.0 ind length mw.1/i^^2	f-;\ a standard normal or gaussian with max at l-2 and mins at 0 and l\ values can get very small...: MW.GAUSSIAN.UNSCALED { ind length -- }	1.0	pi 2.0 f*	fsqrt ( -- sqrt2pi )	f/ 	exp ( -- 1/sqrt2pi e )	ind float length float 2.0  f/ f- 	fdup f* ( ind squared)	.5 f*	-1.0 f*	f**	f*	f.round.to.zero;\ returns max of unscaled gaussian: MW.GAUSSIAN.MAX { ind length -- }	length 2/ length mw.gaussian.unscaled	( -- fmax )		f.round.to.zero;\ gaussian above scaled to be between 0-1: MW.GAUSSIAN.SCALED { ind length -- }		ind length mw.gaussian.unscaled	ind length mw.gaussian.max	f/\	10000.0 f*	f.round.to.zero;		\ maxes at 0 and l, min at l-2, scaled..: MW.INVERSE.GAUSSIAN.SCALED { ind length -- }	1.0 	ind length mw.gaussian.scaled	f-	f.round.to.zero;
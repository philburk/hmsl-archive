\ all things objects...\ string quartet\ big difference in this piece is the first distribution, which has a common\ centeranew task-all_things_objects\ arrays and objects, distributions\ pitch distributionsob.array p-dist-uniformob.array p-dist-triangleob.array p-dist-harm\ an array to help set up a harmonic series distributionob.array harm-int-array\ this array keeps track of the actual probablities,\ the result of the stats and ideal probabilities...\ it is updated for every note, by adding or subtracting from the\ distribution array\ it's normalized to 1000ob.array p-dist-adjusted\ simple duration distributionob.array d-dist-uniform\ cross-faded distributionob.array p-mixed-dist\ statisticsob.array p-statsob.array d-statsob.objlist p-dist-array\ main melody shapeob.shape piece-shape\ play midiob.player all_things-player\ all distribution arrays sum to 1000\ triangle has highest probability in middle of array\ general utility for normalizing all arrays to 1000: NORMALIZE.ARRAY { temp-array | temp-sum -- }	0 -> temp-sum	pitch_range 0 DO		i temp-array at: []		temp-sum + -> temp-sum	LOOP	pitch_range 0 DO		i temp-array at: []		1000 temp-sum */		i temp-array to: []	LOOP;\ harmonic numbers 1-17\ c harmonic series, based on lowest note in cello and viola, but different for violins...\ but, one distribution, all add to lowest cello note...: INIT.P-DIST-HARM { | harm-# harm-prob -- }	cr 	#_harmonics new: harm-int-array	cello what-instrument @ =	IF		stuff{			0 			12 19 			24 28 31 34 			36 38 40 42 43 43 43 43			43 43		}stuff: harm-int-array	THEN	viola what-instrument @ =	\ starting an octave higher, on the second harmonic	IF		stuff{			0  7 5 16 19 22			24 26 28 30 31 32 34 35			36 37 37		}stuff: harm-int-array	THEN	violin what-instrument @ =	\ starting an octave and a fifth higher, on the third harmonic	IF		stuff{			0   \ low g (3)			5 \ c (4)			9 12 15  \ ( 5,6,7 )			17 19 21 23 24 25 27 28 \ ( C, d, e, f#, g, Ab, bb, b )			29 30 30 30 \ (c, c#  C#)		}stuff: harm-int-array	THEN	." harmonic array stuffed " cr	\ stuff probabilities	#_harmonics 0 	DO				#_harmonics i - ( probability )		 	( don't square off probs. for violin two, which will have higher harmonics )			( violin 2 is just a flag, everything else is same as violin 1 )			violin2? @ not			IF				dup * ( -- prob-squared )			THEN			-> harm-prob 			i at: harm-int-array ( -- harm-# )			dup .			-> harm-# \ exit with one harmonic number and 			harm-prob			harm-# to: p-dist-harm	LOOP		." harmonic array initialized " 	;		: TEST.HARMONIC.SERIES	#_harmonics 0 DO		i at: harm-int-array		.	LOOP;: INITIALIZE.TRIANGLE.AND.UNIFORM 	\ initialize triangle	\ this is special in string quartet, because range is set to be the same for	\ all instruments so that the beginning triangle distribution can start around the common middle.... not	\ true for the uniform, which uses, the three individual ranges	pitch_range 0 DO		\ uniform distribution		1000 pitch_range / i to: p-dist-uniform		\ triangle distribution is odd in this piece, because they all share the same range, so some		\ kluging has to be done...		\ first, make the range constant for all four instruments		 pitch_range  2/ ( -- half-range ) 		 pitch_range 2/ i - ( -- half-range half-range-i )		abs -		dup dup dup dup * * * * ( to the fourth it to make the range more exaggerated ) ( -- probability )		\ now put a big spike in the middle only for this distribution		i pitch_range 2/ - abs 2 <		IF			100000 +		THEN		 i midpoint-offset @ -		0 pitch_range 1- clipto		to: p-dist-triangle	LOOP	." initialized triangle and uniform " cr	;: FILL.ALL_THINGS_OBJECTS { | temp-sum temp-sum2 temp-index -- } 	2000 5 new: piece-shape ." shape initialized " cr	\ 4th dimension is keeping track of current-time	\ 5th is section #	#_sections 1+  new: p-dist-array \ three distributions, two sections	p-dist-triangle add: p-dist-array	p-dist-harm add: p-dist-array	p-dist-uniform add: p-dist-array	pitch_range new: p-dist-uniform	pitch_range new: p-dist-triangle	pitch_range new: p-dist-harm		pitch_range new: p-dist-adjusted	pitch_range new: p-stats	init.p-dist-harm	number_durations new: d-dist-uniform	number_durations  new: d-stats	number_durations 0 DO		i i to: d-dist-uniform	LOOP;: NORMALIZE.DISTRIBUTIONS	p-dist-triangle normalize.array	p-dist-harm normalize.array	\ uniform is already normalized by definition;: FILL.ADJUSTED.ARRAY 	pitch_range 0 DO		i curr-dist @ at: [] 		i to: p-dist-adjusted	LOOP;: CLEAR.STATS	pitch_range 0 DO		0 i to:  p-stats	LOOP;: INIT.ALL_THINGS_OBJECTS	fill.all_things_objects ." filled " 	." about to initialize triangle and uniform " cr	initialize.triangle.and.uniform	normalize.distributions ." normalized "	clear.stats ." cleared ";
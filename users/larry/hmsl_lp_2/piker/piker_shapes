\ piker, fouth movement....\ hop up and jump up streaming\ lp 11/16/97anew task-piker_shapesob.shape p-shape   \ piker shape, full of noiseob.shape s-shape    \ source shape just tune infoob.shape r-shape    \ resultant shapeob.player r-player5 k: #_repeats8 4 4 2  * * * k: melody_lengthmelody_length #_repeats * k: out_length\ source melody initialization84 k: source_length \ length of source melody2 k: source_width \ pitch and duration in 16th notes...\ master melody initialization5 k: melody_width \ duration, pitch, is-melody?\ constant names for master shape dimensions0 k: duration1 k: pitch2 k: melody_note?3 k: melody_note4 k: melody_duration\ miscellaneous variablesv: silence-probv: piece-counter6 k: #_ticks4 #_ticks * ticks/beat !\ the smaller this number, the larger the silence prob20 k: silence_scalar86 k: high_note62 k: low_note86 62 + 2/ k: center_note0 k: melody_range4 k: noise_band\ durations are in numbers of 16th notes at 4/4\ but easier to enter the score from 2/4, so they're doubled at end\ each line is a different measure, entered in c, will be transposed later..: FILL.S-SHAPE	stuff{	\ A1	72 2 72 1 72 1 67 2 67 1 67 1	64 2 60 2 64 2 67 2	72 1 72 1 72 2 67 1 67 1 67 2	64 2 67 2 62 2 60 2	\ A2	72 2 72 1 72 1 67 2 67 1 67 1	64 2 60 2 64 2 67 2	72 1 72 1 72 2 67 1 67 1 67 2	64 2 67 2 62 2 60 2	\ B1	64 1 67 1 67 2 64 1 64 1 60 2	72 1 72 1 72 1 72 1 69 2 67 2	72 2 72 1 72 1 67 2 67 2	64 1 67 1 67 2 62 2 60 2	\ B1	64 1 67 1 67 2 64 1 64 1 60 2	72 1 72 1 72 1 72 1 69 2 67 2	72 2 72 1 72 1 67 2 67 2	64 1 67 1 67 2 62 2 60 2	}stuff: s-shape	\ transpose to key of G	7 0 source_length 1- 0 transpose: s-shape	\ multiply lengths by two to make it a kind of virtual 4/4	 source_length 0 DO		i 1 ed.at: s-shape		2*		i 1 ed.to: s-shape	LOOP;v: running-index: ADD.SOURCE.TO.MELODY 	0  running-index !	source_length  0 DO		\ put actual melody notes in p-shape		i 0 ed.at: s-shape		running-index @ melody_note ed.to: p-shape		1 running-index @ melody_note? ed.to: p-shape		\ increment place in p-shape		i 1 ed.at: s-shape		dup running-index @ melody_duration ed.to: p-shape		running-index @		+		running-index !	LOOP	;: R-PLAYER.DUR.FUNCTION { el sh -- }	el 0 sh ed.at: []	#_ticks *;	: INIT.R-PLAYER	1 new: r-player	r-shape add: r-player	ins-midi-1 put.instrument: r-player	0 put.offset: ins-midi-1	'c r-player.dur.function put.dur.function: r-player;: INIT.P-SHAPES	source_length source_width new: s-shape \ source melody	melody_length melody_width new: p-shape  \ master shape for computation	out_length 3 new: r-shape \ output melody shape	\ fill p-shape	\ duration pitch melody-flag melody-note	melody_length 0 DO		1 \ each note has a 16th duration		center_note \ start all notes in center of range		0 0 1 \ initialized to not a melody, 0 melody note, duration of one		add: p-shape	LOOP	out_length 0 DO			1 center_note 30 add: r-shape	LOOP	;
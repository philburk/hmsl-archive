\ 51 harmonies, live version\ object instantiationanew task-51_live_objectsob.objlist	collection-list \ a list of the 51 sectionsob.objlist shape-listob.shape collection-lengths	\ the number of shapes in each collection, or sectionob.shape shape-lengths \ length of each shape for each collection; simple listob.shape note-list \ just a sequential list of the notes in the piece: INIT.SHAPE-LENGTHS	300 1 new: shape-lengths \ one set of shape lengths for each collection	stuff{ 	5 5 1 3 3 6 4 2	4 6 2 2 2 2 1 3 1 3 	5 2 2 4 6 1	4 2 7 1 2 2 2 1	5 2 2 2 2 2 2 1 1		7 5 2 1 \ page 3	2 2 2 2 3 1 2 2 2	8 8 6 6 1	4 3 4 3 4 2 5 1 \ page 4	9 5 4 8 9 	3 5 2 2 2 2 4 3		2 2 3 3 4 2 3 1 \ page 5	2 2 1 1 3 2 1	8 7 9 1 4 3 3		3 2 1 3 3 \ page 6	8 1	2 3 5 4 4 2		6 8 1 3 3 \ page 7	5 2 1 8 1	2 5 4 2		6 3 6 1 5 3 \ page 8	5 2 1 4 1	3 2 1 3 3 2 3 3 1		3 4 7 1 \ page 9	6 2 3 3 5 1 6 1	5 2 8		4 2 7 7 4 4 \ page 10	4 2 2 2 3 2 2 2	3 3 3 4		7 6 1 4 2 \ page 11	4 3 3 3 4 2	5 2 3 3 5 1		3 2 1 6 4 2 5		}stuff: shape-lengths;		: INIT.COLLECTION-LENGTHS	51 1 new: collection-lengths	stuff{ 1 2 2 1 2		   3 4 3				   2 4 		   8		   5 4				   4 \ page 3 of score, #13		   9		   3 2				   8 \ page 4 of score		   5 		   2 3 3 				   8 \ page 5 of score		   7		   7				   7 \ page 5 of score	       6		       5 \ page 6 of score	       3 2	       4			   6 \ page 8 of score		   5			   9				   4  \ page 9 of score		   8		   3				   6 \ page 10 of score		   8		   4				   3 2 \ page 11 of score		   4 2		   2 2 2				   3 1 2 1 \ page 12 of score	}stuff: collection-lengths;: INIT.NOTE-LIST\	0 calc.dim.stats: shape-lengths\	0 get.dim.sum: shape-lengths dup .	677 1 new: note-list	stuff{	c e g bb d		c e g b d  	a		c e g	f# ab c#		g b d# f# ab c  g b d f   c# eb	g b d bb	c# e g bb d b	c# e	d ab	e b	g bb	a	d f ab	a	e bb g		d f a c# a#	 b f#	ab c	f# a c# a#	b d f ab b f#	e	a c# eb gb		d f		c eb c# a f# d f	c	a c#	bb d	b g	c	a c eb g# e		f bb	a e	bb f	ab eb	e b		f# c# 	d 	eb		e g b db f# d# f		e g b db bb		ab eb	a	e b		d f		c# eb	e b 	db f d		eb		e b		eb c#		f d	g b d# f a c# e eb		g b d f# a f ab e	g bb d f a f#	ab b d f a f#	e		ab c# a f# 	g bb d		ab c a f# 	g bb db		ab b d f#	e g		ab f d f# a		e	d f ab c eb gb e c# a		d f# a c# e		f eb c ab		d bb g eb c ab f db														d f a c# e gb eb c ab	e g# b 	a c eb c# a#		eb bb		d f		c# e	a e	eb b g bb		f ab f#																							\ page 5	ab f  a f#  bb g eb		ab f a		eb g bb gb		ab c 	f# a c#		g	c# eb		d a		bb	c		c# a c		eb bb		d	f a c# e g b d# f#		f ab c# eb gb b d#		f a c eb g# b d bb g		d													f d bb db 	a c ab		g eb gb	\ page 6	f# ab c 	d f 	g		f# d f   c e g	f# d f ab c eb g bb		e	f ab		d# f# a		e g bb d b		f ab c eb		g b d f#		c# e		\ page 7	b db f ab c a		b db f a c eb g bb	 ab  b db bb	a c eb	b d f a c		ab eb  	bb  	b d# f# a# c a f d		c#	f a		e g b d# f#		f a f# d#		e b		\ page 8	f# a c eb gb e		d f ab		f# a# c eb g bb		f		f# d bb g e		f ab c	e g bb d f#		f ab		e		d f# a f	eb	b db f		a c		g		b d f#		ab c# e		eb g		b d f		c# a c		g		\ page 9	b d bb   ab c eb c#		b d f# a c ab f		bb	b d f a c ab		bb db		b db bb 		f a c		b db f a c		bb																b d f a c# a# 		c	ab f d bb g 	a c#		ab c e g bb d b gb		\ page 10	ab c e g		bb f		ab c eb g bb d f#		ab c eb f# d bb g		ab cb a f#																					g bb db f	ab cb eb g 		f# a		ab eb		f# a		e g bb		ab f		a f#		g eb	d f# a		e g bb		d f# a		e b g bb	\ page 11	d f ab c eb g b		d f# ab c# e c 		g	d f# a f		e g	g bb db f#		g# e c		g bb gb		e g# b		g b db bb		c eb	g bb d f# a		ab cb		c e gb	a c# ab		c e g bb gb		f	\ page 12	c e g#		a f#		g		f a c# e c ab		f ab c eb		bb d		f a c ab e		c \ phantom last note just to correct mistake for now	}stuff: note-list;	: INIT.COLLECTION-LIST { | coll -- }	51  new: collection-list	51 0 DO		instantiate ob.collection		-> coll		i at: collection-lengths		coll new: []		coll act.sequential: []		coll add: collection-list	LOOP;: INIT.SHAPES { | coll ptr length curr-shape idx #-shapes -- }	#-of-shapes new: shape-list	0 -> idx	0 -> ptr	0 -> length	51 0 DO	." . "		i at: collection-list -> coll		i at: collection-lengths -> #-shapes		#-shapes 0 DO			instantiate ob.shape			-> curr-shape			idx at: shape-lengths -> length 			length 1 curr-shape new: []			\ this gives the shape an index in the collection			\ so that players can query a shape later on and find out which one			\ it is in their particular list			i curr-shape put.data: []			length 0 DO				length curr-shape set.many: []				ptr i + at: note-list 				i curr-shape  put: []			LOOP			ptr length + -> ptr 			idx 1 + -> idx 			curr-shape coll add: []			curr-shape shape-list add: []		LOOP	LOOP	cr;: CALC.STATS	cr	0 calc.dim.stats: collection-lengths	0 get.dim.sum: collection-lengths dup -> #-of-shapes	." #-of shapes = " . cr	0 calc.dim.stats: shape-lengths	0 get.dim.sum: shape-lengths dup -> #-of-notes	." #-of notes = " . cr;	: PRINT.SHAPE { shape-# -- }	shape-# #-of-shapes <	IF		shape-# at: shape-list		print: []	ELSE		." shape index too large "	THEN;: INIT.51-LIVE-OBJECTS { | temp-sum -- }	init.collection-lengths	init.shape-lengths	init.note-list	init.collection-list	init.shapes	calc.stats;: TERM.51-LIVE-OBJECTS	freeall: collection-list	free: collection-list	free: collection-lengths	free: shape-lengths	free: note-list;if.forgotten term.51-live-objects
\ amb screenanew task-amb_screen380 k: grid_height250 k: grid_width\ constants for putting stuff on screens	400 k: grid_x_inc800 k: grid_y_top	2600 k: y_bottom900 k: grid_x_home: CG-TEMPO.FUNCTION { val part -- }	val amb-tempo !	val rtc.rate!;: BUILD.CG-TEMPO	 1  1  new: CG-TEMPO	grid_width grid_height put.wh: CG-TEMPO	14 put.text.size: CG-TEMPO	" tempo " put.title: CG-TEMPO	320 0 put.max: cg-TEMPO	20 0 put.min: cg-tempo	60 0 put.value: cg-tempo	'c CG-TEMPO.FUNCTION  put.down.function: CG-TEMPO	'c CG-TEMPO.FUNCTION  put.move.function: CG-TEMPO	'c CG-TEMPO.FUNCTION  put.up.function: CG-TEMPO;: CG-AMB-JOB-ON.FUNCTION { val part | curr-job -- }	part at: amb-jobs -> curr-job	val IF		 	curr-job start: [] 	ELSE 			curr-job stop: []	THEN;: BUILD.CG-AMB-JOB-ON	1 #_amb_jobs new: cg-amb-job-on	grid_width 2* 100 + grid_height put.wh: cg-amb-job-on	13 put.text.size: cg-amb-job-on	" CRITTERS " put.title: cg-amb-job-on	stuff{ " critter 1 " " critter 2 " " critter 3 " " critter 4 "	 }stuff.text: cg-amb-job-on	'c cg-amb-job-on.FUNCTION put.down.function: cg-amb-job-on	;: CG-AMB-SYNC.FUNCTION { val part  -- }		4 0 DO			i at: amb-jobs 			val IF start: [] ELSE stop: [] THEN			val i put.value: cg-amb-job-on		LOOP;: BUILD.CG-AMB-SYNC	1 1 new: cg-amb-sync	grid_width grid_height put.wh: cg-amb-sync	14 put.text.size: cg-amb-sync	"  " put.title: cg-amb-sync	stuff{ " all " }stuff.text: cg-amb-sync	'c cg-amb-sync.function put.down.function: cg-amb-sync;\ loudness numeric: CG-AMB-LOUDNESS.FUNCTION { val part | curr-job -- }	val part loudness ed.to: amb-job-data;: BUILD.CG-AMB-LOUDNESS	 1  #_amb_jobs  new: CG-AMB-LOUDNESS	grid_width grid_height put.wh: CG-AMB-LOUDNESS	14 put.text.size: CG-AMB-LOUDNESS	" loud " put.title: CG-AMB-LOUDNESS	127 -1 put.max: cg-amb-loudness	0 -1 put.min: cg-amb-loudness	'c CG-AMB-LOUDNESS.FUNCTION  put.down.function: CG-AMB-LOUDNESS	'c CG-AMB-LOUDNESS.FUNCTION  put.move.function: CG-AMB-LOUDNESS	'c CG-AMB-LOUDNESS.FUNCTION  put.up.function: CG-AMB-LOUDNESS	;\ loudness numeric: CG-AMB-LOUDNESSES.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i loudness ed.to: amb-job-data		val i put.value: cg-amb-loudness	LOOP;: BUILD.CG-AMB-LOUDNESSES	 1  1  new: CG-AMB-LOUDNESSES	grid_width grid_height put.wh: CG-AMB-LOUDNESSES	14 put.text.size: CG-AMB-LOUDNESSES	" all " put.title: CG-AMB-LOUDNESSES	127 -1 put.max: CG-AMB-LOUDNESSES	0 -1 put.min: CG-AMB-LOUDNESSES	60 0 put.value: cg-amb-loudnesses	#_amb_jobs 0 DO		i loudness ed.at: amb-job-data		i put.value: cg-amb-loudness	LOOP	'c CG-AMB-LOUDNESSES.FUNCTION  put.down.function: CG-AMB-LOUDNESSES	'c CG-AMB-LOUDNESSES.FUNCTION  put.move.function: CG-AMB-LOUDNESSES	'c CG-AMB-LOUDNESSES.FUNCTION  put.up.function: CG-AMB-LOUDNESSES	;\ preset numeric: CG-AMB-PRESET.FUNCTION { val part | curr-job -- }	val part preset ed.to: amb-job-data	part 1+ midi.channel!	val midi.preset;: BUILD.CG-AMB-PRESET	 1 #_amb_jobs  new: CG-AMB-PRESET	grid_width grid_height put.wh: CG-AMB-PRESET	14 put.text.size: CG-AMB-PRESET	" sound " put.title: CG-AMB-PRESET	#_amb_jobs 0 DO		20 i put.value: cg-amb-preset	LOOP	128 -1 put.max: CG-AMB-PRESET	0 -1 put.min: CG-AMB-PRESET	'c CG-AMB-PRESET.FUNCTION  put.down.function: CG-AMB-PRESET	'c CG-AMB-PRESET.FUNCTION  put.move.function: CG-AMB-PRESET	'c CG-AMB-PRESET.FUNCTION  put.up.function: CG-AMB-PRESET	;\ preset global: CG-AMB-PRESETS.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i preset ed.to: amb-job-data		val i put.value: cg-amb-preset		i 1+ midi.channel!		val midi.preset	LOOP;: BUILD.CG-AMB-PRESETS	 1  1  new: CG-AMB-PRESETS	grid_width grid_height put.wh: CG-AMB-PRESETS	14 put.text.size: CG-AMB-PRESETS	" all " put.title: CG-AMB-PRESETS	128 -1 put.max: CG-AMB-PRESETS	0 -1 put.min: CG-AMB-PRESETS	20 0 put.value: CG-AMB-PRESETS	#_amb_jobs 0 DO		i preset ed.at: amb-job-data		i put.value: cg-amb-preset	LOOP	'c CG-AMB-PRESETS.FUNCTION  put.down.function: CG-AMB-PRESETS	'c CG-AMB-PRESETS.FUNCTION  put.move.function: CG-AMB-PRESETS	'c CG-AMB-PRESETS.FUNCTION  put.up.function: CG-AMB-PRESETS	;\ pitch numeric: CG-AMB-PITCH.FUNCTION { val part | curr-job -- }	val part pitch ed.to: amb-job-data;: BUILD.CG-AMB-PITCH	 1 #_amb_jobs  new: CG-AMB-PITCH	grid_width grid_height put.wh: CG-AMB-PITCH	14 put.text.size: CG-AMB-PITCH	" pitch " put.title: CG-AMB-PITCH	60 1 put.value: CG-AMB-PITCH	127 -1 put.max: CG-AMB-PITCH	0 -1 put.min: CG-AMB-PITCH	'c CG-AMB-PITCH.FUNCTION  put.down.function: CG-AMB-PITCH	'c CG-AMB-PITCH.FUNCTION  put.move.function: CG-AMB-PITCH	'c CG-AMB-PITCH.FUNCTION  put.up.function: CG-AMB-PITCH	;\ pitch global: CG-AMB-PITCHES.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i pitch ed.to: amb-job-data		val i put.value: cg-amb-pitch	LOOP;: BUILD.CG-AMB-PITCHES	 1  1  new: CG-AMB-PITCHES	grid_width grid_height put.wh: CG-AMB-PITCHES	14 put.text.size: CG-AMB-PITCHES	" all " put.title: CG-AMB-PITCHES	127 -1 put.max: CG-AMB-PITCHES	1 -1 put.min: CG-AMB-PITCHES	60 0 put.value: CG-AMB-PITCHES	#_amb_jobs 0 DO		i pitch ed.at: amb-job-data		i put.value: cg-amb-pitch	LOOP	'c CG-AMB-PITCHES.FUNCTION  put.down.function: CG-AMB-PITCHES	'c CG-AMB-PITCHES.FUNCTION  put.move.function: CG-AMB-PITCHES	'c CG-AMB-PITCHES.FUNCTION  put.up.function: CG-AMB-PITCHES	;\ pitch range numeric: CG-AMB-PITCH-RANGE.FUNCTION { val part | curr-job -- }	val part pitch-range ed.to: amb-job-data;: BUILD.CG-AMB-PITCH-RANGE	 1 #_amb_jobs  new: CG-AMB-PITCH-RANGE	grid_width grid_height put.wh: CG-AMB-PITCH-RANGE	14 put.text.size: CG-AMB-PITCH-RANGE	" range " put.title: CG-AMB-PITCH-RANGE	12 1 put.value: CG-AMB-PITCH-RANGE	24 -1 put.max: CG-AMB-PITCH-RANGE	0 -1 put.min: CG-AMB-PITCH-RANGE	'c CG-AMB-PITCH-RANGE.FUNCTION  put.down.function: CG-AMB-PITCH-RANGE	'c CG-AMB-PITCH-RANGE.FUNCTION  put.move.function: CG-AMB-PITCH-RANGE	'c CG-AMB-PITCH-RANGE.FUNCTION  put.up.function: CG-AMB-PITCH-RANGE	;\ pitch range global: CG-AMB-PITCH-RANGES.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i pitch-range ed.to: amb-job-data		val i put.value: cg-amb-pitch-range	LOOP;: BUILD.CG-AMB-PITCH-RANGES	 1  1  new: CG-AMB-PITCH-RANGES	grid_width grid_height put.wh: CG-AMB-PITCH-RANGES	14 put.text.size: CG-AMB-PITCH-RANGES	" all " put.title: CG-AMB-PITCH-RANGES	24 -1 put.max: CG-AMB-PITCH-RANGES	0 -1 put.min: CG-AMB-PITCH-RANGES	0 0 put.value: CG-AMB-PITCH-RANGES	#_amb_jobs 0 DO		i pitch-range ed.at: amb-job-data		i put.value: cg-amb-pitch-range	LOOP	'c CG-AMB-PITCH-RANGES.FUNCTION  put.down.function: CG-AMB-PITCH-RANGES	'c CG-AMB-PITCH-RANGES.FUNCTION  put.move.function: CG-AMB-PITCH-RANGES	'c CG-AMB-PITCH-RANGES.FUNCTION  put.up.function: CG-AMB-PITCH-RANGES	;\ duration numeric: CG-AMB-DURATION.FUNCTION { val part | curr-job -- }	val part duration ed.to: amb-job-data;: BUILD.CG-AMB-DURATION	1 #_amb_jobs  new: CG-AMB-DURATION	grid_width grid_height put.wh: CG-AMB-DURATION	14 put.text.size: CG-AMB-DURATION	" pulse " put.title: CG-AMB-DURATION	60  1 put.value: CG-AMB-DURATION	60 0 put.value: cg-amb-duration	300 -1 put.max: CG-AMB-DURATION	4   -1 put.min: CG-AMB-DURATION	'c CG-AMB-DURATION.FUNCTION  put.down.function: CG-AMB-DURATION	'c CG-AMB-DURATION.FUNCTION  put.move.function: CG-AMB-DURATION	'c CG-AMB-DURATION.FUNCTION  put.up.function: CG-AMB-DURATION	;\ duration global: CG-AMB-DURATIONS.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i duration ed.to: amb-job-data		val i put.value: cg-amb-duration	LOOP;: BUILD.CG-AMB-DURATIONS	 1  1  new: CG-AMB-DURATIONS	grid_width grid_height put.wh: CG-AMB-DURATIONS	14 put.text.size: CG-AMB-DURATIONS	" all " put.title: CG-AMB-DURATIONS	300 -1 put.max: CG-AMB-DURATIONS	4 -1 put.min: CG-AMB-DURATIONS	60 0 put.value: CG-AMB-DURATIONS	#_amb_jobs 0 DO		i  duration ed.at: amb-job-data		i put.value: cg-amb-duration	LOOP	'c CG-AMB-DURATIONS.FUNCTION  put.down.function: CG-AMB-DURATIONS	'c CG-AMB-DURATIONS.FUNCTION  put.move.function: CG-AMB-DURATIONS	'c CG-AMB-DURATIONS.FUNCTION  put.up.function: CG-AMB-DURATIONS	;\ duration range numeric: CG-AMB-DURATION-RANGE.FUNCTION { val part | curr-job -- }	val part pulse ed.to: amb-job-data;: BUILD.CG-AMB-DURATION-RANGE	 1 #_amb_jobs  new: CG-AMB-DURATION-RANGE	grid_width grid_height put.wh: CG-AMB-DURATION-RANGE	14 put.text.size: CG-AMB-DURATION-RANGE	" rhy " put.title: CG-AMB-DURATION-RANGE	100 -1 put.max: CG-AMB-DURATION-RANGE	0 -1 put.min: CG-AMB-DURATION-RANGE	#_amb_jobs 0 DO		0 i put.value: cg-amb-duration-range	LOOP	'c CG-AMB-DURATION-RANGE.FUNCTION  put.down.function: CG-AMB-DURATION-RANGE	'c CG-AMB-DURATION-RANGE.FUNCTION  put.move.function: CG-AMB-DURATION-RANGE	'c CG-AMB-DURATION-RANGE.FUNCTION  put.up.function: CG-AMB-DURATION-RANGE	;\ duration range global: CG-AMB-DURATION-RANGES.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i duration-range ed.to: amb-job-data		val i put.value: cg-amb-duration-range	LOOP;: BUILD.CG-AMB-DURATION-RANGES	 1  1  new: CG-AMB-DURATION-RANGES	grid_width grid_height put.wh: CG-AMB-DURATION-RANGES	14 put.text.size: CG-AMB-DURATION-RANGES	" all " put.title: CG-AMB-DURATION-RANGES	100 -1 put.max: CG-AMB-DURATION-RANGES	0 -1 put.min: CG-AMB-DURATION-RANGES	#_amb_jobs 0 DO		i  duration-range ed.at: amb-job-data		i put.value: cg-amb-duration-range	LOOP	'c CG-AMB-DURATION-RANGES.FUNCTION   put.down.function: CG-AMB-DURATION-RANGES	'c CG-AMB-DURATION-RANGES.FUNCTION   put.move.function: CG-AMB-DURATION-RANGES	'c CG-AMB-DURATION-RANGES.FUNCTION   put.up.function: CG-AMB-DURATION-RANGES	;\ legato numeric: CG-AMB-LEGATO.FUNCTION { val part | curr-job -- }	val part legato ed.to: amb-job-data;: BUILD.CG-AMB-LEGATO	 1 #_amb_jobs  new: CG-AMB-LEGATO	grid_width grid_height put.wh: CG-AMB-LEGATO	14 put.text.size: CG-AMB-LEGATO	" leg " put.title: CG-AMB-LEGATO	100 -1 put.max: CG-AMB-LEGATO	0 -1 put.min: CG-AMB-LEGATO	#_amb_jobs 0 DO		0 i put.value: CG-AMB-LEGATO	LOOP	'c CG-AMB-LEGATO.FUNCTION   put.down.function: CG-AMB-LEGATO	'c CG-AMB-LEGATO.FUNCTION   put.move.function: CG-AMB-LEGATO	'c CG-AMB-LEGATO.FUNCTION   put.up.function: CG-AMB-LEGATO	;\ legato global: CG-AMB-LEGATOS.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i legato ed.to: amb-job-data		val i put.value: CG-AMB-LEGATO	LOOP;: BUILD.CG-AMB-LEGATOS	 1  1  new: CG-AMB-LEGATOS	grid_width grid_height put.wh: CG-AMB-LEGATOS	14 put.text.size: CG-AMB-LEGATOS	" all " put.title: CG-AMB-LEGATOS	100 -1 put.max: CG-AMB-LEGATOS	0 -1 put.min: CG-AMB-LEGATOS	#_amb_jobs 0 DO		i  legato ed.at: amb-job-data		i put.value: CG-AMB-LEGATO	LOOP	'c CG-AMB-LEGATOS.FUNCTION   put.down.function: CG-AMB-LEGATOS	'c CG-AMB-LEGATOS.FUNCTION   put.move.function: CG-AMB-LEGATOS	'c CG-AMB-LEGATOS.FUNCTION   put.up.function: CG-AMB-LEGATOS	;\ silence numeric: CG-AMB-SILENCE.FUNCTION { val part | curr-job -- }	val part silence ed.to: amb-job-data;: BUILD.CG-AMB-SILENCE	 1 #_amb_jobs  new: CG-AMB-SILENCE	grid_width grid_height put.wh: CG-AMB-SILENCE	14 put.text.size: CG-AMB-SILENCE	" sil " put.title: CG-AMB-SILENCE	100 -1 put.max: CG-AMB-SILENCE	0 -1 put.min: CG-AMB-SILENCE	#_amb_jobs 0 DO		0 i put.value: CG-AMB-SILENCE	LOOP	'c CG-AMB-SILENCE.FUNCTION    put.down.function: CG-AMB-SILENCE	'c CG-AMB-SILENCE.FUNCTION    put.move.function: CG-AMB-SILENCE	'c CG-AMB-SILENCE.FUNCTION    put.up.function: CG-AMB-SILENCE	;\ silence prob global: CG-AMB-SILENCES.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i silence ed.to: amb-job-data		val i put.value: CG-AMB-SILENCE	LOOP;: BUILD.CG-AMB-SILENCES	 1  1  new: CG-AMB-SILENCES	grid_width grid_height put.wh: CG-AMB-SILENCES	14 put.text.size: CG-AMB-SILENCES	" all " put.title: CG-AMB-SILENCES	100 -1 put.max: CG-AMB-SILENCES	0 -1 put.min: CG-AMB-SILENCES	#_amb_jobs 0 DO		i  silence ed.at: amb-job-data		i put.value: CG-AMB-SILENCE	LOOP	'c CG-AMB-SILENCES.FUNCTION   put.down.function: CG-AMB-SILENCES	'c CG-AMB-SILENCES.FUNCTION   put.move.function: CG-AMB-SILENCES	'c CG-AMB-SILENCES.FUNCTION   put.up.function: CG-AMB-SILENCES	;\ repeat numeric: CG-AMB-REPEAT.FUNCTION { val part | curr-job -- }	val part a-repeat ed.to: amb-job-data;: BUILD.CG-AMB-REPEAT	 1 #_amb_jobs  new: CG-AMB-REPEAT	grid_width grid_height put.wh: CG-AMB-REPEAT	14 put.text.size: CG-AMB-REPEAT	" rep " put.title: CG-AMB-REPEAT	100 -1 put.max: CG-AMB-REPEAT	0 -1 put.min: CG-AMB-REPEAT	#_amb_jobs 0 DO		0 i put.value: CG-AMB-REPEAT	LOOP	'c CG-AMB-REPEAT.FUNCTION    put.down.function: CG-AMB-REPEAT	'c CG-AMB-REPEAT.FUNCTION    put.move.function: CG-AMB-REPEAT	'c CG-AMB-REPEAT.FUNCTION    put.up.function: CG-AMB-REPEAT	;\ silence prob global: CG-AMB-REPEATS.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i a-repeat ed.to: amb-job-data		val i put.value: CG-AMB-REPEAT	LOOP;: BUILD.CG-AMB-REPEATS	 1  1  new: CG-AMB-REPEATS	grid_width grid_height put.wh: CG-AMB-REPEATS	14 put.text.size: CG-AMB-REPEATS	" all " put.title: CG-AMB-REPEATS	100 -1 put.max: CG-AMB-REPEATS	0 -1 put.min: CG-AMB-REPEATS	#_amb_jobs 0 DO		i  a-repeat ed.at: amb-job-data		i put.value: CG-AMB-REPEAT	LOOP	'c CG-AMB-REPEATS.FUNCTION   put.down.function: CG-AMB-REPEATS	'c CG-AMB-REPEATS.FUNCTION   put.move.function: CG-AMB-REPEATS	'c CG-AMB-REPEATS.FUNCTION   put.up.function: CG-AMB-REPEATS	;\ key numeric: CG-AMB-KEY.FUNCTION { val part | curr-job -- }	val part  a-key ed.to: amb-job-data;: BUILD.CG-AMB-KEY	 1 #_amb_jobs  new: CG-AMB-KEY	grid_width grid_height put.wh: CG-AMB-KEY	14 put.text.size: CG-AMB-KEY	" key " put.title: CG-AMB-KEY	11 -1 put.max: CG-AMB-KEY	0 -1 put.min: CG-AMB-KEY	#_amb_jobs 0 DO		0 i put.value: CG-AMB-KEY	LOOP	'c CG-AMB-KEY.FUNCTION    put.down.function: CG-AMB-KEY	'c CG-AMB-KEY.FUNCTION    put.move.function: CG-AMB-KEY	'c CG-AMB-KEY.FUNCTION    put.up.function: CG-AMB-KEY	;\ silence prob global: CG-AMB-KEYS.FUNCTION { val part | curr-job -- }	#_amb_jobs 0 DO		val i a-key ed.to: amb-job-data		val i put.value: CG-AMB-KEY	LOOP;: BUILD.CG-AMB-KEYS	 1  1  new: CG-AMB-KEYS	grid_width grid_height put.wh: CG-AMB-KEYS	14 put.text.size: CG-AMB-KEYS	" all " put.title: CG-AMB-KEYS	11 -1 put.max: CG-AMB-KEYS	0 -1 put.min: CG-AMB-KEYS	#_amb_jobs 0 DO		i  a-key ed.at: amb-job-data		i put.value: CG-AMB-KEY	LOOP	'c CG-AMB-KEYS.FUNCTION    put.down.function: CG-AMB-KEYS	'c CG-AMB-KEYS.FUNCTION    put.move.function: CG-AMB-KEYS	'c CG-AMB-KEYS.FUNCTION    put.up.function: CG-AMB-KEYS;\ translators for scales: CG-TRANSLATORS.FUNCTION { val part -- }	part current-translator !;: BUILD.CG-TRANSLATORS	#_amb_translators 2/ 2 new: cg-translators	" moods " put.title: cg-translators	'c CG-TRANSLATORS.FUNCTION put.down.function: cg-translators	550 grid_height 100 - put.wh: cg-translators	true 0 put.value: cg-translators	14 put.text.size: cg-translators	stuff{ " chrom " " major " " minor " " pent "	" m-pent " " blues " " dim " " whole " " pelog" " #-lyd"	 }stuff.text: cg-translators	;: CG-SAVE-SCREEN.FUNCTION { val part | curr-shape -- }	\ first store all job data	part at: preset-list 	-> curr-shape	curr-shape clone: amb-job-data	\ now store tempo	amb-tempo @ part to: tempo-presets	\ now look at jobs on	4 0 DO 		i get.value: CG-AMB-JOB-ON		part 4 * i + to: job-on-presets	LOOP	current-translator @ part to: translator-presets	\ now save the all buttons just for cosmetic reasons		0 get.value: cg-amb-loudnesses 	part 10 * 0 + to: all-presets		0 get.value: cg-amb-pitches part 10 * 1 + to: all-presets		0 get.value: cg-amb-pitch-ranges part 10 * 2 + to: all-presets		0 get.value: cg-amb-durations part 10 * 3 + to: all-presets		0 get.value: cg-amb-duration-ranges part 10 * 4 + to: all-presets		0 get.value: cg-amb-presets part 10 * 5 + to: all-presets		0 get.value: cg-amb-legatos part 10 * 6 + to: all-presets		0 get.value: cg-amb-silences part 10 * 7 + to: all-presets		0 get.value: cg-amb-repeats part 10 * 8 + to: all-presets		0 get.value: cg-amb-keys part 10 * 9 + to: all-presets;\ preset saving and restoring: BUILD.CG-SAVE-SCREEN	8 1 new: cg-save-screen	300 grid_height 100 - put.wh: cg-save-screen	" save " put.title: cg-save-screen	'c cg-save-screen.function put.down.function: cg-save-screen	false 0 put.value: cg-save-screen	14 put.text.size:   cg-save-screen	stuff{	" 1 " " 2 " " 3 " " 4 " " 5 " " 6 " " 7 " " 8 " }stuff.text: cg-save-screen;: CG-RESTORE-SCREEN.FUNCTION { val part |  curr-shape curr-on? curr-job -- }	part at: preset-list	-> curr-shape	amb-job-data curr-shape clone: []	4 0 DO		i duration ed.at: amb-job-data i put.value: cg-amb-duration		i pitch ed.at: amb-job-data i put.value: cg-amb-pitch		i loudness ed.at: amb-job-data i  put.value: cg-amb-loudness		i  preset ed.at: amb-job-data dup i put.value: cg-amb-preset			i 1+ midi.channel! midi.preset		i legato ed.at: amb-job-data i put.value: cg-amb-legato		i pitch-range ed.at: amb-job-data i put.value: cg-amb-pitch-range		i duration-range ed.at: amb-job-data i put.value: cg-amb-duration-range		i silence ed.at: amb-job-data i put.value: cg-amb-silence		i a-repeat ed.at: amb-job-data i put.value: cg-amb-repeat		i a-key ed.at: amb-job-data i put.value: cg-amb-key	LOOP	\ restore tempo	part at: tempo-presets dup	rtc.rate!	0 put.value: cg-tempo	\ restore jobs on	4 0 DO		part 4 * i + at: job-on-presets		-> curr-on?		curr-on? i put.value: cg-amb-job-on \ restore screen		i at: amb-jobs -> curr-job		curr-on? 		IF			curr-job start: [] 		ELSE 			curr-job stop: []		THEN	LOOP\ now restore moods	part at: translator-presets	dup current-translator !	true swap put.value: cg-translators\ now restore all buttons		part 10 * 0 + at: all-presets 0 put.value: cg-amb-loudnesses 		part 10 * 1 + at: all-presets 0 put.value: cg-amb-pitches 		part 10 * 2 + at: all-presets 0 put.value: cg-amb-pitch-ranges 		part 10 * 3 + at: all-presets 0 put.value: cg-amb-durations 		part 10 * 4 + at: all-presets 0 put.value: cg-amb-duration-ranges 		part 10 * 5 + at: all-presets 0 put.value: cg-amb-presets 		part 10 * 6 + at: all-presets 0 put.value: cg-amb-legatos 		part 10 * 7 + at: all-presets 0 put.value: cg-amb-silences 		part 10 * 8 + at: all-presets 0 put.value: cg-amb-repeats 		part 10 * 9 + at: all-presets 0 put.value: cg-amb-keys ;: BUILD.CG-RESTORE-SCREEN	8 1 new: CG-RESTORE-SCREEN	" restore " put.title: CG-RESTORE-SCREEN	300 grid_height 100 - put.wh: cg-restore-screen	'c cg-restore-screen.function put.down.function: CG-RESTORE-SCREEN	false 0 put.value: CG-RESTORE-SCREEN	14 put.text.size: CG-RESTORE-SCREEN	stuff{	" 1 " " 2 " " 3 " " 4 " " 5 " " 6 " " 7 " " 8 " }stuff.text: CG-RESTORE-SCREEN;\ screen drawing stuff: AMB-SCREEN.DRAW.FUNCTION	gr_big_text set.text.size	200 200  scg.move " ANNA'S MUSIC BOX " GR.TEXT	grid_x_home grid_x_inc 5 * + 200 + 3900	scg.move	gr_small_text set.text.size " (revision 8/8/97; Larry Polansky) " gr.text	gr_small_text set.text.size;\ now build the screen: BUILD.AMB-SCREEN.CONTROLS	'c amb-screen.draw.function put.draw.function: amb-screen\ setup screen	0 scg.selnt	amb-screen default-screen !	109 put.key: amb-screen \ e chooses this screen		40 3 new: amb-screen	"  " put.title: amb-screen\	build.cg-tempo\	build.cg-amb-job-on	build.cg-amb-sync	build.cg-translators\	build.cg-amb-loudness	build.cg-amb-pitch	build.cg-amb-pitch-range	build.cg-amb-duration	build.cg-amb-duration-range	build.cg-amb-preset	build.cg-amb-legato	build.cg-amb-silence	build.cg-amb-repeat	build.cg-amb-key\	build.cg-amb-loudnesses	build.cg-amb-pitches	build.cg-amb-pitch-ranges	build.cg-amb-durations	build.cg-amb-duration-ranges	build.cg-amb-presets	build.cg-amb-legatos	build.cg-amb-silences	build.cg-amb-repeats	build.cg-amb-keys\	build.cg-save-screen	build.cg-restore-screen\	cg-tempo			grid_x_home grid_x_inc 5 * + 200 + 3300 add: amb-screen\	cg-amb-job-on 		200 grid_y_top  add: amb-screen		cg-amb-sync         200 y_bottom add: amb-screen\	cg-amb-loudness 			grid_x_home grid_y_top add: amb-screen	cg-amb-preset	 			grid_x_home grid_x_inc +  75 - grid_y_top add: amb-screen	cg-amb-pitch	 			grid_x_home grid_x_inc 2* + 50 - grid_y_top add: amb-screen	cg-amb-pitch-range	 		grid_x_home grid_x_inc  3 * + 90 - grid_y_top add: amb-screen	cg-amb-duration	 			grid_x_home grid_x_inc 4 * + 90 - grid_y_top add: amb-screen	cg-amb-duration-range	 	grid_x_home grid_x_inc 5 * + 100 - grid_y_top add: amb-screen	cg-amb-legato			 	grid_x_home grid_x_inc 6 * + 170 - grid_y_top add: amb-screen	cg-amb-silence			 	grid_x_home grid_x_inc 7 * + 240 - grid_y_top add: amb-screen	cg-amb-repeat			 	grid_x_home grid_x_inc 8 * +  320 - grid_y_top add: amb-screen	cg-amb-key			 		grid_x_home grid_x_inc 9 * +  380 - grid_y_top add: amb-screen\	cg-amb-loudnesses			grid_x_home 			   y_bottom add: amb-screen	cg-amb-presets	 			grid_x_home grid_x_inc +  75 - y_bottom add: amb-screen	cg-amb-pitches	 			grid_x_home grid_x_inc 2* + 50 - y_bottom add: amb-screen	cg-amb-pitch-ranges	 		grid_x_home grid_x_inc  3 * + 90 -  y_bottom add: amb-screen	cg-amb-durations 			grid_x_home grid_x_inc 4 * + 90 - y_bottom add: amb-screen	cg-amb-duration-ranges	 	grid_x_home grid_x_inc 5 * + 100 -  y_bottom add: amb-screen	cg-amb-legatos	 			grid_x_home grid_x_inc 6 * + 170 - y_bottom add: amb-screen	cg-amb-silences				grid_x_home grid_x_inc 7 * + 240 -  y_bottom add: amb-screen	cg-amb-repeats				grid_x_home grid_x_inc 8 * +  320 - y_bottom add: amb-screen		cg-amb-keys					grid_x_home grid_x_inc 9 * +  380 - y_bottom add: amb-screen\	cg-translators 200 3300 add: amb-screen\	cg-save-screen 200 4200 add: amb-screen	cg-restore-screen 200 4800 add: amb-screen;: INIT.AMB-SCREEN	build.amb-screen.controls;: TERM.AMB-SCREEN	freeall: amb-screen	free: amb-screen;if.forgotten term.amb-screen
\ jobs and objects for ambanew task-amb_objects\ names for objects0 k: duration1 k: pitch2 k: loudness3 k: preset4 k: legato5 k: pitch-range6 k: pulse6 k: duration-range7 k: silence8 k: a-repeat9 k: a-key\ last note array for knowing what note was played: INIT.AMB-LAST-NOTES	4 new: amb-last-notes;\ initial settings for a voice: INIT.AMB-JOB-DATA	#_amb_jobs 10 new: amb-job-data	stuff{		60 60 60 20 50 0 0 0 0 0		60 60 60 20 50 0 0 0 0 0		60 60 60 20 50 0 0 0 0 0		60 60 60 20 50 0 0 0 0 0	}stuff: amb-job-data;: AMB-JOB.START.FUNCTION { job -- }	job get.data: []	1+ midi.channel!	job get.data: []	preset ed.at: amb-job-data	midi.preset;: AMB-JOB.STOP.FUNCTION { job -- pitch }	job get.data: []	1+ midi.channel!	midi.lastoff;: GET.PITCH { job-# | p-range curr-pitch curr-repeat -- pitch }	\ first check to see if it's from the repeat vector or not...	job-# a-repeat ed.at: amb-job-data	dup -> curr-repeat	100 choose 	> 	IF	\ get it from the repeat list		job-#		job-# at: amb-repeat-counter		curr-repeat 10 / min		ed.at: amb-repeat-shape		( -- note )	ELSE	\ generate it, not from the repeat list...		\ sometime, stepwise if the range is not zero		100 choose 10 < \ 10 % of the time by step		job-# pitch-range ed.at: amb-job-data \ get range		0= not \ and the range is not 0		and  \ range is greater than 0, stepwise motion		current-translator @ all = not		and	\ and the chromatic scale is not in use		IF			job-# at: amb-last-notes  \ go down or up by step in the translator from								  \ the last note			1 			2 choose 0=			IF				+			ELSE			-			THEN		ELSE 				\ usually, just pick a note in the range			job-# pitch ed.at: amb-job-data -> curr-pitch			job-# pitch-range ed.at: amb-job-data -> p-range			curr-pitch p-range + 127 min curr-pitch p-range - 0 max wchoose			curr-pitch p-range + 127 min curr-pitch p-range - 0 max wchoose			+ 2/  \ average them to get them to center more about the center pitch		THEN		0 127 clipto		\ now translate to current scale		current-translator @ at: amb-translator-list		translate: []		job-# a-key ed.at: amb-job-data + \ add individual key offsets		\ --- note	THEN	\ now add that pitch to repeat array	dup job-# add.to.repeat-shape	job-# at: amb-repeat-counter 1+ amb_repeat_length mod job-# to: amb-repeat-counter;: GET.LOUDNESS { job-# -- }	job-# silence ed.at: amb-job-data	100 choose 	<	\ if it's not a silence...	IF		 job-# loudness ed.at: amb-job-data 		dup 0= not  \ if it's zero,just leave it alone!!!		IF			dup 4 5 */ wchoose 			job-# at: amb-last-notes			\ accent the C 50 % of the time			12 mod 0= 			100 choose 50 < 			and			current-translator @ all = not			and			IF				25 15 wchoose  +  			THEN			0 127 clipto		THEN	\ if it is a silence	ELSE		0	THEN;: AMB-JOB.FUNCTION { job | job-# dur dur-range -- }	job get.data: []	-> job-#	 job-# 1+ midi.channel! 	midi.lastoff	job-# get.pitch 	dup job-#  to: amb-last-notes	job-# get.loudness ( -- pitch loud )\ now get true duration from duration and legato	job-# duration ed.at: amb-job-data		job-# legato ed.at: amb-job-data		100 */ \ legato is % of on time	midi.noteon.for\ now calculate duration of job for next pitch	job-# duration ed.at: amb-job-data	-> dur	job-# pulse ed.at: amb-job-data	-> dur-range	dur dup dur-range 100 */	+ 300 min 	dur dup dur-range 100 */	- 0 max wchoose	0 127 clipto	job put.duration: [];	: INIT.AMB-JOBS { | curr-job -- }	init.amb-last-notes	init.amb-job-data	#_amb_jobs new: amb-jobs	#_amb_jobs 0 	DO		instantiate ob.job		-> curr-job		curr-job  add: amb-jobs		1 curr-job new: []		i curr-job put.data: []		'c amb-job.function curr-job add: []		'c amb-job.stop.function curr-job put.stop.function: []		'c amb-job.start.function curr-job put.start.function: []	LOOP;: TERM.AMB-JOBS	free: amb-job-data	freeall: amb-jobs	free: amb-jobs	free: amb-last-notes;if.forgotten term.amb-jobs
\ all things objects...anew task-all_things_objects\ arrays and objects, distributions\ pitch distributionsob.array p-dist-uniformob.array p-dist-triangleob.array p-dist-harm-Cob.array p-dist-harm-Eob.array p-dist-harm-Gob.objlist p-dist-harmlistob.array harm-fundamentals\ two array to help set up a harmonic series distribution\ the first is the offsets, the second is the probs.ob.array harm-int-arrayob.array harm-prob-array\ this array keeps track of the actual probablities,\ the result of the stats and ideal probabilities...\ it is updated for every note, by adding or subtracting from the\ distribution array\ it's normalized to 1000ob.array p-dist-adjusted\ simple duration distributionob.array d-dist-uniform\ cross-faded distributionob.array p-mixed-dist\ statisticsob.array p-statsob.array d-statsob.objlist p-dist-array\ main melody shapeob.shape piece-shape\ play midiob.player all_things-player\ all distribution arrays sum to 1000\ triangle has highest probability in middle of array\ general utility for normalizing all arrays to 1000: NORMALIZE.ARRAY { temp-array | temp-sum -- }	0 -> temp-sum	pitch_range 0 DO		i temp-array at: []		temp-sum + -> temp-sum	LOOP	temp-sum .	pitch_range 0 DO		i temp-array at: []		1000 temp-sum */		i temp-array to: []	LOOP;: INIT.HARM.ARRAYS	." in INIT.HARM.ARRAYS "\ three offset fundamentals for the three harmonic series 6, 10, 1	#_series new: p-dist-harmlist  cr ." list for multiple harmonic series " cr	#_series new: harm-fundamentals	stuff{		6 10 1 6		}stuff: harm-fundamentals	." fundamentals stuffed " cr	\ new em, stick em in the harmlist and in the distribution array	p-dist-harm-C add: p-dist-harmlist	p-dist-harm-E add: p-dist-harmlist	p-dist-harm-G  add: p-dist-harmlist	p-dist-harm-C  add: p-dist-harmlist	cr ." harmlist filled " cr	print: p-dist-array	#_series 0 DO		i .		pitch_range \ make them the size of the pitch range, and fold pitches back		i at: p-dist-harmlist		new: []		i at: p-dist-harmlist add: p-dist-array	LOOP;\ should add way to have several harmonic series ...\ harmonic numbers 2-17: INIT.P-DIST-HARMS		cr ." IN INIT.P-DIST-HARMS " cr	init.harm.arrays\ the harmonics are:\		2 3\		4 5 6 7\		8 9 10 11 12 13 14 15\		16 17	16 new: harm-int-array	stuff{		0 7 		12 16 19 22 		24 26 28 30 31 33 34 35		36 37	}stuff: harm-int-array	\ stuff probabilities in euler style function	16 new: harm-prob-array	stuff{		16 12		15 8 11 5		14 9 7 3 10 2 4 6		13 1	}stuff: harm-prob-array		." prob and int arrays filled " cr;\ fold over harmonic series until they're in the instrument's pitch range: CREATE.HARMONIC.ARRAYS { | curr-harm-dist target-index -- }	#_series 0 DO		i at: p-dist-harmlist		-> curr-harm-dist		16 0 DO			i at: harm-prob-array ( -- prob ) 			i at: harm-int-array  ( -- index ) 			j at: harm-fundamentals ( -- prob index fund-offset ) 			lowest_pitch + 	( -- prob index fund-offset+lowest_pitch ) 			+ ( -- prob true-index ) 			-> target-index ( -- prob )			target-index lowest_pitch < 			IF				target-index 12 + -> target-index			THEN			\ for highest pitches may need to fold them over twice			target-index highest_pitch > 			IF				target-index 12 - -> target-index				target-index highest_pitch >					IF						target-index 12 - -> target-index					THEN			THEN						target-index lowest_pitch - 			curr-harm-dist to: []		LOOP	LOOP		;: TEST.HARMONIC.SERIES	16 0 DO		i at: harm-int-array		lowest_pitch + .	LOOP;: FILL.ALL_THINGS_OBJECTS { | temp-sum temp-sum2 temp-index -- } 	2000 5 new: piece-shape ." shape initialized "	\ 4th dimension of the shape array is keeping track of current-time	\ 5th is section #		#_series new: p-dist-array \ four distributions, three sections	init.p-dist-harms ." harm dists initialized "	create.harmonic.arrays ." harmonic arrays created "	\	p-dist-triangle add: p-dist-array	\	p-dist-uniform add: p-dist-array		number_durations new: d-dist-uniform	number_durations  new: d-stats	number_durations 0 DO		i i to: d-dist-uniform	LOOP	pitch_range new: p-dist-uniform	pitch_range new: p-dist-triangle	pitch_range new: p-dist-adjusted	pitch_range new: p-stats	\ initialize triangle and uniform	pitch_range 0 DO		\ uniform distribution		1000 pitch_range / i to: p-dist-uniform		\ triangle distribution		pitch_range 2/ ( -- half-range ) 		pitch_range 2/ i -		abs - 		dup dup * * ( cube it to make the range more exaggerated ) 		i to: p-dist-triangle	LOOP;: NORMALIZE.DISTRIBUTIONS\	p-dist-triangle normalize.array	\ normalize the harmonic series	#_series 0 DO		i at: p-dist-harmlist 		normalize.array	LOOP	\ uniform is already normalized by definition;: FILL.ADJUSTED.ARRAY 	pitch_range 0 DO		i curr-dist @ at: []		i to: p-dist-adjusted	LOOP;: CLEAR.STATS	pitch_range 0 DO		0 i to:  p-stats	LOOP;: INIT.ALL_THINGS_OBJECTS	fill.all_things_objects ." filled " 	normalize.distributions ." normalized "	clear.stats ." cleared ";
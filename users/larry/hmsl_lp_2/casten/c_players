\ make a big shape and a player, convert to a midi file...anew task-c_playersob.player c-big-playerob.player c-crawford-playerob.shape c-crawford-shapeob.shape c-big-shape5 k: number-dov: scale-factor1 scale-factor !: C-PLAYER.DUR.FUNC ( el shape -- )	0 swap ed.at: []	scale-factor @ / ;	: INIT.C-PLAYERS	2000 2 new: c-crawford-shape	2000 2 new: c-big-shape	1 new: c-big-player	1 new: c-crawford-player	c-big-shape add: c-big-player	'c c-player.dur.func put.dur.function: c-big-player	'c c-player.dur.func put.dur.function: c-crawford-player	c-crawford-shape add: c-crawford-player	ins-midi-1 put.instrument: c-big-player	ins-midi-2 put.instrument: c-crawford-player	0 put.offset: ins-midi-1	0 put.offset: ins-midi-2;: MAKE.BIG.SHAPES { | curr-section curr-shape -- }	number-do 0 DO		i at: new-whole-piece		-> curr-section		curr-section many: [] 0 DO			i curr-section at: []			-> curr-shape			curr-shape many: [] 0 DO				i curr-shape get: []				add: c-big-shape			LOOP		LOOP	LOOP	number-do 0 DO		i at: whole-piece		-> curr-section		curr-section many: [] 0 DO			i curr-section at: []			-> curr-shape			curr-shape many: [] 0 DO				i curr-shape get: []				add: c-crawford-shape			LOOP		LOOP	LOOP	;: PRINT.STATS	1 calc.dim.stats: c-big-shape	1 calc.dim.stats: c-crawford-shape	1 get.dim.mean: c-big-shape 	1 get.dim.mean: c-crawford-shape 	cr ." Means: " . .;	
\ 51 harmonies\ harmonic distance functionanew task-51_distanceob.array distance-tableob.array max-tableob.array min-table0 value tonic-distance0 value dom-distance\ all these distances assume pitch is in dimension 11000 value unison666 value 5th575 value 4th500 value maj3400 value maj6330 value min3300 value min6160 value min7140 value tt130 value maj290  value maj775  value min2: INIT.DISTANCE-TABLE	11 new: distance-table	stuff{  unison			min2			maj2			min3			maj3			4th				tt			5th			maj6			min6			min7			maj7	}stuff: distance-table;: INIT.MAX-TABLE	12 new: max-table	stuff{ 	       0		   5th		   5th 4th + 		   5th 4th maj3 + +		   5th 4th maj3 maj6 + + +           5th 4th maj3 maj6  min3 + + + +           5th 4th maj3 maj6  min3  min6 + + + + +           5th 4th maj3 maj6  min3  min6 min7 + + + + + +	                 5th 4th maj3 maj6  min3  min6 min7 tt + + + + + + +	              5th 4th maj3 maj6  min3  min6 min7 tt maj2 + + + + + + + +           5th 4th maj3 maj6  min3  min6 min7 tt maj2 maj7 + + + + + + + + +           5th 4th maj3 maj6  min3  min6 min7 tt maj2 maj7 min2 + + + + + + + + + +	     	}stuff: max-table;: INIT.MIN-TABLE	12 new: min-table	stuff{ 	       0		   min2		   min2 maj7 + 		   min2 maj7 maj2 + + 		   min2 maj7 maj2 tt + + +            min2 maj7 maj2 tt min7 + + + +           min2 maj7 maj2 tt min7 min6 + + + + +           min2 maj7 maj2 tt min7 min6 min3 + + + + + +	                 min2 maj7 maj2 tt min7 min6 min3 maj6 + + + + + + +		              min2 maj7 maj2 tt min7 min6 min3 maj6 maj3 + + + + + + + +	           min2 maj7 maj2 tt min7 min6 min3 maj6 maj3 4th + + + + + + + + +           min2 maj7 maj2 tt min7 min6 min3 maj6 maj3 4th 5th + + + + + + + + + +    	}stuff: min-table;: GET.DISTANCE { rt interval -- distance }	rt 12 mod	interval 12 mod	- abs 	at: distance-table;\ assumes 3 dimensional shapes...\ should return value between 0 and 1000: GET.DISTANCE.SHAPE { curr-shape | curr-root curr-interval distance-sum -- mean distance }	0 -> distance-sum	curr-shape many: [] 1 DO		0 1 curr-shape ed.at: [] 		i 1 curr-shape ed.at: [] 		get.distance 		distance-sum + -> distance-sum	LOOP	distance-sum 	\ subtract the min value, so that the min = 0	curr-shape many: [] 1- at: min-table 	-	1000 \ subtract min from max, to get total range, and divide by the range..	curr-shape many: [] 1- at: max-table     curr-shape many: [] 1- at: min-table -	*/;: SET.DISTANCES	tonic-shape get.distance.shape -> tonic-distance 	dom-shape get.distance.shape -> dom-distance;	: DISTANCE.TO.TONIC { curr-shape -- distance}	curr-shape get.distance.shape 	tonic-distance - abs;: DISTANCE.TO.DOM { curr-shape -- }	curr-shape get.distance.shape 	dom-distance - abs;					: INIT.DISTANCE	init.distance-table	init.max-table	init.min-table	set.distances;init.distance: TERM.DISTANCE	free: distance-table	free: max-table	free: min-table;if.forgotten term.distance
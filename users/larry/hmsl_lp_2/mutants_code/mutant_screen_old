\ Interactive Metric Generator\0 .IFO- allow playback of source and targetO- adjacency and intervalsO- zero override.THEN\ include  mutants:load_mutantsinclude? ob.fader h:ctrl_faderANEW TASK-MUTANT_SCREEN_16 constant omega_shift1 omega_shift shift constant omega_1.0: OMEGA* ( val omega -- val*omega/1024 )	* dup 0>	IF 512 +	ELSE 512 -	THEN	omega_shift negate ashift;-11+ dup constant md1_mt_lcm1+ dup constant md1_mt_iuim1+ dup constant md1_mt_uuim1+ dup constant md1_mt_usim1+ dup constant md1_mt_vm1+ dup constant md1_mt_isim1+ dup constant md1_mt_lcm/iuim1+ dup constant md1_mt_lcm/uuimdrop		OB.MUTANT MUTANT-SOB.MUTANT MUTANT-TOB.MUTANT MUTANT-XOB.MUTANT MUTANT-MOB.PLAYER MD1-PLAYEROB.MIDI.INSTRUMENT MD1-INS\ Record Source or Targetvariable MD1-REC-SHAPEvariable MD1-REC-LENGTHvariable MD1-MUTATION-TYPE20 md1-rec-length !OB.MENU.GRID  MD1-CG-RECORDOB.RADIO.GRID MD1-CG-MUTATIONOB.RADIO.GRID MD1-CG-PLAYEEOB.FADER      MD1-CG-DEGREEOB.FADER	  MD1-CG-DELTAOB.CHECK.GRID MD1-CG-OPTIONSOB.NUMERIC.GRID MD1-CG-VALUESOB.SCREEN MD1-SCREEN." 3 ": MD1.MESSAGE ( $msg -- )	200 25 gr.move gr.text "     " gr.text;2200 constant MD1_MUT_X2000 constant MD1_MUT_y: MD1.RESET ( -- )	mutant-m clone: mutant-s	mutant-x clone: mutant-s	mutant-s put.source: mutant-m	mutant-t put.target: mutant-m	mutant-s put.source: mutant-x	mutant-t put.target: mutant-x\\ clear mutation display if window open	hmsl-window @	IF		5 0		DO			md1_mut_x md1_mut_y i 300 *  + scg.move ( -- dim )			"                   " gr.text		LOOP	THEN;: MD1.RECORD.NOTE ( note velocity -- )	2dup 10 midi.noteon.for	midi.rtc.time@ -rot	md1-rec-shape @ add: []	md1-rec-shape @ many: [] md1-rec-length @ =	IF		'c 2drop mp-on-vector !		gr.check " Recorded!        " md1.message 		midi.rtc.time@ 10 +		0 0 md1-rec-shape @ ed.at: [] -		0 md1-rec-shape @ differentiate: []\		md1-rec-shape @ mutant-s =		IF md1.reset		THEN	THEN;: MD1.RECORD.SHAPE ( shape -- )	dup>r md1-rec-shape !	md1-rec-length @ 3 r@ new: []	midi.clear	'c md1.record.note mp-on-vector !	" Begin Playing!" md1.message	rdrop;: MD1.DISPLAY.MUTATION { type -- , }	\ md1_mut_x md1_mut_y  scg.move 	\ "      " gr.text	md1_mut_x get.curr-dim: mutant-m 	tuck ( -- dim x dim )	300 * md1_mut_y + scg.move ( -- dim )	gr.number " : " gr.text\	type	CASE		md1_mt_lcm OF " LCM" gr.text ENDOF		md1_mt_iuim OF " IUIM" gr.text ENDOF		md1_mt_uuim OF " UUIM" gr.text ENDOF		md1_mt_usim OF " USIM" gr.text ENDOF		md1_mt_vm OF " VM" gr.text ENDOF		md1_mt_isim OF " ISIM" gr.text ENDOF		md1_mt_lcm/iuim OF " LCM/IUIM" gr.text ENDOF		md1_mt_lcm/uuim OF " LCM/UUIM" gr.text ENDOF	ENDCASE	"                       " gr.text;." 4 ": MD1.MUTATE { value part -- }	get.target: mutant-m	many: []	0= not	IF		value part  md1.display.mutation		nip		CASE			md1_mt_lcm OF lcm: mutant-m ENDOF			md1_mt_iuim OF iuim: mutant-m ENDOF			md1_mt_uuim OF uuim: mutant-m ENDOF			md1_mt_usim OF usim: mutant-m ENDOF			md1_mt_vm OF vm: mutant-m ENDOF			md1_mt_isim OF isim: mutant-m ENDOF			md1_mt_lcm/iuim OF				lcm: mutant-x mutant-x put.source: mutant-m				iuim: mutant-m mutant-s put.source: mutant-m			ENDOF			md1_mt_lcm/uuim OF				lcm: mutant-x mutant-x put.source: mutant-m				uuim: mutant-m mutant-s put.source: mutant-m			ENDOF		ENDCASE	ELSE	md1_mut_x md1_mut_y  scg.move 	" can't mutate cuz nuthin in target " gr.text	THEN;: MD1.RECORD.FUNC ( value part -- )	nip	CASE		0 OF mutant-s md1.record.shape ENDOF		1 OF mutant-t md1.record.shape ENDOF		2 OF start: md1-player ENDOF		3 OF stop: md1-player ENDOF		4 OF md1.reset ENDOF	ENDCASE;: MD1.PLAYEE.FUNC ( value part -- )	nip	CASE		0 OF mutant-s 0 put: md1-player ENDOF		1 OF mutant-t 0 put: md1-player ENDOF		2 OF mutant-m 0 put: md1-player ENDOF	ENDCASE;: MD1.DEGREE.FUNC ( value part -- )	drop	dup put.mutation-degree: mutant-x	put.mutation-degree: mutant-m;: MD1.VALUES.FUNC ( value part -- )	CASE		0 OF			dup put.curr-dim: mutant-s			dup put.curr-dim: mutant-t			dup put.curr-dim: mutant-x				put.curr-dim: mutant-m		ENDOF		1 OF			md1-rec-length !		ENDOF	ENDCASE;: MD1.OPTIONS.FUNC ( value part -- )	CASE		0 OF			dup put.zero-override?: mutant-s			dup put.zero-override?: mutant-t			dup put.zero-override?: mutant-x				put.zero-override?: mutant-m		ENDOF	ENDCASE;: MD1.CG.INIT ( -- )\\ commands	1 5 new: md1-cg-record	stuff{		" Rec Source" " Rec Target"		" Play" " Stop" " Reset"	}stuff.text: md1-cg-record	'c md1.record.func put.down.function: md1-cg-record\	1 3 new: md1-cg-playee	true 2 put.value: md1-cg-playee	stuff{		" Source" " Target"		" Mutant"	}stuff.text: md1-cg-playee	'c md1.playee.func put.down.function: md1-cg-playee	" Playee" put.title: md1-cg-playee\	1 8 new: md1-cg-mutation	stuff{		" LCM" " IUIM"		" UUIM" " USIM" " VM" " ISIM"		" LCM/IUIM" " LCM/UUIM"	}stuff.text: md1-cg-mutation	'c md1.mutate put.down.function: md1-cg-mutation	" Mutate" put.title: md1-cg-mutation\	0 -1 put.min: md1-cg-degree	1000 -1 put.max: md1-cg-degree	'c md1.degree.func put.up.function: md1-cg-degree	" Omega" put.title: md1-cg-degree\\ options	1 1 new: md1-cg-options	stuff{		" 0 override?"	}stuff.text: md1-cg-options	'c md1.options.func put.down.function: md1-cg-options	true 0 put.value: md1-cg-options\\ values	1 2 new: md1-cg-values	stuff{		" Dimension" " #-Notes"	}stuff.text: md1-cg-values	\	dimension: mutant-m 1- 0 put.max: md1-cg-values %Q	2 0 put.max: md1-cg-values	50 1 put.max: md1-cg-values	0 0 put.min: md1-cg-values	1 1 put.min: md1-cg-values\ set initial values	1 0 put.value: md1-cg-values	md1-rec-length @ 1 put.value: md1-cg-values	0 0 put.min: md1-cg-values	1 1 put.min: md1-cg-values\	dimension: mutant-m 1- 0 put.max: md1-cg-values %Q	2 0 put.max: md1-cg-values	50 1 put.max: md1-cg-values	'c md1.values.func put.down.function: md1-cg-values\    671 303  put.wh: MD1-CG-RECORD    529 303  put.wh: MD1-CG-PLAYEE    663 303  put.wh: MD1-CG-MUTATION    201 2610  put.wh: MD1-CG-DEGREE    277 288  put.wh: MD1-CG-VALUES    739 303  put.wh: MD1-CG-OPTIONS    12  3 new: MD1-SCREEN    MD1-CG-RECORD                           306     582  add: MD1-SCREEN    MD1-CG-PLAYEE                           300    2800  add: MD1-SCREEN    MD1-CG-MUTATION                          1477     591  add: MD1-SCREEN    MD1-CG-DEGREE                          1049     577  add: MD1-SCREEN    MD1-CG-VALUES                          2778     534  add: MD1-SCREEN    MD1-CG-OPTIONS                          3148     534  add: MD1-SCREEN\	" Mutant Demo " put.title: md1-screen	md1-screen default-screen !;: MD1.CG.TERM	freeall: md1-screen	free: md1-screen;: MD1.PLAYER.INIT	mutant-m md1-ins build: md1-player	100000 put.repeat: md1-player	60 put.repeat.delay: md1-player	0 put.offset: md1-ins\	md1.reset	1 put.curr-dim: mutant-s	1 put.curr-dim: mutant-t	1 put.curr-dim: mutant-x	1 put.curr-dim: mutant-m	zero-override?.on: mutant-s	zero-override?.on: mutant-t	zero-override?.on: mutant-x	zero-override?.on: mutant-m;." 5 " : MD1.INIT	md1.player.init	md1.cg.init	midi.parser.on;: MD1.TERM	md1.cg.term	free: mutant-s	free: mutant-t	free: mutant-x	free: mutant-m;cr cr cr tab." Type MGO to bring up HMSL and see mutant screen " cr cr cr: MUTANT.DEMO.1	md1.init	hmsl\	md1.term;: MGO 	mutant.demo.1;if.forgotten md1.term	
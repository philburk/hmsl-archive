\ Mutant lists\ author lp\ A class to hold mutants, with some simple utilities to\ help writing piecesANEW TASK-MUTANTLISTmethod see:method see.all::CLASS ob.mutantlist <super ob.objlist:M SEE: { #-mutant dimension -- , see that index horizontally }	dimension #-mutant at: self	print.horizontal: [];m:M SEE.ALL: { dimension -- , }	many: self 0 DO			dimension i at: self 			print.horizontal: []	LOOP;m\ these two methods are good to logto to a file, to check a mutantlist\ to see if there are any values out of a specific range	:M INDEX>: { val dimension | mutant start end -- }	many: self 0	DO 		." In mutant " i .		i at: self		-> mutant		val 0 mutant many: [] dimension		mutant index>: []	LOOP;m:M INDEX<: { val dimension | mutant start end -- }	many: self 0	DO		." In mutant " i .		i at: self		-> mutant		val 0 mutant many: [] dimension		mutant index<: []	LOOP;m	;CLASS
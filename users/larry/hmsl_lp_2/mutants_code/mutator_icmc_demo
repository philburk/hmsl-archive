\ A mutator demo\ written for ICMC proceedings paperanew task-mutator_icmc_demoinclude? task-midifile ht:midifileinclude? task-score_entry ht:score_entry10 value #-of-mutationsob.mutator m-chimacumob.mutator m-countdownob.objlist m-mutant-listob.player mutant-playerob.mutator all-shapesscore{48 TICKS/BEAT !60 rtc.rate!: SETUP.TEMPO  ( -- , for proper note durations )	ticks/beat @ 4* tpw!;: CHIMACUM.INIT ( -- )\	0 put.offset: ins-midi-1	50 4 new: m-chimacum	m-chimacum ins-midi-1 build: player-1	3 put.on.dim: player-1	100 put.repeat: player-2	m-chimacum ins-midi-1	shapei{	1/8 A4 B C#5 	D E F# G A D4 E F# 	G F# G A B C#5 D B4 	A B C#5 D E A3 B C#4 	D C# D E F# G A Q tie 1/2 G  	}shapei	1 put.curr-dim: m-chimacum\ accent first note of melody	120 0 2 ed.to: m-chimacum	use.fundamental-index: m-chimacum;: COUNTDOWN.INIT ( -- )\	0 put.offset: ins-midi-2	50 4 new: m-countdown	m-countdown ins-midi-2 build: player-2	3 put.on.dim: player-2	100 put.repeat: player-2	m-countdown ins-midi-2	shapei{	1/8 F#5 g# a b g f# f g	e d c a4 f5 c# a#4 d#5	c5 g#4 a4 c5 b4 a#4 a4 c#5	b4 g# f# e g# a b c#5	e4 f#4 Q tie 1/2 g	}shapei	1 put.curr-dim: m-countdown	120 0 2 ed.to: m-countdown	use.fundamental-index: m-countdown;: TRANSPOSE.CHIMACUM	0 1 ed.at: m-countdown	0 1 ed.at: m-chimacum -	0 many: m-chimacum 1 transpose: m-chimacum;: M-MUTANT-LIST.INIT { | mutator -- }	#-of-mutations  new: m-mutant-list	#-of-mutations 0 DO		instantiate ob.mutator		-> mutator		mutator add: m-mutant-list		50 3 mutator new: []		1 mutator put.curr-dim: []		mutator use.fundamental-index: []		i 1000 #-of-mutations / * 100 + mutator put.mutation-degree: []		mutator clone: m-chimacum	LOOP;: MUTANT-PLAYER.INIT	#-of-mutations 1+ new: mutant-player ( room for original as well.... )	3 put.on.dim: mutant-player	ins-midi-1 put.instrument: mutant-player	m-chimacum add: mutant-player	#-of-mutations 0 	DO		i at: m-mutant-list		add: mutant-player	LOOP\	m-countdown add: mutant-player;\ this mutation is a concatenation of the contour interval (with stochastic clumping )\ and the irregular unsigned magnitude (IUIM): ICMC.MUTATE { | mutator -- }	#-of-mutations 0	DO		i at: m-mutant-list		-> mutator		m-countdown mutator mutate.full.olm.abs: []		m-countdown mutator mutate.old: []	LOOP;: COMPARE'EM ( make sure it gets to the last one.... )	1 print.horizontal: m-countdown	1 #-of-mutations 1- at: m-mutant-list print.horizontal: []	50 4 new: m-countdown	2 new: player-3	m-countdown add: player-3	#-of-mutations 1- at: m-mutant-list add: player-3	3 put.on.dim: player-3	100 put.repeat: player-3	ins-midi-1 put.instrument: player-3	player-3 hmsl.play;: INIT.ICMC.DEMO	setup.tempo	chimacum.init	countdown.init	transpose.chimacum	m-mutant-list.init	mutant-player.init	icmc.mutate;\ this word crams all the shape into 1 for an easy finale printout....: M-MUTANT-LIST->ALL-SHAPES { | shape -- }	#-of-mutations 1+ 4 new: all-shapes  \ room for all the shapes	many: m-chimacum ( first add source shape )	0 DO		i m-chimacum get: []		add: all-shapes	LOOP	#-of-mutations 0 DO		i at: m-mutant-list		-> shape		17 0 DO			i shape get: []			add: all-shapes		LOOP	LOOP;: DO.MUTANTS->MIDI	init.icmc.demo	" metrics:icmc.demo"	$midifile0{ 	mutant-player hmsl.play	}midifile0;: TERM.ICMC.DEMO	free: m-chimacum	free: m-countdown	free: player-1	free: player-2	free: player-3	free: mutant-player	freeall: m-mutant-list;if.forgotten term.icmc.demo
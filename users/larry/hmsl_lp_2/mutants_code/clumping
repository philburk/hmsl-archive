\ Clumping experiments\ this file needs floating point\ we want the following syntax:\  ( ½ ¶ ½-history L type  -- p )anew task-clumpingv: ½-historyv: clump-lengthv: clump-typefvariable clump-weightfvariable clump-resultfvariable ½.fvariable ¶.0.5 ½. f!.999 ¶. f!\ ½ and ¶ are both floating point\  returns the evaluation of (½ **1-¶): Pi ( -- )	½. f@ 	¶. f@	1. fswap f- f**;: SET.CLUMP ( ½. ¶. -- , fill the variables )		¶. f! 		½. f!;: CLUMP? ( ½. ¶. ½-hist length type -- clump-result , changes certain members )	clump-type !	clump-length !	½-history !	¶. f!	½. f!	\ test to see if they're both zero: if so, set result to zero, if	\ not, do the clumping equation	½. f@ 0.0 f= ¶. f@ 0.0 f=	and	IF		." here we are " cr		0.0 clump-result f!	ELSE		pi clump-result f!	THEN	1.0 clump-weight f!	CASE		clump-type @		0 of 0.0 clump-weight f! f.s endof		1 of 1.0 ½-history @ float ½. f@ clump-length @ float f* f/ f- clump-weight f! endof		2 of ½-history @ float ½. f@ clump-length @ float f*  			f<			 IF				1.0 clump-weight f!			 ELSE				0.0 clump-weight f!			THEN		endof		ENDCASE	clump-result f@ clump-weight f@ f*;v: temp-hist : CLUMP.EM	50000 0 DO			?terminal IF leave then 			1000 choose float 1000.0 f/			0.5 0.1 temp-hist @ 50000 1 clump?			f<			IF				." . "				1 temp-hist +!			ELSE				." ' "			THEN	LOOP;
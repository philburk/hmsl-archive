anew task-yitgadal_constants\ 5/16/99\ lp\ arrays for harmonicsob.shape violin1-arrayob.shape viola-arrayob.shape violin2-arrayob.shape cello-array\ pitch names for easier transcribingob.shape violin1-pitchesob.shape violin2-pitchesob.shape viola-pitchesob.shape cello-pitches\ arrays of arraysob.array string-fundamentalsob.objlist string-arraysob.objlist pitch-arrays\202 k: piece_lengthob.shape piece-chordsob.array test-chord \ this is chord that will be tested for inclusion in the pieceob.array chord-string  \ strings on which successful chord occursob.array chord-harm  \ harmonics for successful chord\ for testing resolution of gsob.array gs-hit-array\ these two shapes are the list of chords for the piece...ob.shape chord-string-listob.shape chord-harm-list0 k: cello1 k: viola2 k: violin13 k: violin24 k: #_strings4 k: #_instruments5 k: #_harmonics1 K: gs_min33 k: gs_max \ these were computed for dyads heuristically, between any strings of different instruments\ the following were computed for all four parts chords, 1 note per instrument...\ computed by a LONG random walk, then spitting out mins and maxes...\ later pieces could use double stops, but i wanted to keep this piece simpler\ for the players to play...47 k: gs_chord_min160 k: gs_chord_max\gs_chord_max gs_chord_min - k: gs_chord_range6 k: gs_chord_delta \ gs delta around which a chord is considered "good"\ 6/2 is the minimum gap, which happens down in the low end, of all the possible\ gs values for this tuning and one string each chord...\ keeps track of where you are in the piece...v: curr-chord-#0 curr-chord-# !\ some statsv: average-attemptsv: computation-timeob.array section-array: INIT.SECTION-ARRAY	5 new: section-array	stuff{  57 17 72 28 28 }stuff: section-array;
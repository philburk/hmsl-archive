\ BIG SOUNDS small sounds\ 2/15/92\ author lp\ 2/18/92: revANEW TASK-BS_SSob.job	bs-jobob.array bs-algob.array ss-alg\ note: to use the MIDI pedal, use switches 1 and 8, or controllers \ 7 and 65true value vol-pedal?v: bs/ss?true bs/ss? !v: alg-prob\ this next value is the maximum for the job durationv: p-change-rate127 p-change-rate !: ALG.ARRAY.INIT	5 new: bs-alg	7 new: ss-alg	d-alg-nlrev-mod d-alg-rev/chor-par/ser 	d-alg-chor/del d-alg-chor/del d-alg-rev/chor d-alg-rev-mod  d-alg-chor	7 stuff: ss-alg	d-alg-nlrev d-alg-rev/chor d-alg-chor-reverb d-alg-rev d-alg-chor	5 stuff: bs-alg;: BIG/SMALL? { c-# val  -- }	\ switch	c-# 65 = 	IF		val 0= not		IF			bs/ss? @ 1+ 2 mod 			bs/ss? !			bs/ss? @ 			IF				cr ." BIG SOUNDS " cr				ELSE				cr ." small sounds " cr			THEN			set.done: bs-job \ finish the job and start it again			600 20 wchoose 			dup cr ." (Start delay for new section is: " . ." ) " cr			put.start.delay: bs-job			start: bs-job		THEN	THEN	\ only read this next sequence if you want to use the volume pedal	vol-pedal? IF		c-# 7 =		IF			val 2* p-change-rate !		THEN	THEN;v: algorithm?: BS-DEP.ALGORITHM	0 d-output! dep-5.send	bs/ss? @	IF		cr ." Big sound algorithm: " 		5 choose 		dup algorithm? !		at: bs-alg		dup dep-algorithm.name	ELSE			cr ." Small sound algorithm: " 		7 choose 		dup algorithm? !		at: ss-alg		dup dep-algorithm.name	THEN		60 dep-5.output.wait		d-algorithm! dep-5.send;\ routines for randomly changing various dep parameters\ plates, specials, and halls: RAND.D-REV-TYPE!.SMALL  14 choose d-rev-type! ;\ rooms, some halls, and specials: RAND.D-REV-TYPE!.BIG  	4 choose 1 = 	IF		\ sometimes use the specials		2 choose 	ELSE 22 11 wchoose 	THEN	d-rev-type! ;: RAND.D-FEEDBACK! 256 40 wchoose  d-feedback!  ;: RAND.D-RATE!.SMALL 256 200 wchoose d-rate!   ;: RAND.D-RATE!.BIG 256 choose d-rate! ;: RAND.D-DEPTH! 256  100 wchoose d-depth! ;: RAND.D-PREDELAY! 256 choose d-predelay! ;: RAND.D-DELAY-TIME! 256 50 wchoose d-predelay! ;: RAND.D-REV-TIME! 256 choose d-rev-time! ;: RAND.D-#-DELAYS! 256 70 wchoose d-rev-time! ;: RAND.D-FEEDBACK-DELAY! 256 choose d-rev-time! ;: RAND.D-GATE! 256 choose d-hf-damp! ;	: RAND.D-RATE! 	bs/ss? @	IF 	rand.d-rate!.big 	ELSE rand.d-rate!.small 	THEN;: RAND.D-REV-TYPE! 	bs/ss? @	IF 	rand.d-rev-type!.big 	ELSE rand.d-rev-type!.small 	THEN;: CHANGE.REVERB	5 choose 	CASE		0 of RAND.D-REV-TYPE! endof		1 of RAND.D-PREDELAY! endof		2 of RAND.D-REV-TIME! endof		3 of RAND.D-GATE! endof		4 of rand.d-rev-type! endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.NLREV-MOD 		6 choose 	CASE		0 of RAND.D-DEPTH!  endof		1 of RAND.D-RATE!  endof		2 of RAND.D-PREDELAY! endof		3 of RAND.D-REV-TIME! endof		4 of RAND.D-GATE! endof		5 of rand.d-depth! endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.REV/CHOR-PAR/SER 		7 choose 	CASE		0 of RAND.D-DEPTH!  endof		1 of RAND.D-RATE!  endof		2 of RAND.D-PREDELAY! endof		3 of RAND.D-REV-TIME! endof		4 of RAND.D-GATE! endof		5 of RAND.D-FEEDBACK! endof		6 of RAND.D-REV-TYPE! endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.CHOR/DEL 		7 choose 	CASE		0 of RAND.D-DEPTH!  endof		1 of RAND.D-RATE!  endof		2 of RAND.D-FEEDBACK-DELAY! endof		3 of RAND.D-DELAY-TIME! endof		4 of RAND.D-FEEDBACK! endof		5 of RAND.D-DEPTH!  endof		6 of RAND.D-RATE!  endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.REV/CHOR 		9 choose 	CASE		0 of RAND.D-DEPTH!  endof		1 of RAND.D-RATE!  endof		2 of RAND.D-PREDELAY! endof		3 of RAND.D-REV-TIME! endof		4 of RAND.D-GATE! endof		5 of RAND.D-FEEDBACK! endof		6 of RAND.D-REV-TYPE! endof		7 of RAND.D-REV-TIME! endof		8 of RAND.D-FEEDBACK! endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.REV-MOD  	7 choose 	CASE		0 of RAND.D-REV-TYPE! endof		1 of RAND.D-PREDELAY! endof		2 of RAND.D-REV-TIME! endof		3 of RAND.D-GATE! endof		4 of RAND.D-DEPTH!  endof		5 of RAND.D-RATE!  endof		6 of RAND.D-DEPTH!  endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.CHOR		3 choose 	CASE		0 of RAND.D-DEPTH!  endof		1 of RAND.D-RATE!  endof		2 of RAND.D-GATE! endof	." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.NLREV 		3 choose 	CASE		0 of RAND.D-GATE! endof		1 of RAND.D-PREDELAY! endof		2 of RAND.D-REV-TIME! endof		." illegal choice " cr	ENDCASE	dep-5.send;: CHANGE.CHOR-REVERB 	change.rev/chor;		: CHANGE.BIG.SOUND.PARAMETER	algorithm? @ 	CASE		0 of change.chor endof		1 of change.reverb endof		2 of change.chor-reverb endof		3 of change.rev/chor endof		4 of change.nlrev endof		cr dup . ." illegal algorithm number stored " cr	ENDCASE;: CHANGE.SMALL.SOUND.PARAMETER	algorithm? @ 	CASE		0 of change.chor endof		1 of change.rev-mod endof		2 of change.rev/chor endof		3 of  change.chor/del endof		4 of  change.chor/del endof		5 of  change.rev/chor-par/ser endof 		6 of change.nlrev-mod endof		cr dup . ." illegal algorithm number stored " cr	ENDCASE;: BS-JOB.START { job -- } 	200 20 wchoose job put.start.delay: []	60 15 wchoose dup alg-prob ! 	." Initial prob. of changing algorithms is " . ." % " cr	bs-dep.algorithm 	p-change-rate @ dup 2/ wchoose 20 255 clipto dup put.duration: bs-job	." Job duration is " . cr;: BS.JOB.FUNCTION { job -- }	bs/ss? @ IF		." ½"		ELSE		." ¿" 		THEN	\ pick a new algorithm, set a new job duration	100 choose alg-prob @ < 	IF 		bs-dep.algorithm		p-change-rate @ dup 2/ wchoose 20 255 clipto dup put.duration: bs-job		cr tab ." Job duration is " . ." ticks " cr 		60 20 wchoose dup alg-prob ! 		tab ." New prob. of changing algorithms is " . ." % " cr	THEN	bs/ss? @ 		IF			change.big.sound.parameter		ELSE			change.small.sound.parameter		THEN;\ this is a kluge, which phil corrected in the next version of HMSL\ which prevents the midi parser from spitting out lots of text...: MP.KLUGE.SYSEX ( vendor -- , eat bytes until F7 )    drop     midi.rtc.time@ mp-last-time !\	." eating "    BEGIN        midi.recv        IF midi.rtc.time@ mp-last-time !        	$ F7 =        ELSE rtc.time@ mp-last-time @ - rtc.rate@ / 10 >        	abort" MP.EAT.SYSEX - timed out!"        	false        THEN    UNTIL;: BS.INIT	'c mp.kluge.sysex mp-sysex-vector !	16 midi.channel! \ setup for dep-5	midi.flush 	midi.clear	alg.array.init	'c big/small? mp-control-vector !	1 new: bs-job	'c bs.job.function add: bs-job	'c bs-job.start put.start.function: bs-job	midi.parser.on;: BS.TERM	midi.flush	midi.clear	free: bs-job	mp.reset;: BS.GO	cr cr cr cr tab tab ." Big Sounds, Small Sounds..... " cr cr cr	." Max. job duration is: " p-change-rate @ 2 * . cr	vol-pedal? IF		." Using MIDI volume pedal for job duration " cr	THEN	bs.init	false hmsl-graphics !	bs-job hmsl.play;IF.FORGOTTEN BS.TERM
\ Roads playersANEW TASK-ROADS_PLAYERSob.collection r-collectionob.objlist r-playersob.player r-1-playerob.player r-2-playerob.player r-3-playerob.player r-4-player\ target players.ob.collection r-t-collectionob.objlist r-t-playersob.player r-1-t-playerob.player r-2-t-playerob.player r-3-t-playerob.player r-4-t-playerob.player r-test-playerob.player t-1ob.player t-2ob.player t-3ob.player t-4ob.collection t-collection: SCALE.PLAYER.DURATIONS { el# sh -- duration }	el# 0 sh ed.at: []	4 / ;: INIT.R-PLAYERS { player -- }	20 player new: []	3 player put.on.dim: []	player use.relative.time: []	'c scale.player.durations player put.dur.function: [];	: TEST.PLAY  { voice# mut# -- }	1 new: r-test-player	mut#	voice# at: r-players	at: []	add: r-test-player	r-test-player hmsl.play;: TEST.PLAY.4 { mut# -- }	1 new: t-1	1 new: t-2	1 new: t-3	1 new: t-4	ins-midi-1 put.instrument: t-1	ins-midi-2 put.instrument: t-2	ins-midi-3 put.instrument: t-3	ins-midi-4 put.instrument: t-4	3 t-1 put.on.dim: []	 use.relative.time: t-1	'c scale.player.durations put.dur.function: t-1\	3 t-2 put.on.dim: []	 use.relative.time: t-2	'c scale.player.durations put.dur.function: t-2\	3 t-3 put.on.dim: []	 use.relative.time: t-3	'c scale.player.durations put.dur.function: t-3\	3 t-4 put.on.dim: []	 use.relative.time: t-4	'c scale.player.durations put.dur.function: t-4	4 new: t-collection 	act.parallel: t-collection	mut# at: r-1-list add: t-1	mut# at: r-2-list add: t-2	mut# at: r-3-list add: t-3	mut# at: r-4-list add: t-4	stuff{ t-1 t-2 t-3 t-4 }stuff: t-collection	t-collection hmsl.play;: TP4	test.play.4;: TP17	18 0 DO		i dup . tp4 		key IF leave THEN 	LOOP ;: ROADS.PLAYERS.INIT	4 new: r-collection 	act.parallel: r-collection	4 new: r-players	r-1-player add: r-players	r-2-player add: r-players	r-3-player add: r-players	r-4-player add: r-players\	'c init.r-players do: r-players\		4 new: r-t-collection 	act.parallel: r-t-collection	4 new: r-t-players	r-1-t-player add: r-t-players	r-2-t-player add: r-t-players	r-3-t-player add: r-t-players	r-4-t-player add: r-t-players\	'c init.r-players do: r-t-players\ this following is done to the shapes themselves...	0 put.offset: ins-midi-1	0 put.offset: ins-midi-2	0 put.offset: ins-midi-3	0 put.offset: ins-midi-4\	ins-midi-1 put.instrument: r-1-player	ins-midi-2 put.instrument: r-2-player	ins-midi-3 put.instrument: r-3-player	ins-midi-4 put.instrument: r-4-player\	ins-midi-1 put.instrument: r-1-t-player	ins-midi-2 put.instrument: r-2-t-player	ins-midi-3 put.instrument: r-3-t-player	ins-midi-4 put.instrument: r-4-t-player\		4 0 DO		i at: r-master-list		many: [] 0 DO			i 			j at: r-master-list 			at: []			j at: r-players 			add: []		LOOP	LOOP	4 0 DO		i at: r-players		add: r-collection	LOOP	r-1-target add: r-1-t-player	r-2-target add: r-2-t-player	r-3-target add: r-3-t-player	r-4-target add: r-4-t-player	4 0 DO		i at: r-t-players		add: r-t-collection	LOOP	1 new: r-test-player	ins-midi-1 put.instrument: r-test-player	3 r-test-player put.on.dim: []	 use.relative.time: r-test-player	'c scale.player.durations put.dur.function: r-test-player;: ROADS.PLAYERS.TERM	freeall: r-players	free: r-players	free: r-collection	freeall: r-t-players	free: r-t-players	free: r-t-collection	free: r-test-player	free: t-1	free: t-2	free: t-3	free: t-4	free: t-collection;
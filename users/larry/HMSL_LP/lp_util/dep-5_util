\ roland dep-5 midi implementation\ hmsl based -- system exclusive\ larry polansky\ author: lp  5/87\ this file must also use global_util file, for definition of\ words like sysex and endsysex. you must compile that file,\ or at least the few midi words at the top of that file\ first, or this stuff won't work\ this dep-5 code has been used mainly in pieces, for\ experimental work. it is not really intended for\ more conventional applications, but that is not to\ say that it won't work fine other applications\ the user should try out the various speed and parametric\ value changes that he or she wants to use with the\ dep-5 to determine the tolerance to clicks, cutoffs, glitches\ etc., in the rapid changing of dep parameters in real time\ one application of this code has been in the construction\ of multi-dimensional dep-5 instruments that can be controlled\ from the shape-editor in real-time. the source code for\ the piece COCKS CROW, DOGS BARK... should be consulted for\ more information on this\ these utilities should be "tuned" to the dep-5: that is\ the correspondence between byte values and actual dep\ parameter values is not apparent. some of these\ correspondences have been made hueristically (like for algorithm)\ and the author is currently waiting for more information from\ roland to tune the file further.\ mod: 9/16: now have the values, and have adjusted those that\ seem useful (algorithm, mid filter boost/cut )\ note: most of the parameters (like chorous depth, pre-delay, etc.\ are exponential: that is actual values do not change as much\ with low byte values...anew task-dep-5_util\ =================================================\ utilitieshex: D.ID 41 midi.xmit ;: D.APR 35 midi.xmit ; ( all parameters ): D.CHANNEL midi-channel @ 1- midi.xmit ;: D.FORMAT 52 midi.xmit ;: D.LEVEL 20 midi.xmit ;: D.GROUP 01 midi.xmit ;decimal\ ==================================================\ variables for dep-5 parametersv: d-rev-type v: d-output  v: d-q  v: d-mid-freq v: d-lo-boostv: d-mid-boostv: d-hi-boostv: d-feedback ( feedback of chorous )v: d-rate ( of chorous )v: d-depth ( of chorous )v: d-algorithmv: d-predelay ( or delay time )v: d-rev-time ( or delay feedback -- number of delays? )v: d-hf-damp ( or gate time )\ delay time, feedback of delay, and gate time are\ "aliased" as they are in the parameter knobs of the dep-5\ (see below). \ reverb types\ specials and plates0 k: s1  1 k: s2   2 k: p1  3 k: p2\ halls4 k: h14 5 k: h20  6 k: h27  7 k: h368 k: h48 9 k: h61  10 k: h76 \ rooms11 k: r0.3 12 k: r1.4 13 k: r3.1 14 k: r8.2 15 k: r1416 k: r20 17 k: r27 18 k: r36 19 k: r4820 k: r61 21 k: r76\ ==========================================================\ words for storing variables: D.CLIPTO ( parameter-value -- 0-127 )	0 255  clipto ;\ the dep-5 uses some kind of division of 8 bits for\ deciding on the algorithm. these numbers were determined\ hueristically, there is probably some bit pattern involved\ mod: 9/16 the array values are now slightly altered to conform\ to "DEP-5 Transfer Table from MIDI date (sic) to value",\ July, 28, 1986; Roland Documentob.array algorithm-array1 k: d-alg-chor2 k: d-alg-rev3 k: d-alg-rev-mod4 k: d-alg-chor-reverb5 k: d-alg-rev/chor6 k: d-alg-rev/chor-par/ser7 k: d-alg-nlrev8 k: d-alg-nlrev-mod9 k: d-alg-nlrev/chor10 k: d-alg-chor/del11 k: d-alg-nlrev-mod-lo: BUILD.ALGORITHM-ARRAY\ not sure of exact numbers between 4-6... but these seem to work	11 new: algorithm-array	254 227 199 171 143 115 87 59 31 3 0 	11 0 DO		i to: algorithm-array	LOOP;: DEP-ALGORITHM.NAME ( alg-# -- , prints name )	CASE		0 of ." No algorithm 0 !!!!!! " cr endof		1 of ." chorous " cr endof		2 of ." reverb " cr endof		3 of ." reverb-mod " cr endof		4 of ." chorous-reverb " cr endof		5 of ." reverb/chorous " cr  endof		6 of ." reverb/chorous (par. & ser.) " cr  endof		7 of ." non-linear reverb  " cr endof		8 of ." non-linear reverb-mod  " cr endof		9 of ." non-linear reverb/chorous " cr  endof		10 of  ." chorous/delay  " cr endof		11 of ." non-linear reverb-mod-lo  " cr endof		." Ilegal value = " dup . cr	ENDCASE;\ the following table is for the boost/cut of the filter  \ the following words "condition" values stored in variables. it is\ better to use these routines than to directly store values in\ these variables\ all the routines below have the stack diagram: ( value -- )\ To have something happen, you must store a value via one of these\ routines, and then call DEP-5.SEND: D-REV-TYPE! 0 22  clipto d-rev-type ! ;: D-OUTPUT! 0 99 clipto  d-output ! ;: D-Q! d.clipto d-q ! ;: D-MID-FREQ! d.clipto d-mid-freq ! ;: D-LO-BOOST! d.clipto d-lo-boost ! ;\ mid filter cut boost has 25 possible values, from -12 to +12\ the Roland spec shows that the 8-bit range is linearly divided up: D-MID-BOOST! -12 12 clipto	10 / d-mid-boost ! ;: D-HI-BOOST! d.clipto d-hi-boost ! ;\ values for feedback range from 0-256, resulting in values ranging from \ 0-100 of feedback : D-FEEDBACK! d.clipto  d-feedback ! ;\ values for rate range from 0-256, resulting in values ranging from \ 0-10.0 of rate : D-RATE! d.clipto d-rate !   ;\ values for depth range from 0-256, resulting in values ranging from \ 0-50.0 of depth : D-DEPTH!  d.clipto d-depth !   ;\ wants numbers between 0 and 11: D-ALGORITHM! 1 11 clipto 1-	at: algorithm-array 	 d-algorithm ! ;\ values go from 0-500 on dep, send it values 0-256: D-PREDELAY! d.clipto d-predelay ! ;\ send 0-256, goes from 0-2 seconds: D-DELAY-TIME! d-predelay! ;\ dep values range from 1.0 to 99, send it values from 0-256: D-REV-TIME! d.clipto d-rev-time ! ;: D-#-DELAYS! d-rev-time! ;: D-FEEDBACK-DELAY! d-rev-time! ;: D-HF-DAMP! d.clipto d-hf-damp ! ;\ dep values range from 10-99: D-GATE! d-hf-damp! ;: DEP-5.SEND ( --- )	sysex d.id d.apr d.channel	d.format d.level d.group	d-rev-type @ midi.xmit ( reverb type )	d-output @ midi.xmit ( output level )	d-q @ midi.xmit ( parametric q )	d-mid-freq @ midi.xmit ( parametric frequency )	d-lo-boost @ lo/hi.mask	d-mid-boost @ lo/hi.mask	d-hi-boost @ lo/hi.mask	d-feedback @ lo/hi.mask	d-rate @ lo/hi.mask	d-depth @ lo/hi.mask	d-algorithm @ lo/hi.mask	d-predelay @ lo/hi.mask	d-rev-time @ lo/hi.mask	d-hf-damp @ lo/hi.mask	endsysex midi.flush;: DEP-5.INIT	build.algorithm-array;\ Just a hard wait to reset the output level of the dep\ How-long is specified in ticks, 60ths of a second: DEP-5.OUTPUT.WAIT { how-long | temp-tick -- }		how-long 25 / 		1 max -> temp-tick		26 0 DO			i 4 * d-output! dep-5.send			temp-tick vtime+!		LOOP;\ note: probably shouldn't do this here.... but....dep-5.init\ example: change rev-type...: RAND.CHANGE.REV.TYPE	22 choose d-rev-type!	dep-5.send;	
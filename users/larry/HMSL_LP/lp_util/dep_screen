\ DEP-5 utility screen\ author: LP\ 5/10/91\ this should be in hmslimageinclude? ob.fader h:ctrl_faderinclude? task-global_util util:global_utilinclude? task-dep-5_util util:dep-5_utilanew task-dep_screenob.screen scr-depob.fader scr-d-outputob.counter scr-d-algorithmob.fader scr-d-depthob.fader scr-d-rate: SCR-D-ALGORITHM.FUNCTION { value part# -- }	value 1+ d-algorithm!	dep-5.send;: SCR-D-ALGORITHM.TEXT.FUNCTION ( value -- addr count )	CASE		0 of " Ch only " Endof		1 of " Rev only " endof		2 of " Rev w/mod " endof		3 of " Rev->ch " endof		4 of " Rev/ch " endof		5 of " Rev/ch, rev->ch. " endof		6 of " Non Lin " endof		7 of " Non L,NL->Ch " endof		9 of " Ch/Del " endof		10 of " NL " endof	ENDCASE	count;: INIT.SCR-D-ALGORITHM\	1 1 new: scr-d-algorithm\	" Algorithm " put.text: scr-d-algorithm		'c scr-d-algorithm.text.function put.text.function: scr-d-algorithm	'c scr-d-algorithm.function put.down.function: scr-d-algorithm	'c scr-d-algorithm.function put.up.function: scr-d-algorithm;: SCR-D-OUTPUT.FUNCTION { value part# -- }	value d-output!	dep-5.send;: INIT.SCR-D-OUTPUT	1800 2000 put.wh: scr-d-output	1000 put.knob.size: scr-d-output	'c scr-d-output.function put.move.function: scr-d-output	100 1 put.max: scr-d-output	0 1 put.min: scr-d-output	" Output Level " put.title: scr-d-output;	: INIT.SCR-DEP	" DEP-5 " put.title: scr-dep	100 put.key: scr-dep	15 3 new: scr-dep	init.scr-d-output	init.scr-d-algorithm	scr-d-output 100 3000 add: scr-dep	scr-d-algorithm 500 3000 add: scr-dep;init.scr-dep: TERM.SCR-DEP	free: scr-d-output	free: scr-d-algorithm	free: scr-dep;if.forgotten term.scr-dep
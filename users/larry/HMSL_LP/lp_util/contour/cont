\ System for testing the possibility of contours.include? { ju:localsANEW TASK-CHECK_CONTOURSdecimal: N>LEADING    ( N #digits -- addr count )    >r s->d <# r> 1- 0 max 0    DO #    LOOP #S #>;: .LEADING  ( N #digits -- , print with leading zeros )    n>leading type space; : TRINARY 3 BASE ! ;: .CONTOUR ( N #digits -- )    base @ >r    trinary .leading    r> base !;V: NUM-DIGITS\ Extract interval descriptions from base 3 number: NEXT.INTERVAL ( N -- N' 0|1|2 )    3 /MOD swap;: 2V>INTERVAL  ( N1 N2 -- 0|1|2 )    2dup =    IF 2drop 1    ELSE >        IF 0        ELSE 2        THEN    THEN;\ : 2V>INTERVAL  ( N1 N2 -- 0|1|2 )\     swap - dup abs / 1+  ( SLOW and needs /0 !! )\ ;: NUM.INTERVALS  ( N --- [N**2 - N]/2 )    dup dup * swap - 2/;: NUM.MATRICES ( N --- #matrices )    num.intervals 3**N;: COUNTUP ( #digits -- )    dup num-digits !    trinary    3**N    0 DO        i num-digits @ .leading cr?        ?terminal abort" stop it!"    LOOP;METHOD SET:METHOD CALC.CONTOUR:METHOD CONTOUR::CLASS OB.VALUES <SUPER OB.ARRAY    iv.long iv-contour:M SET:  ( n0 n1 n2 ... NN -- )    clear: self    size: self 0    DO size: self i - 1- to: self    LOOP;M:M CALC.CONTOUR:  { | accum --- }    0 iv=> iv-contour    size: self 1- 0    DO  size: self i 1+        DO  j at: self            i at: self 2v>interval            iv-contour 3 * + iv=> iv-contour        LOOP    LOOP;M:M PRINT:    print: super    calc.contour: self    ." Contour = " iv-contour    size: self dup dup * swap - 2/ .contour;M:M CONTOUR: ( --- contour )    iv-contour;M;CLASSOB.VALUES C1OB.ARRAY CONT-MATS: TEST1    4 new: c1    12 7 9 18 set: c1    print: c1;: GEN.MELODY ( index -- )    size: c1 0    DO  size: c1 /mod  ( -- rem q )        swap i to: c1    LOOP drop;: TEST2     size: c1 num.matrices new: cont-mats    clear: cont-mats    1 size: c1 0 DO size: c1 * LOOP  ( number of melodies )    0 DO        i gen.melody        calc.contour: c1        1 contour: c1 +to: cont-mats    LOOP;: COUNT.MATS ( -- )    0 size: cont-mats 0    DO i at: cont-mats 0>       IF 1+       THEN    LOOP    >newline    dup . ."  possible, " size: cont-mats swap - . ."  impossible" cr;: PRINT.MATS ( --- )    >newline    size: c1 num.intervals    size: cont-mats 0    DO i over .contour i at: cont-mats . ."  , " cr?    LOOP drop    count.mats;: CONT.TERM    free: c1    free: cont-mats;: SHOW.RATIOS ( N -- )    >newline    ." #NOTES , #CONTOURS , #POSSIBLE, RATIO " cr    0 DO        i 5 .r        3 i num.intervals x**y dup 10 .r        i num.orders dup 14 .r        / 8 .r cr    LOOP;IF.FORGOTTEN CONT.TERM
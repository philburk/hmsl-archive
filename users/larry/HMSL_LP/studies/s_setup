\ Studies\ larry polansky\ 5/22/90\ this file sets up various things for the pieces...\ changes 5/24/90\ changes 5/26/90  added unclogger, changed text sizes, added time-advance anew task-s_setup\ source shapesob.mutator s-s-1ob.mutator s-s-2ob.mutator s-s-3\ target shapesob.mutator s-t-1ob.mutator s-t-2ob.mutator s-t-3\ mutator shapesob.mutator s-m-1ob.mutator s-m-2ob.mutator s-m-3\ temp shapes...ob.mutator s-temp-1\ other objectsob.player s-player-1\ ========\ controlsob.screen study-screenob.radio.grid study-starterob.menu.grid s-unclog-midiob.radio.grid study1-checkob.numeric.grid s-shortest-noteob.numeric.grid s-metric-value\ ===============================\ system variables for studies...v: chord-channel \ four part chord starts on this channel, and		\ continues for three channels higher...v: melody-channelv: chord-fundamental	v: chord-rate\ the following variable is used for filtering notes out from glitches in\ pitch followerv: shortest-note\ =====================================\ utilities for inputting information...	: INPUT.STUDY.CHORD	cr ." What channel should six channel chord start on? "	cr ." (needs six channels, starting with this) "	cr ." (each must have pitch bend on... ):  "	input# 		IF chord-channel !		ELSE ." not a valid channel !!!! "			." (channel 2 selected...) " cr		2 chord-channel !		THEN;: INPUT.STUDY.MELODY	cr cr	cr tab 	." !!! ASSUMED that target melody is coming in on CHANNEL 1 !!! "	cr cr	tab ." What channel should target melody be played back on? "	cr ." (Probably channel 1, needs one note per channel): "	input#	IF	melody-channel !	ELSE			." Not a valid channel !!! " cr		." (Target channel set to 1) " cr		1 melody-channel !	THEN;\ ===================\ data structures....: BUILD.S-SHAPES	100 3 new: s-s-1	100 3 new: s-s-2	100 3 new: s-s-3	100 3 new: s-t-1	100 3 new: s-t-2	100 3 new: s-t-3	100 3 new: s-m-1	100 3 new: s-m-2	100 3 new: s-m-3	100 3 new: s-temp-1\	 s-s-1 add: shape-holder	 s-s-2 add: shape-holder	 s-s-3 add: shape-holder	 s-t-1 add: shape-holder	 s-t-2 add: shape-holder	 s-t-3 add: shape-holder	 s-m-1 add: shape-holder	 s-m-2 add: shape-holder	 s-m-3 add: shape-holder\	1 new: s-player-1	s-t-1 add: s-player-1	use.absolute.time: s-player-1	3 put.on.dim: s-player-1	ins-midi-1 put.instrument: s-player-1	0 put.offset: ins-midi-1;: INIT.S-SHAPES	build.s-shapes;: TERM.S-SHAPES	clear: shape-holder	free: s-s-1	free: s-s-2	free: s-s-3	free: s-t-1	free: s-t-2	free: s-t-3	free: s-m-1	free: s-m-2	free: s-m-3	free: s-player-1;: STUDY.REC.FUNCTION	midi.clear	empty: s-temp-1	s-temp-1 record.wait;: STUDY.PLAY.FUNCTION	1 put.repeat: s-player-1	start: s-player-1 ;	: STUDY.STOP.FUNCTION 	stop: s-player-1	time@ record.stop	cr ." Recorded!  " \ first, clone in the source to the mutator...	empty: s-t-1	s-temp-1 s-t-1	sh.compress.notes	many: s-t-1 ." #notes (pre-deglitch) " . tab	shortest-note @  deglitch: s-t-1	many: s-t-1	." #notes (after deglitch) " . cr;: S-UNCLOG-MIDI.FUNCTION ( value part -- )	2drop midi.unclog;: BUILD.S-UNCLOG-MIDI	1 1 new: s-unclog-midi	500 200 put.wh: s-unclog-midi	9 put.text.size: s-unclog-midi	stuff{ " unclog " }stuff.text: s-unclog-midi	'c s-unclog-midi.function put.down.function: s-unclog-midi;	: S-SHORTEST-NOTE.FUNCTION ( value part -- )	 drop shortest-note ! ;: BUILD.S-SHORTEST-NOTE	1 1 new: s-shortest-note	250 250 put.wh: s-shortest-note	100 -1 put.max: s-shortest-note	0 -1 put.min: s-shortest-note	5 0 put.value: s-shortest-note		'c s-shortest-note.function put.down.function: s-shortest-note	'c s-shortest-note.function put.up.function: s-shortest-note	'c s-shortest-note.function put.move.function: s-shortest-note	9 put.text.size: s-shortest-note	stuff{ " Deglitch" }stuff.text: s-shortest-note;		: S-METRIC-VALUE.FUNCTION ( value part -- )	 2drop ;: BUILD.S-METRIC-VALUE	1 1 new: s-metric-value	250 250 put.wh: s-metric-value	1000 -1 put.max: s-metric-value	0 -1 put.min: s-metric-value	0 0 put.value: s-metric-value		'c s-metric-value.function put.down.function: s-metric-value	'c s-metric-value.function put.up.function: s-metric-value	'c s-metric-value.function put.move.function: s-metric-value	9 put.text.size: s-metric-value	stuff{ " Metric Value" }stuff.text: s-metric-value;: BUILD.STUDY.CONTROLS	build.s-metric-value	build.s-shortest-note	build.s-unclog-midi\ first build a generic playback, record, and play starter...	1 3 new: study-starter	500 500 put.wh: study-starter	stuff{ " rec " " stop " " play " }stuff.text: study-starter	true 1 put.value: study-starter	'c study.starter.function put.down.function: study-starter\ setup screen	0 scg.selnt	study-screen default-screen !	" STUDIES " Put.title: study-screen	" Source melody " put.title: study-starter	41 3 new: study-screen	s-unclog-midi 3200 500 add: study-screen	s-shortest-note 3200 1000 add: study-screen	s-metric-value 3200 1500 add: study-screen	study-starter 500 500 add: study-screen;: INIT.STUDIES	15 time-advance !	init.s-shapes	build.study.controls;init.studies: TERM.STUDIES	freeall: study-screen	free: study-screen;: TRAIN.PLAYER	'c midi.noteon mp-on-vector !	'c midi.noteoff mp-off-vector !	midi.parse.loop;	if.forgotten term.studies
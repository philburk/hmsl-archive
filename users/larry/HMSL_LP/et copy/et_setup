\ et following routines\ author lp\ march 16, 1994anew task-et_setup0 value preset-sumv: where?17 where? !v: time-scalar5 time-scalar !\ the following variable is used for filtering notes out from glitches in\ pitch followerv: shortest-note5 shortest-note !v: #-notes5 #-notes !v: prev-notev: prev-time0 prev-time !v: echo-?ob.shape et-intsob.shape et-presets\ controlsob.screen et-screenob.numeric.grid et-where?ob.numeric.grid s-shortest-noteob.numeric.grid s-time-scalarob.check.grid s-presetob.numeric.grid et-preset-grid: S-SHORTEST-NOTE.FUNCTION ( value part -- )	 drop shortest-note ! ;: BUILD.S-SHORTEST-NOTE	1 1 new: s-shortest-note	250 250 put.wh: s-shortest-note	100 -1 put.max: s-shortest-note	0 -1 put.min: s-shortest-note	5 0 put.value: s-shortest-note		'c s-shortest-note.function put.down.function: s-shortest-note	'c s-shortest-note.function put.up.function: s-shortest-note	'c s-shortest-note.function put.move.function: s-shortest-note	9 put.text.size: s-shortest-note	stuff{ " Deglitch" }stuff.text: s-shortest-note;: S-TIME-SCALAR.FUNCTION { val part -- }	 part 0 = IF 			 val time-scalar ! 		ELSE			val #-notes !		THEN;: BUILD.S-TIME-SCALAR	1 2 new: s-time-scalar	250 350 put.wh: s-time-scalar	100 -1 put.max: s-time-scalar	1 0 put.min: s-time-scalar	5 0 put.value: s-time-scalar	1 1 put.min: s-time-scalar	17 1 put.max: s-time-scalar	17 1 put.value: s-time-scalar		'c s-time-scalar.function put.down.function: s-time-scalar	'c s-time-scalar.function put.up.function: s-time-scalar	'c s-time-scalar.function put.move.function: s-time-scalar	9 put.text.size: s-time-scalar	stuff{ " Time scalar" " #-notes " }stuff.text: s-time-scalar;: PRESET.FUNCTION { val part -- }	part 0= 	IF		where? @ choose 0 ed.at: et-presets midi.preset	ELSE		val IF				echo-? enable			ELSE				echo-? disable			THEN			\ echo-? @ . cr	THEN;: BUILD.S-PRESET	1 2 new: s-preset	450 350 put.wh: s-preset	0 0 put.value: s-preset	0 1 put.value: s-preset	'c preset.function put.down.function: s-preset	'c preset.function put.up.function: s-preset	'c preset.function put.move.function: s-preset	9 put.text.size: s-preset	stuff{ "  Preset " " Echo? " }stuff.text: s-preset;: BUILD.ET-INTS	17 1 new: et-ints	stuff{ 0 7 7 5 5 4  4 3  3 9 9 8 2 10 6 11 1 }stuff: et-ints	17 2 new: et-presets	stuff{  48 100 48 100 24 100 48 100 48 100 48 100 76 100 	 68 100 43 100 48 100 48 100	 48 100 48 100 45 100 48 100 76 100 48 100 }stuff: et-presets	1 calc.dim.stats: et-presets 1 get.dim.sum: et-presets -> preset-sum	;: ET-WHERE?.FUNCTION ( value part -- )		 drop where? ! ;: BUILD.ET-WHERE?	1 1 new: et-where?	350 350 put.wh: et-where?	17 -1 put.max: et-where?	0 -1 put.min: et-where?	17 0 put.value: et-where?		'c et-where?.function put.down.function: et-where?	'c et-where?.function put.up.function: et-where?	'c et-where?.function put.move.function: et-where?	10 put.text.size: et-where?	stuff{ " Which verse" }stuff.text: et-where?;: GET.PRESET.SUM ( -- preset-prob-sum )	1 calc.dim.stats: et-presets	1 get.dim.sum: et-presets;	: ET-PRESET.FUNCTION { val part -- }	get.preset.sum	-> preset-sum;: BUILD.ET-PRESET-GRID	17 2 new: et-preset-grid	200 200 put.wh: et-preset-grid	100 -1 put.max: et-preset-grid	0 -1 put.min: et-preset-grid	many: et-presets 0 DO		i 0 ed.at: et-presets i put.value: et-preset-grid		i 1 ed.at: et-presets i 17 + put.value: et-preset-grid	LOOP		'c et-preset.function put.down.function: et-preset-grid	'c et-preset.function put.up.function: et-preset-grid	'c et-preset.function put.move.function: et-preset-grid	10 put.text.size: et-preset-grid	" Presets and Probs." put.title: et-preset-grid;: BUILD.ET.CONTROLS	build.s-preset	build.et-where?	build.s-shortest-note	build.s-time-scalar	build.et-preset-grid	0 scg.selnt	et-screen default-screen !	" Eleh Toldot " Put.title: et-screen	5 3 new: et-screen	s-time-scalar 1500 1500 add: et-screen	et-where? 1000 500 add: et-screen	s-shortest-note 3200 1000 add: et-screen	s-preset 3200 2000 add: et-screen	et-preset-grid 500 3500 add: et-screen;: ET.PARSE { note vel | octave curr-val -- }	rtc.time@ vtime!	rtc.time@ prev-time @ shortest-note @ +	> IF	\ store time for next parse	rtc.time@ prev-time !\ echo note on	echo-? @ IF		note vel midi.noteon	THEN\ play more  notes	#-notes @ choose  0 DO		\ choose octave		where? @ choose 3 /		3 -		-> octave 		\ octave dup .		\ now pick time delay for each note		where? @ 3 * choose  i 1+ / vtime+!		\ now octave displacement		note octave 12 * +		where? @ 1- choose 0 max 0 ed.at: et-ints  + 		vel 30 max \ take original velocity maxed with 30		where? @ 2 * i 3 * - choose		5 choose 2 > IF -1 ELSE 1 THEN		* + 		where? @ choose		time-scalar @ * 		midi.noteon.for	LOOP	rtc.time@ vtime!	THEN;: INIT.ET	build.et-ints	'c et.parse mp-on-vector !	build.et.controls;: DO.ET	init.et	midi.parser.on	hmsl;
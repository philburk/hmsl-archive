\ Slippers of Steel\ authors: Didkovsky, Polansky\ 4/26/91\ last rev: 4/26/91, 4/28\ Constants and variables,\ object declarationsanew task-sl_constants\ *******\ objects\ This is the top level collection for the piece. \ It contains, sequentially, layers and hits.\  Its repeat count is determined at the beginning of the pieceob.collection c-slippersv: slippers-repeats: SET.SLIPPERS.REPEATS ( n -- , determines # of times the sections change )	slippers-repeats !	cr cr	." Hits/layers repeat " slippers-repeats ? ." times " cr cr;\ bounds for hit repeats...v: highest-hit-ratev: lowest-hit-rate\ first is "monitor" collection, second is the repeating oneob.collection c-layers-sectionob.collection c-layers\ snapshot tells other computer what data is currentob.job j-snapshotob.job j-guitar-commands\ these jobs are internal to each c-layer\ interpolator figures out current data, timeout stops individual\ layersob.job j-interpolator \ interpolates at fixed rate and fills s-dataob.job j-timeout\ this sends a hit message, and does a hitob.collection c-hitob.job j-send.a.hit\ shape which containsob.shape s-data\ sysex transfer constant0 constant computer_vendor_code	 \ means incoming sysex is for Amiga or Mac\ hits constants, used by sysex\ this was used by early version for sysex communication\ 0 constant slip_hits_section\ 1 constant slip_layers_section\ 2 constant slip_hit_now\ 3 constant slip_data_transfer\ constants for control communication100 k: dim_0_control97 constant slip_hits_section98 constant slip_layers_section99 constant slip_hit_now100 constant slip_data_transfer\ constants for names of data in s-data0 k: s_start1 k: s_end2 k: my_curr3 k: his_curr0 K: pitch_mean		1 k: pitch_range	2 k: vel_mean	3 k: vel_range4 k: vd_mean		5 k: vd_range		6 k: hd_mean	7 k: hd_range8 k: leg_mean		9 k: leg_range\ *****************\ !!!!!!!!!!!!!!!!\ *****************\ user section\ this next collection is used in the c-layers\ collection by each computer. Nick and Larry write their own collections\ and so on that fit into this "slot", and are called up in response to \ the startings of c-layers and so onob.collection user-collectiondefer ..stuff.user-collection'c noop is ..stuff.user-collection\ user has to write oppose functiondefer ..oppose.function'c noop is ..oppose.functionob.collection user-hit\ hit-delay-time is used to postpone start of a user-hit, \ allows DEP-5 come up to speed. v: hit-delay-timedefer ..stuff.user-hit'c noop is ..stuff.user-hit\ Larry has to supply his own hit.dep-5 routine.\ When the mac calls a hit, c-hit's repeat or start function whacks hit.dep-5,then\ starts the delay job, then makes a sound.  The delay allows the dep-5 to \ load its program...defer ..hit.dep-5'c noop is ..hit.dep-5defer ..shut.up.dep-5'c noop is ..shut.up.dep-5\ used for choosing interpolator stochasticallydefer ..curr-set-interpdefer ..curr-interp'c set.cos.interp is ..curr-set-interp'c cos.interp is ..curr-interp\ *******************\ *******************v: change-to-hits-probv: change-to-layers-prob\ *************\ constants for imitating, and so on, in use by c-layers0 k: imitate1 k: oppose2 k: independentv: layer-longestv: layer-shortestv: snapshot-ratev: interp-dur
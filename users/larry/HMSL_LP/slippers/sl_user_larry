\ slippers of steel\ Larry user file...\ Full name of piece:\ There is more headroom but one's feet are forced into slippers of steel.\ from THE TIME IS NOW, by Melody Sumneranew task-sl_user_larry\ first include some special purpose sysex files for these routines...include? task-global_util util:global_utilinclude? task-dep-5_util util:dep-5_utilinclude? task-fb01 hsx:fb-01include? task-fb_util util:fb_utilob.job LARRY-user-coll-job\ different presets....: LARRY-USER-COLL-JOB.FUNC-1 { job -- }	9 0 wchoose 1+ midi.channel!	45 choose midi.preset\	midi.lastoff	get.hd	job put.duration: []	get.pitch	get.vel\	midi.noteon	get.leg	midi.noteon.for	[ hex ]	2000 choose midi.bend	[ decimal ];: LARRY-USER-COLL-JOB.FUNC-2 { job | pre -- }\ uses preset which is chosen at init time and stored in job's data...		job get.data: [] -> pre		get.vd choose 0 9 clipto \ number of voices...		0 DO			8 1 wchoose midi.channel!			pre midi.preset\	midi.lastoff			get.hd			job put.duration: []			get.pitch			get.vel			get.leg			midi.noteon.for		LOOP;\ two notes at a transposition: LARRY-USER-COLL-JOB.FUNC-3 { job | ch-1 ch-2 trans p v l pre -- }			job get.data: []			10 / -> trans  \ arbitrary trans, but same every note			1 midi.channel!  			job get.data: [] dup -> pre			midi.preset			2 midi.channel! 			pre midi.preset\	midi.lastoff			get.hd			job put.duration: []			get.pitch			dup -> p			get.vel			dup -> v\	midi.noteon			get.leg			dup -> l			1 midi.channel!			midi.noteon.for			2 midi.channel!			p trans + v l midi.noteon.for;: LARRY-USER-COLL-JOB.FUNC-4 { job | pre -- }	fb.fract.alloff.array	job get.data: [] -> pre	5 choose 1+ 0	DO		i 1+ midi.channel!		pre  midi.preset\	midi.lastoff		get.hd 		job put.duration: []		get.pitch		60 5 wchoose \ fraction		get.vel\	midi.noteon		fb.start.events		fb.fract.on.array		fb.stop.events	LOOP	;\ special job for cz-1 or something else hanging off channel 9: LARRY-USER-COLL-JOB.FUNC-5 { job | pre -- }	job get.data: [] -> pre	9 midi.channel!  \ cz-1 or something should be set on this channel		pre  midi.preset\	midi.lastoff		get.hd 		job put.duration: []		get.pitch		get.vel		get.leg		midi.noteon.for			[ hex ]		2000 choose midi.bend		[ decimal ];\ special job for cz-1 or something else hanging off channel 9: LARRY-USER-COLL-JOB.FUNC-6 { job | pre -- }	job get.data: [] -> pre	9 midi.channel!  \ cz-1 or something should be set on this channel	pre midi.preset\	midi.lastoff	rtc.time@ vtime!	get.vd 0 	DO		i 25 choose * vtime+!		get.hd 		job put.duration: []		get.pitch i 3 choose * +		get.vel i 3 * -		get.leg		midi.noteon.for		LOOP	rtc.time@ vtime!;\ dummies for adding a drop to the fb01 sysex command and the noop: TURN.EM.OFF ( job -- )	drop fb.fract.alloff.array;: NOOP.DROP ( job -- )	drop noop;: LARRY-USER-COLL-JOB.FUNC.CHOOSE { | my-cfa -- }	8 choose	CASE		0 OF 'c larry-user-coll-job.func-1 -> my-cfa ." job 1 (mono) " cr endof		1 OF 'c larry-user-coll-job.func-2 -> my-cfa ." job 2 (chords) " cr endof		2 OF 'c larry-user-coll-job.func-3 -> my-cfa ." job 3 (duet) " cr endof		3 OF 'c larry-user-coll-job.func-4 -> my-cfa ." job 4 (microtone) " cr 			 'c  turn.em.off put.stop.function: larry-user-coll-job																   endof		4 of 'c larry-user-coll-job.func-5 -> my-cfa ." job 5 (sleazy) " cr endof		5 of 'c larry-user-coll-job.func-6 -> my-cfa ." job 6 (arpegg.) " cr endof	\ arpeggio and mono get some extra "seeds"		6 OF 'c larry-user-coll-job.func-1 -> my-cfa ." job 1 (mono) " cr endof		7 OF 'c larry-user-coll-job.func-6 -> my-cfa ." job 6 (arpegg.) " cr endof	ENDCASE	my-cfa \ leave this on the stack for the init word;: INIT.LARRY-USER-COLL-JOB\ this next line is if a given preset is to be used for the whole job...	45 choose put.data: larry-user-coll-job	3 put.start.delay: larry-user-coll-job	1 new: LARRY-user-coll-job	'c noop.drop put.stop.function: larry-user-coll-job	 larry-user-coll-job.func.choose add: larry-user-coll-job;: INIT.LARRY-USER-COLL	init.LARRY-user-coll-job	\ user is repsonsible for doing this new on user-collection	1 new: user-collection	LARRY-user-coll-job add: user-collection;\ *******************\ LARRY user-hitterob.job j-LARRY-hitterob.job j-dep-5: J-DEP-5.FUNC { job -- }	job set.done: []	16 midi.channel!	75 d-output! dep-5.send	12 5  wchoose job put.duration: []	10 choose 4 < 	IF		5 choose 		CASE			0 of 255 choose d-depth! endof			1 of 255 choose d-feedback! endof			2 of 255 choose d-rate! endof			3 of 255 choose d-#-delays! endof			4 of 255 choose d-delay-time! endof		ENDCASE		dep-5.send	THEN;	: INIT.J-DEP-5	1 new: j-dep-5	'c j-dep-5.func add: j-dep-5;	: LARRY.HIT.DEP-5	." send dep " cr 	16 midi.channel!	20 d-output! dep-5.send	100 choose 1+ midi.preset;: LARRY.REVERB.DEP-5 ( -- )  16 midi.channel!	75 d-output! dep-5.send  42 midi.preset;: J-LARRY-HITTER.FUNCTION { job | LO-HIT HI-HIT -- }	."  hit " cr	job set.done: []\    midi.alloff  ( can't do that, it's a controller.... )\	time@ vtime!	70 20 wchoose -> lo-hit 	127 lo-hit  wchoose -> hi-hit 	10 0 DO	 	9 choose 1+ midi.channel!		hi-hit  lo-hit  wchoose 		127 20 wchoose		60 10 wchoose midi.noteon.for\		5 choose vtime+!	LOOP;: INIT.J-LARRY-HITTER	1 new: j-LARRY-hitter	'c j-LARRY-hitter.function add: j-LARRY-hitter	2 new: user-hit	j-dep-5 add: user-hit	j-LARRY-hitter add: user-hit	;\ first data is moved into my-curr, this oppose function must operate on my_curr\ and moves the the new data back into my_curr\ **********************\ LARRY oppose function: pitch, loudness, horizontal density: LARRY.OPPOSE.FUNCTION		\ invert pitch mean		127			my_curr pitch_mean ed.at: s-data		-		put.pitch_mean		\ invert loudness mean		127			my_curr vel_mean ed.at: s-data		-		put.vel_mean		\ invert horizontal density		120			my_curr hd_mean ed.at: s-data		-		put.hd_mean;	\ this word must be written as the last thing you do.... and it is exectuted\ in the init file, as part of the word SLIPPERS: INIT.USER	'c init.LARRY-user-coll is ..stuff.user-collection	init.LARRY-user-coll	'c LARRY.hit.dep-5 is ..hit.dep-5	'c LARRY.reverb.dep-5 is ..shut.up.dep-5	init.j-LARRY-hitter	'c init.j-LARRY-hitter is ..stuff.user-hit	'c LARRY.oppose.function is ..oppose.function	init.j-dep-5;: TERM.USER	free: j-larry-hitter	free: larry-user-coll-job;
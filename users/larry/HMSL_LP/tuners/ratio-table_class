\ Class called RATIO_TABLE\ Slightly different from HMSL tuning_ratio class\ in that these are not designed for use\ by instruments so much, as for looking up ratios\ from cents values.anew task-ratio-table_class\ cents dimensions are defined with the same constants as\ in tuner_class file0 constant numerator_dimension1 constant denominator_dimension2 constant cents(l)_dimension3 constant cents(f)_dimensionmethod find.ratio(f):\ All cents values in these tables are considered\ as ratios to the fundamental (f) and the previous ratio (l):class OB.RATIO-TABLE     <super ob.elmntsv: temp-cents:m FIND.RATIO: ( cents-value -- num den deviation, first  in table smaller )	temp-cents !	many: self 0 	DO		i numerator_dimension ed.at: self		i denominator_dimension ed.at: self		ratio->cents abs			\ Add two at a time like in tuning_ratios:m ADD:  ( num den -- , adds to table )	0 0 add: super \ stuffs in no cents values;m\ Four dimensions in all of the tables:m NEW:		4 new: super;m:m COMPUTE.CENTS(F):	many: self 0 	DO		i numerator_dimension ed.at: self		i  denominator_dimension ed.at: self		ratio->cents ( -- cents ) 		abs		i cents(f)_dimension ed.to: self	LOOP;m:m COMPUTE.CENTS(L):	many: self 1 	DO		i cents(f)_dimension ed.at: self		i 1- cents(f)_dimension ed.at: self		- abs		i cents(l)_dimension ed.to: self	LOOP;m		\ Print statement:m PRINT:	compute.cents(f): self	compute.cents(l): self	cr cr name: self	tab many: self . ." ratios in table. " cr cr	cr cr  ." # "  ." Ratio "  tab  tab  ." Cents(f) " tab 	 tab ." Cents(l) "	cr	many: self 0 	DO		i .		i  numerator_dimension ed.at: self .		." /" i denominator_dimension   ed.at: self .		 tab tab   i cents(f)_dimension ed.at: self .		tab tab tab  i cents(l)_dimension ed.at: self .		cr	LOOP	;m;classob.ratio-table my-rt: SETUP.MY-Rt	12 new: my-rt	1 1 	16 15	8 7	7 6	5 4	4 3	11 8		3 2	13 8	5 3	7 4	15 8	12 0 DO add: my-rt		LOOP;setup.my-rt
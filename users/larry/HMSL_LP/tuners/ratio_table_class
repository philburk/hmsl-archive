\ Class called RATIO_TABLE\ Slightly different from HMSL tuning_ratio class\ in that these are not designed for use\ by instruments so much, as for looking up ratios\ from cents values.anew task-ratio_table_class0 constant numerator_dimension1 constant denominator_dimension2 constant cents(l)_dimension3 constant cents(f)_dimension\ All cents values in these tables are considered\ as ratios to the fundamental (f) and the previous ratio (l):class OB.RATIO_TABLE     <super ob.elements\ Add two at a time like in tuning_ratios:m ADD:  ( num den -- , adds to table )	0 0 add: super \ stuffs in no cents values;m\ Four dimensions in all of the tables:m NEW:		4 new: super;m:m COMPUTE.CENTS(F):	many: self 0 	DO		i numerator_dimension ed.at: self		i denominator_dimension ed.at: self		ratio->cents ( -- cents ) 		abs		i cents(f)_dimension ed.to: self	LOOP;m:m COMPUTE.CENTS(L):	many: self 1 	DO		i cents(f)_dimension ed.at: self		i 1- cents(f)_dimension ed.at: self		- abs		i cents(l)_dimension ed.to: self	LOOP;m		\ Print statement:m PRINT:	compute.cents(f): self	compute.cents(l): self	cr cr name: self	cr cr tab ." # " tab ." Ratio " tab ." cr	tab many: self . ." ratios in table. " cr cr	many: self 0 	DO		tab i .		tab i numerator_dimension ed.at: self .		." /" i denominator_dimension ed.at: self .		tab i cents(f)_dimension ed.at: self .		tab i cents(l)_dimension ed.at: self .	LOOP	;m;class
\ yitgadal for string quartet, computationanew task-yitgadal_computeob.shape violin1-arrayob.shape viola-arrayob.shape violin2-arrayob.shape cello-arrayob.array string-fundamentalsob.objlist string-arrays\500 k: piece_lengthob.shape piece-chordsob.array test-chord \ this is chord that will be tested for inclusion in the piece0 k: cello1 k: viola2 k: violin13 k: violin24 k: #_strings4 k: #_instruments5 k: #_harmonics1 K: gs_min33 k: gs_max \ these were computed for dyads heuristically, between any strings of different instruments: STUFF.FUNDAMENTAL-ARRAYS	stuff{ 1 11 1 3 \ cello	7 11 1 3 \ viola	3 1 7 5 \ violin 2	11 17 13 5 \ violin 1	}stuff: string-fundamentals;: STUFF.STRING-ARRAYS { | fundamental-pitch current-instrument -- }	4 0 DO \ number of instruments 		i -> current-instrument		#_strings 0 DO \ go through the four fundamentals for each instrument			current-instrument 4 * i + at: string-fundamentals			-> fundamental-pitch			#_harmonics 0 DO				fundamental-pitch i 1 + *  \ create new harmonic			LOOP			 current-instrument at: string-arrays			add: []		LOOP	LOOP;		: INIT.YITGADAL	#_strings #_harmonics  new: violin1-array	#_strings #_harmonics  new:  violin2-array	#_strings #_harmonics  new: viola-array	#_strings #_harmonics  new: cello-array	\	piece_length #_instruments new: piece-chords \ how many chords in the piece	#_instruments  new: test-chord	stuff{ 0 0 0 0 }stuff: test-chord		#_instruments new: string-arrays	stuff{ cello-array viola-array violin2-array violin1-array }stuff: string-arrays	#_strings dup * new: string-fundamentals	stuff.fundamental-arrays	stuff.string-arrays;: PICK.A.CHORD   { | curr-ins  harm --  }	#_instruments 0	DO			#_instruments choose at: string-arrays -> curr-ins			#_strings choose #_harmonics choose curr-ins ed.at: []			-> harm			harm i to: test-chord	LOOP\	print: test-chord;: GS.CHORD { | gs-sum -- }	0 -> gs-sum	#_instruments 1- 0 DO		#_instruments i 1+ DO			i at: test-chord			j at: test-chord			gs.ratio 			gs-sum + -> gs-sum		LOOP	LOOP	gs-sum ;				: PICK.A.RATIO { | curr-ins1 curr-ins2 harm1 harm2 -- harm1 harm2 }	#_instruments choose at: string-arrays -> curr-ins1	#_strings choose #_harmonics choose curr-ins1 ed.at: []	-> harm1\	cr curr-ins1 name: [] tab harm1 . cr	BEGIN			#_instruments choose at: string-arrays -> curr-ins2			curr-ins2 curr-ins1 = not			?terminal or	UNTIL	#_strings choose #_harmonics choose curr-ins2 ed.at: []	-> harm2\	curr-ins2 name: [] tab harm2 .	harm1 harm2;: FIND.A.GS	pick.a.ratio	gs.ratio;: GS.RANGE { | test-min test-max curr-gs -- }	1000 -> test-min	0     -> test-max	BEGIN		find.a.gs -> curr-gs		curr-gs  test-min <		IF			curr-gs -> test-min		THEN		curr-gs  test-max > 		IF			curr-gs -> test-max		THEN		." . " 	?terminal 	UNTIL	cr cr	tab ." Min is " test-min . cr	tab ." Max is " test-max . cr;	: GS.CHORD.RANGE {   test-min test-max curr-gs -- }	1000 -> test-min	0     -> test-max	BEGIN		pick.a.chord gs.chord -> curr-gs		curr-gs  test-min <		IF			curr-gs -> test-min		THEN		curr-gs  test-max > 		IF			curr-gs -> test-max		THEN		." . " 	?terminal 	UNTIL	cr cr	tab ." Min is " test-min . cr	tab ." Max is " test-max . cr;			: TERM.YITGADAL	free: violin1-array	free: cello-array	free: violin1-array	free: viola-array	free:  string-fundamentals;init.yitgadalif.forgotten term.yitgadal